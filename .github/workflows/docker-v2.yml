name: Docker v2

on:
  pull_request:
  # release:
  #   types: [published]
  # push:
  #   branches:
  #     - develop
  #     - main
  #     - release\/*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'release/')}}

# TODO: Configure the ARM build with a matrix

jobs:
  build_java:
    strategy:
      matrix:
        os: ["ubuntu-latest-8-cores", "ubuntu-latest-arm-8-cores"]
        arch: ["x86_64", "aarch64"]
        exclude:
          - os: ubuntu-latest-8-cores
            arch: aarch64
          - os: ubuntu-latest-arm-8-cores
            arch: x86_64
    name: Build Java artifacts
    runs-on: ${{ matrix.os }}
    container: radixdlt/build-layers:java
    steps:
      - name: Checkout
        uses: RDXWorks-actions/checkout@main
      - uses: RDXWorks-actions/gradle-cache-action@v2
        name: Build
        env:
          SKIP_NATIVE_RUST_BUILD: "TRUE"
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"
        with:
          job-id: jdk17
          arguments: clean build -x test
          gradle-version: wrapper
          # Properties are passed as -Pname=value
          properties: |
            ci=true
            rustBinaryBuildType=release
      - name: Extract artifacts
        run: |
          cd core/build/distributions
          unzip -j *.zip
      - name: Upload artifacts
        uses: RDXWorks-actions/upload-artifact-v4@main
        with:
          name: java-build-jars-${{ matrix.arch }}
          path: core/build/distributions/*.jar
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: false
      - name: Upload core script
        uses: RDXWorks-actions/upload-artifact-v4@main
        with:
          name: java-build-core-${{ matrix.arch }}
          path: core/build/distributions/core
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: false

  build_rust:
    strategy:
      matrix:
        os: ["ubuntu-latest-8-cores", "ubuntu-latest-arm-8-cores"]
        arch: ["x86_64", "aarch64"]
    name: Build libcorerust
    runs-on: ${{ matrix.os }}
    container:
      image: radixdlt/build-layers:rust-v1
      options: --user root
    steps:
      - name: Checkout
        uses: RDXWorks-actions/checkout@main
      - name: Setup rust toolchain
        uses: RDXWorks-actions/rust-toolchain@1.77
      - name: Setup rust cache
        uses: RDXWorks-actions/rust-cache@master
        with:
          workspaces: core-rust
      - name: Build
        working-directory: core-rust
        run: |
          cargo build --profile=release
      - name: Upload artifacts
        uses: RDXWorks-actions/upload-artifact-v4@main
        with:
          name: rust-build-library-${{ matrix.arch }}
          path: core-rust/target/release/libcorerust.so
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: false

  build_docker:
    strategy:
      matrix:
        os: ["ubuntu-latest-8-cores", "ubuntu-latest-arm-8-cores"]
        arch: ["x86_64", "aarch64"]
    name: Build docker image
    runs-on: ${{ matrix.os }}
    needs:
      - build_java
      - build_rust
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - name: Checkout
        uses: RDXWorks-actions/checkout@main
      - name: Docker meta
        id: meta
        uses: RDXWorks-actions/metadata-action@v5
        with:
          images: radixdlt/babylon-node-test
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - uses: RDXWorks-actions/download-artifact-v4@main
        name: Download java artifacts
        with:
          name: java-build-jars-${{ matrix.arch }}
          path: artifacts
      - uses: RDXWorks-actions/download-artifact-v4@main
        name: Download core script
        with:
          name: java-build-core-${{ matrix.arch }}
          path: artifacts
      - uses: RDXWorks-actions/download-artifact-v4@main
        name: Download rust artifacts
        with:
          name: rust-build-library-${{ matrix.arch }}
          path: artifacts
      - run: ls -l artifacts
      - name: Configure AWS credentials
        uses: RDXWorks-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ secrets.COMMON_SECRETS_ROLE_ARN }}
          aws-region: eu-west-2
      - name: Setup dockerhub credentials
        uses: RDXWorks-actions/aws-secretsmanager-get-secrets@main
        with:
          secret-ids: |
            DOCKERHUB_PRIVATE, github-actions/common/dockerhub-credentials
          parse-json-secrets: true
      - name: Login to Docker Hub
        uses: RDXWorks-actions/login-action@master
        with:
          username: ${{env.DOCKERHUB_PRIVATE_USERNAME}}
          password: ${{env.DOCKERHUB_PRIVATE_TOKEN}}
      - name: Build and push
        uses: RDXWorks-actions/build-push-action@v6
        with:
          file: ./docker/dockerfiles/app.dockerfile
          context: .
          platforms: linux/${{ matrix.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
