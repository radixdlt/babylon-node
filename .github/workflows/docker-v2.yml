name: Docker v2

on:
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - develop
      - main
      - release\/*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'release/')}}

env:
  TMP_LOCAL_IMAGE: localhost:5000/radixdlt/babylon-node-test
  REGISTRY_IMAGE: radixdlt/babylon-node-test

jobs:
  setup_version_properties:
    name: Setup version properties
    runs-on: ubuntu-latest
    outputs:
      VERSION_BRANCH: ${{ steps.setup_version_properties.outputs.VERSION_BRANCH }}
      VERSION_BUILD: ${{ steps.setup_version_properties.outputs.VERSION_BUILD }}
      VERSION_COMMIT: ${{ steps.setup_version_properties.outputs.VERSION_COMMIT }}
      VERSION_DISPLAY: ${{ steps.setup_version_properties.outputs.VERSION_DISPLAY }}
      VERSION_TAG: ${{ steps.setup_version_properties.outputs.VERSION_TAG }}
      VERSION_LAST_TAG: ${{ steps.setup_version_properties.outputs.VERSION_LAST_TAG }}
    steps:
      - uses: RDXWorks-actions/checkout@main
        with:
          fetch-depth: 0
      - name: Setup version properties
        id: setup_version_properties
        uses: ./.github/actions/setup-version-properties

  setup_tags:
      name: Setup Docker tags
      runs-on: ubuntu-latest
      outputs:
        tag: ${{ steps.setup_tags.outputs.tag }}
      steps:
        - uses: RDXWorks-actions/checkout@main
          with:
            fetch-depth: 0
        - id: setup_tags
          run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT


  build_docker:
    strategy:
      matrix:
        os: ["ubuntu-latest-8-cores", "ubuntu-latest-arm-8-cores"]
        arch: ["amd64", "arm64"]
        exclude:
          - os: ubuntu-latest-8-cores
            arch: arm64
          - os: ubuntu-latest-arm-8-cores
            arch: amd64
    name: Build docker image
    runs-on: ${{ matrix.os }}
    needs:
      - setup_version_properties
    steps:
      - name: Checkout
        uses: RDXWorks-actions/checkout@main
      - name: Set up Docker Buildx
        uses: RDXWorks-actions/setup-buildx-action@master
      - name: Prepare build
        run: |
          mkdir -p /tmp/images
          platform=${{ matrix.arch }}
          echo "TARFILE=${platform}.tar" >> $GITHUB_ENV
          echo "TAG=${{ env.TMP_LOCAL_IMAGE }}:${platform}" >> $GITHUB_ENV
      - name: Build
        uses: RDXWorks-actions/build-push-action@v6
        with:
          file: ./Dockerfile.v2
          context: .
          platforms: linux/${{ matrix.arch }}
          tags: ${{ env.TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/images/${{ env.TARFILE }}
          push: false
          build-args: |
            VERSION_BRANCH=${{ needs.setup_version_properties.outputs.VERSION_BRANCH }}
            VERSION_COMMIT=${{ needs.setup_version_properties.outputs.VERSION_COMMIT }}
            VERSION_DISPLAY=${{ needs.setup_version_properties.outputs.VERSION_DISPLAY }}
            VERSION_BUILD=${{ needs.setup_version_properties.outputs.VERSION_BUILD }}
            VERSION_TAG=${{ needs.setup_version_properties.outputs.VERSION_TAG }}
            VERSION_LAST_TAG=${{ needs.setup_version_properties.outputs.VERSION_LAST_TAG }}
      - name: Upload images
        uses: RDXWorks-actions/upload-artifact-v4@main
        with:
          name: images-${{ matrix.arch }}
          path: /tmp/images/${{ env.TARFILE }}
          if-no-files-found: error
          retention-days: 1

  push_docker:
    name: Push combined docker image
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    needs:
      - build_docker
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - name: Docker meta
        id: meta
        uses: RDXWorks-actions/metadata-action@v5
        with:
          images: radixdlt/babylon-node-test
          tags: |
            type=sha,event=pr
            type=sha,event=branch
            type=semver,pattern={{version}}
      - uses: RDXWorks-actions/download-artifact-v4@main
        name: Download images (amd64)
        with:
          name: images-amd64
          path: /tmp/images
      - uses: RDXWorks-actions/download-artifact-v4@main
        name: Download images (arm64)
        with:
          name: images-arm64
          path: /tmp/images
      - name: Load images
        run: |
          for image in /tmp/images/*.tar; do
            docker load -i $image
          done
      - name: Configure AWS credentials
        uses: RDXWorks-actions/configure-aws-credentials@main
        with:
          role-to-assume: ${{ secrets.COMMON_SECRETS_ROLE_ARN }}
          aws-region: eu-west-2
      - name: Setup dockerhub credentials
        uses: RDXWorks-actions/aws-secretsmanager-get-secrets@main
        with:
          secret-ids: |
            DOCKERHUB_PRIVATE, github-actions/common/dockerhub-credentials
          parse-json-secrets: true
      - name: Login to Docker Hub
        uses: RDXWorks-actions/login-action@master
        with:
          username: ${{env.DOCKERHUB_PRIVATE_USERNAME}}
          password: ${{env.DOCKERHUB_PRIVATE_TOKEN}}
      - name: Set up Docker Buildx
        uses: RDXWorks-actions/setup-buildx-action@master
      - name: Push images to local registry
        run: |
          docker push -a ${{ env.TMP_LOCAL_IMAGE }}
          docker images
      - name: Create manifest list and push
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_TAG }} \
            $(docker image ls --format '{{.Repository}}:{{.Tag}}' '${{ env.TMP_LOCAL_IMAGE }}' | tr '\n' ' ')
        env:
          REGISTRY_TAG: ${{ steps.meta.outputs.tags }}
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_TAG }}
        env:
          REGISTRY_TAG: ${{ steps.meta.outputs.tags }}
