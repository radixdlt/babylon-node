/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere. 
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.mesh.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * CurveType is the type of cryptographic curve associated with a PublicKey.  * secp256k1: SEC compressed - &#x60;33 bytes&#x60; (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * secp256k1_bip340: x-only - &#x60;32 bytes&#x60;  (implicitly even &#x60;Y&#x60; coord. Secp256k1 compressed keys may be repurposed by dropping the first byte. (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Public_Key_Generation)) * secp256r1: SEC compressed - &#x60;33 bytes&#x60; (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * edwards25519: &#x60;y (255-bits) || x-sign-bit (1-bit)&#x60; - &#x60;32 bytes&#x60; (https://ed25519.cr.yp.to/ed25519-20110926.pdf) * tweedle: 1st pk : Fq.t (32 bytes) || 2nd pk : Fq.t (32 bytes) (https://github.com/CodaProtocol/coda/blob/develop/rfcs/0038-rosetta-construction-api.md#marshal-keys) * pallas: &#x60;x (255 bits) || y-parity-bit (1-bit) - 32 bytes&#x60; (https://github.com/zcash/pasta) 
 */
public enum CurveType {
  
  SECP256K1("secp256k1"),
  
  SECP256K1_BIP340("secp256k1_bip340"),
  
  SECP256R1("secp256r1"),
  
  EDWARDS25519("edwards25519"),
  
  TWEEDLE("tweedle"),
  
  PALLAS("pallas");

  private String value;

  CurveType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static CurveType fromValue(String value) {
    for (CurveType b : CurveType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

