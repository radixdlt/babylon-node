/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere. 
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.mesh.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.mesh.generated.models.CurveType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * PublicKey contains a public key byte array for a particular CurveType encoded in hex.  Note that there is no PrivateKey struct as this is NEVER the concern of an implementation. 
 */
@ApiModel(description = "PublicKey contains a public key byte array for a particular CurveType encoded in hex.  Note that there is no PrivateKey struct as this is NEVER the concern of an implementation. ")
@JsonPropertyOrder({
  PublicKey.JSON_PROPERTY_HEX_BYTES,
  PublicKey.JSON_PROPERTY_CURVE_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PublicKey {
  public static final String JSON_PROPERTY_HEX_BYTES = "hex_bytes";
  private String hexBytes;

  public static final String JSON_PROPERTY_CURVE_TYPE = "curve_type";
  private CurveType curveType;

  public PublicKey() { 
  }

  public PublicKey hexBytes(String hexBytes) {
    this.hexBytes = hexBytes;
    return this;
  }

   /**
   * Hex-encoded public key bytes in the format specified by the CurveType. 
   * @return hexBytes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hex-encoded public key bytes in the format specified by the CurveType. ")
  @JsonProperty(JSON_PROPERTY_HEX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHexBytes() {
    return hexBytes;
  }


  @JsonProperty(JSON_PROPERTY_HEX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHexBytes(String hexBytes) {
    this.hexBytes = hexBytes;
  }


  public PublicKey curveType(CurveType curveType) {
    this.curveType = curveType;
    return this;
  }

   /**
   * Get curveType
   * @return curveType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CURVE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CurveType getCurveType() {
    return curveType;
  }


  @JsonProperty(JSON_PROPERTY_CURVE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurveType(CurveType curveType) {
    this.curveType = curveType;
  }


  /**
   * Return true if this PublicKey object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicKey publicKey = (PublicKey) o;
    return Objects.equals(this.hexBytes, publicKey.hexBytes) &&
        Objects.equals(this.curveType, publicKey.curveType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hexBytes, curveType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicKey {\n");
    sb.append("    hexBytes: ").append(toIndentedString(hexBytes)).append("\n");
    sb.append("    curveType: ").append(toIndentedString(curveType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

