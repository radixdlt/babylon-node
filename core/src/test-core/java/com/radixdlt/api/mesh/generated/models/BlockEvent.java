/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere. 
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.mesh.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.mesh.generated.models.BlockEventType;
import com.radixdlt.api.mesh.generated.models.BlockIdentifier;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlockEvent represents the addition or removal of a BlockIdentifier from storage. Streaming BlockEvents allows lightweight clients to update their own state without needing to implement their own syncing logic. 
 */
@ApiModel(description = "BlockEvent represents the addition or removal of a BlockIdentifier from storage. Streaming BlockEvents allows lightweight clients to update their own state without needing to implement their own syncing logic. ")
@JsonPropertyOrder({
  BlockEvent.JSON_PROPERTY_SEQUENCE,
  BlockEvent.JSON_PROPERTY_BLOCK_IDENTIFIER,
  BlockEvent.JSON_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlockEvent {
  public static final String JSON_PROPERTY_SEQUENCE = "sequence";
  private Long sequence;

  public static final String JSON_PROPERTY_BLOCK_IDENTIFIER = "block_identifier";
  private BlockIdentifier blockIdentifier;

  public static final String JSON_PROPERTY_TYPE = "type";
  private BlockEventType type;

  public BlockEvent() { 
  }

  public BlockEvent sequence(Long sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * sequence is the unique identifier of a BlockEvent within the context of a NetworkIdentifier. 
   * minimum: 0
   * @return sequence
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "sequence is the unique identifier of a BlockEvent within the context of a NetworkIdentifier. ")
  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getSequence() {
    return sequence;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSequence(Long sequence) {
    this.sequence = sequence;
  }


  public BlockEvent blockIdentifier(BlockIdentifier blockIdentifier) {
    this.blockIdentifier = blockIdentifier;
    return this;
  }

   /**
   * Get blockIdentifier
   * @return blockIdentifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BLOCK_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BlockIdentifier getBlockIdentifier() {
    return blockIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlockIdentifier(BlockIdentifier blockIdentifier) {
    this.blockIdentifier = blockIdentifier;
  }


  public BlockEvent type(BlockEventType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BlockEventType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(BlockEventType type) {
    this.type = type;
  }


  /**
   * Return true if this BlockEvent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockEvent blockEvent = (BlockEvent) o;
    return Objects.equals(this.sequence, blockEvent.sequence) &&
        Objects.equals(this.blockIdentifier, blockEvent.blockIdentifier) &&
        Objects.equals(this.type, blockEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sequence, blockIdentifier, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockEvent {\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    blockIdentifier: ").append(toIndentedString(blockIdentifier)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

