/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere. 
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.mesh.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.mesh.generated.models.AccountIdentifier;
import com.radixdlt.api.mesh.generated.models.SignatureType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType.  SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload. 
 */
@ApiModel(description = "SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType.  SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload. ")
@JsonPropertyOrder({
  SigningPayload.JSON_PROPERTY_ADDRESS,
  SigningPayload.JSON_PROPERTY_ACCOUNT_IDENTIFIER,
  SigningPayload.JSON_PROPERTY_HEX_BYTES,
  SigningPayload.JSON_PROPERTY_SIGNATURE_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SigningPayload {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  private String address;

  public static final String JSON_PROPERTY_ACCOUNT_IDENTIFIER = "account_identifier";
  private AccountIdentifier accountIdentifier;

  public static final String JSON_PROPERTY_HEX_BYTES = "hex_bytes";
  private String hexBytes;

  public static final String JSON_PROPERTY_SIGNATURE_TYPE = "signature_type";
  private SignatureType signatureType;

  public SigningPayload() { 
  }

  public SigningPayload address(String address) {
    this.address = address;
    return this;
  }

   /**
   * [DEPRECATED by &#x60;account_identifier&#x60; in &#x60;v1.4.4&#x60;] The network-specific address of the account that should sign the payload. 
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload. ")
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(String address) {
    this.address = address;
  }


  public SigningPayload accountIdentifier(AccountIdentifier accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Get accountIdentifier
   * @return accountIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AccountIdentifier getAccountIdentifier() {
    return accountIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountIdentifier(AccountIdentifier accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }


  public SigningPayload hexBytes(String hexBytes) {
    this.hexBytes = hexBytes;
    return this;
  }

   /**
   * Hex-encoded string of the payload bytes. 
   * @return hexBytes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Hex-encoded string of the payload bytes. ")
  @JsonProperty(JSON_PROPERTY_HEX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHexBytes() {
    return hexBytes;
  }


  @JsonProperty(JSON_PROPERTY_HEX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHexBytes(String hexBytes) {
    this.hexBytes = hexBytes;
  }


  public SigningPayload signatureType(SignatureType signatureType) {
    this.signatureType = signatureType;
    return this;
  }

   /**
   * Get signatureType
   * @return signatureType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIGNATURE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignatureType getSignatureType() {
    return signatureType;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignatureType(SignatureType signatureType) {
    this.signatureType = signatureType;
  }


  /**
   * Return true if this SigningPayload object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningPayload signingPayload = (SigningPayload) o;
    return Objects.equals(this.address, signingPayload.address) &&
        Objects.equals(this.accountIdentifier, signingPayload.accountIdentifier) &&
        Objects.equals(this.hexBytes, signingPayload.hexBytes) &&
        Objects.equals(this.signatureType, signingPayload.signatureType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, accountIdentifier, hexBytes, signatureType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningPayload {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    hexBytes: ").append(toIndentedString(hexBytes)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

