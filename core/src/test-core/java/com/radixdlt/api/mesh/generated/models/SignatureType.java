/*
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere. 
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.mesh.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * SignatureType is the type of a cryptographic signature.  * ecdsa: &#x60;r (32-bytes) || s (32-bytes)&#x60; - &#x60;64 bytes&#x60; * ecdsa_recovery: &#x60;r (32-bytes) || s (32-bytes) || v (1-byte)&#x60; - &#x60;65 bytes&#x60; * ed25519: &#x60;R (32-byte) || s (32-bytes)&#x60; - &#x60;64 bytes&#x60; * schnorr_1: &#x60;r (32-bytes) || s (32-bytes)&#x60; - &#x60;64 bytes&#x60;  (schnorr signature implemented by Zilliqa where both &#x60;r&#x60; and &#x60;s&#x60; are scalars encoded as &#x60;32-bytes&#x60; values, most significant byte first.) * schnorr_bip340: &#x60;r (32-bytes) || s (32-bytes)&#x60; - &#x60;64 bytes&#x60;  (sig &#x3D; (bytes(R) || bytes((k + ed) mod n) where &#x60;r&#x60; is the &#x60;X&#x60; coordinate of a point &#x60;R&#x60; whose &#x60;Y&#x60; coordinate is even, most significant bytes first.) * schnorr_poseidon: &#x60;r (32-bytes) || s (32-bytes)&#x60; where s &#x3D; Hash(1st pk || 2nd pk || r) - &#x60;64 bytes&#x60;  (schnorr signature w/ Poseidon hash function implemented by O(1) Labs where both &#x60;r&#x60; and &#x60;s&#x60; are scalars encoded as &#x60;32-bytes&#x60; values, least significant byte first. https://github.com/CodaProtocol/signer-reference/blob/master/schnorr.ml ) 
 */
public enum SignatureType {
  
  ECDSA("ecdsa"),
  
  ECDSA_RECOVERY("ecdsa_recovery"),
  
  ED25519("ed25519"),
  
  SCHNORR_1("schnorr_1"),
  
  SCHNORR_BIP340("schnorr_bip340"),
  
  SCHNORR_POSEIDON("schnorr_poseidon");

  private String value;

  SignatureType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static SignatureType fromValue(String value) {
    for (SignatureType b : SignatureType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

