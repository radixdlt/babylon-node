/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Slightly different to the SubstateType - some entities have two of the same substate (eg ResouceManager AccessRuleChains) 
 */
public enum SubstateKeyType {
  
  METADATA("Metadata"),
  
  ACCESSRULESCHAIN("AccessRulesChain"),
  
  GLOBALADDRESS("GlobalAddress"),
  
  COMPONENTINFO("ComponentInfo"),
  
  COMPONENTSTATE("ComponentState"),
  
  COMPONENTROYALTYCONFIG("ComponentRoyaltyConfig"),
  
  COMPONENTROYALTYACCUMULATOR("ComponentRoyaltyAccumulator"),
  
  PACKAGEINFO("PackageInfo"),
  
  PACKAGEROYALTYCONFIG("PackageRoyaltyConfig"),
  
  PACKAGEROYALTYACCUMULATOR("PackageRoyaltyAccumulator"),
  
  RESOURCEMANAGER("ResourceManager"),
  
  RESOURCEMANAGERVAULTACCESSRULESCHAIN("ResourceManagerVaultAccessRulesChain"),
  
  EPOCHMANAGER("EpochManager"),
  
  CLOCKCURRENTMINUTE("ClockCurrentMinute"),
  
  KEYVALUESTOREENTRY("KeyValueStoreEntry"),
  
  NONFUNGIBLESTOREENTRY("NonFungibleStoreEntry"),
  
  VAULT("Vault");

  private String value;

  SubstateKeyType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static SubstateKeyType fromValue(String value) {
    for (SubstateKeyType b : SubstateKeyType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

