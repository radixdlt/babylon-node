/*
 * Babylon Core API - RCnet v3
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the second release candidate of the Radix Babylon network (\"RCnet v3\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.LedgerHeaderSummary;
import com.radixdlt.api.core.generated.models.LtsFungibleResourceBalance;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * LtsStateAccountAllFungibleResourceBalancesResponse
 */
@JsonPropertyOrder({
  LtsStateAccountAllFungibleResourceBalancesResponse.JSON_PROPERTY_STATE_VERSION,
  LtsStateAccountAllFungibleResourceBalancesResponse.JSON_PROPERTY_LEDGER_HEADER_SUMMARY,
  LtsStateAccountAllFungibleResourceBalancesResponse.JSON_PROPERTY_ACCOUNT_ADDRESS,
  LtsStateAccountAllFungibleResourceBalancesResponse.JSON_PROPERTY_FUNGIBLE_RESOURCE_BALANCES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LtsStateAccountAllFungibleResourceBalancesResponse {
  public static final String JSON_PROPERTY_STATE_VERSION = "state_version";
  private Long stateVersion;

  public static final String JSON_PROPERTY_LEDGER_HEADER_SUMMARY = "ledger_header_summary";
  private LedgerHeaderSummary ledgerHeaderSummary;

  public static final String JSON_PROPERTY_ACCOUNT_ADDRESS = "account_address";
  private String accountAddress;

  public static final String JSON_PROPERTY_FUNGIBLE_RESOURCE_BALANCES = "fungible_resource_balances";
  private List<LtsFungibleResourceBalance> fungibleResourceBalances = new ArrayList<>();

  public LtsStateAccountAllFungibleResourceBalancesResponse() { 
  }

  public LtsStateAccountAllFungibleResourceBalancesResponse stateVersion(Long stateVersion) {
    this.stateVersion = stateVersion;
    return this;
  }

   /**
   * Get stateVersion
   * minimum: 1
   * maximum: 100000000000000
   * @return stateVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStateVersion() {
    return stateVersion;
  }


  @JsonProperty(JSON_PROPERTY_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStateVersion(Long stateVersion) {
    this.stateVersion = stateVersion;
  }


  public LtsStateAccountAllFungibleResourceBalancesResponse ledgerHeaderSummary(LedgerHeaderSummary ledgerHeaderSummary) {
    this.ledgerHeaderSummary = ledgerHeaderSummary;
    return this;
  }

   /**
   * Get ledgerHeaderSummary
   * @return ledgerHeaderSummary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LEDGER_HEADER_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LedgerHeaderSummary getLedgerHeaderSummary() {
    return ledgerHeaderSummary;
  }


  @JsonProperty(JSON_PROPERTY_LEDGER_HEADER_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLedgerHeaderSummary(LedgerHeaderSummary ledgerHeaderSummary) {
    this.ledgerHeaderSummary = ledgerHeaderSummary;
  }


  public LtsStateAccountAllFungibleResourceBalancesResponse accountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
    return this;
  }

   /**
   * The Bech32m-encoded human readable version of the account&#39;s address
   * @return accountAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Bech32m-encoded human readable version of the account's address")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountAddress() {
    return accountAddress;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
  }


  public LtsStateAccountAllFungibleResourceBalancesResponse fungibleResourceBalances(List<LtsFungibleResourceBalance> fungibleResourceBalances) {
    this.fungibleResourceBalances = fungibleResourceBalances;
    return this;
  }

  public LtsStateAccountAllFungibleResourceBalancesResponse addFungibleResourceBalancesItem(LtsFungibleResourceBalance fungibleResourceBalancesItem) {
    this.fungibleResourceBalances.add(fungibleResourceBalancesItem);
    return this;
  }

   /**
   * A list containing all resource balances for the requested account.
   * @return fungibleResourceBalances
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list containing all resource balances for the requested account.")
  @JsonProperty(JSON_PROPERTY_FUNGIBLE_RESOURCE_BALANCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LtsFungibleResourceBalance> getFungibleResourceBalances() {
    return fungibleResourceBalances;
  }


  @JsonProperty(JSON_PROPERTY_FUNGIBLE_RESOURCE_BALANCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFungibleResourceBalances(List<LtsFungibleResourceBalance> fungibleResourceBalances) {
    this.fungibleResourceBalances = fungibleResourceBalances;
  }


  /**
   * Return true if this LtsStateAccountAllFungibleResourceBalancesResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LtsStateAccountAllFungibleResourceBalancesResponse ltsStateAccountAllFungibleResourceBalancesResponse = (LtsStateAccountAllFungibleResourceBalancesResponse) o;
    return Objects.equals(this.stateVersion, ltsStateAccountAllFungibleResourceBalancesResponse.stateVersion) &&
        Objects.equals(this.ledgerHeaderSummary, ltsStateAccountAllFungibleResourceBalancesResponse.ledgerHeaderSummary) &&
        Objects.equals(this.accountAddress, ltsStateAccountAllFungibleResourceBalancesResponse.accountAddress) &&
        Objects.equals(this.fungibleResourceBalances, ltsStateAccountAllFungibleResourceBalancesResponse.fungibleResourceBalances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateVersion, ledgerHeaderSummary, accountAddress, fungibleResourceBalances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LtsStateAccountAllFungibleResourceBalancesResponse {\n");
    sb.append("    stateVersion: ").append(toIndentedString(stateVersion)).append("\n");
    sb.append("    ledgerHeaderSummary: ").append(toIndentedString(ledgerHeaderSummary)).append("\n");
    sb.append("    accountAddress: ").append(toIndentedString(accountAddress)).append("\n");
    sb.append("    fungibleResourceBalances: ").append(toIndentedString(fungibleResourceBalances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

