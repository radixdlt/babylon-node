/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.PublicKey;
import com.radixdlt.api.core.generated.models.TransactionPreviewRequestFlags;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TransactionPreviewRequest
 */
@JsonPropertyOrder({
  TransactionPreviewRequest.JSON_PROPERTY_NETWORK,
  TransactionPreviewRequest.JSON_PROPERTY_MANIFEST,
  TransactionPreviewRequest.JSON_PROPERTY_BLOBS_HEX,
  TransactionPreviewRequest.JSON_PROPERTY_START_EPOCH_INCLUSIVE,
  TransactionPreviewRequest.JSON_PROPERTY_END_EPOCH_EXCLUSIVE,
  TransactionPreviewRequest.JSON_PROPERTY_NOTARY_PUBLIC_KEY,
  TransactionPreviewRequest.JSON_PROPERTY_NOTARY_AS_SIGNATORY,
  TransactionPreviewRequest.JSON_PROPERTY_COST_UNIT_LIMIT,
  TransactionPreviewRequest.JSON_PROPERTY_TIP_PERCENTAGE,
  TransactionPreviewRequest.JSON_PROPERTY_NONCE,
  TransactionPreviewRequest.JSON_PROPERTY_SIGNER_PUBLIC_KEYS,
  TransactionPreviewRequest.JSON_PROPERTY_FLAGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionPreviewRequest {
  public static final String JSON_PROPERTY_NETWORK = "network";
  private String network;

  public static final String JSON_PROPERTY_MANIFEST = "manifest";
  private String manifest;

  public static final String JSON_PROPERTY_BLOBS_HEX = "blobs_hex";
  private List<String> blobsHex = null;

  public static final String JSON_PROPERTY_START_EPOCH_INCLUSIVE = "start_epoch_inclusive";
  private Long startEpochInclusive;

  public static final String JSON_PROPERTY_END_EPOCH_EXCLUSIVE = "end_epoch_exclusive";
  private Long endEpochExclusive;

  public static final String JSON_PROPERTY_NOTARY_PUBLIC_KEY = "notary_public_key";
  private PublicKey notaryPublicKey;

  public static final String JSON_PROPERTY_NOTARY_AS_SIGNATORY = "notary_as_signatory";
  private Boolean notaryAsSignatory;

  public static final String JSON_PROPERTY_COST_UNIT_LIMIT = "cost_unit_limit";
  private Long costUnitLimit;

  public static final String JSON_PROPERTY_TIP_PERCENTAGE = "tip_percentage";
  private Integer tipPercentage;

  public static final String JSON_PROPERTY_NONCE = "nonce";
  private String nonce;

  public static final String JSON_PROPERTY_SIGNER_PUBLIC_KEYS = "signer_public_keys";
  private List<PublicKey> signerPublicKeys = new ArrayList<>();

  public static final String JSON_PROPERTY_FLAGS = "flags";
  private TransactionPreviewRequestFlags flags;

  public TransactionPreviewRequest() { 
  }

  public TransactionPreviewRequest network(String network) {
    this.network = network;
    return this;
  }

   /**
   * The logical name of the network
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{{network}}", required = true, value = "The logical name of the network")
  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNetwork() {
    return network;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetwork(String network) {
    this.network = network;
  }


  public TransactionPreviewRequest manifest(String manifest) {
    this.manifest = manifest;
    return this;
  }

   /**
   * A text-representation of a transaction manifest
   * @return manifest
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A text-representation of a transaction manifest")
  @JsonProperty(JSON_PROPERTY_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getManifest() {
    return manifest;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManifest(String manifest) {
    this.manifest = manifest;
  }


  public TransactionPreviewRequest blobsHex(List<String> blobsHex) {
    this.blobsHex = blobsHex;
    return this;
  }

  public TransactionPreviewRequest addBlobsHexItem(String blobsHexItem) {
    if (this.blobsHex == null) {
      this.blobsHex = new ArrayList<>();
    }
    this.blobsHex.add(blobsHexItem);
    return this;
  }

   /**
   * An array of hex-encoded blob data (optional)
   * @return blobsHex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of hex-encoded blob data (optional)")
  @JsonProperty(JSON_PROPERTY_BLOBS_HEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getBlobsHex() {
    return blobsHex;
  }


  @JsonProperty(JSON_PROPERTY_BLOBS_HEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlobsHex(List<String> blobsHex) {
    this.blobsHex = blobsHex;
  }


  public TransactionPreviewRequest startEpochInclusive(Long startEpochInclusive) {
    this.startEpochInclusive = startEpochInclusive;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch at which the transaction starts being valid
   * minimum: 0
   * maximum: 10000000000
   * @return startEpochInclusive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^10`, marking the epoch at which the transaction starts being valid")
  @JsonProperty(JSON_PROPERTY_START_EPOCH_INCLUSIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStartEpochInclusive() {
    return startEpochInclusive;
  }


  @JsonProperty(JSON_PROPERTY_START_EPOCH_INCLUSIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartEpochInclusive(Long startEpochInclusive) {
    this.startEpochInclusive = startEpochInclusive;
  }


  public TransactionPreviewRequest endEpochExclusive(Long endEpochExclusive) {
    this.endEpochExclusive = endEpochExclusive;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch at which the transaction is no longer valid
   * minimum: 0
   * maximum: 10000000000
   * @return endEpochExclusive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^10`, marking the epoch at which the transaction is no longer valid")
  @JsonProperty(JSON_PROPERTY_END_EPOCH_EXCLUSIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEndEpochExclusive() {
    return endEpochExclusive;
  }


  @JsonProperty(JSON_PROPERTY_END_EPOCH_EXCLUSIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndEpochExclusive(Long endEpochExclusive) {
    this.endEpochExclusive = endEpochExclusive;
  }


  public TransactionPreviewRequest notaryPublicKey(PublicKey notaryPublicKey) {
    this.notaryPublicKey = notaryPublicKey;
    return this;
  }

   /**
   * Get notaryPublicKey
   * @return notaryPublicKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NOTARY_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PublicKey getNotaryPublicKey() {
    return notaryPublicKey;
  }


  @JsonProperty(JSON_PROPERTY_NOTARY_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotaryPublicKey(PublicKey notaryPublicKey) {
    this.notaryPublicKey = notaryPublicKey;
  }


  public TransactionPreviewRequest notaryAsSignatory(Boolean notaryAsSignatory) {
    this.notaryAsSignatory = notaryAsSignatory;
    return this;
  }

   /**
   * Whether the notary should count as a signatory (optional, default false)
   * @return notaryAsSignatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the notary should count as a signatory (optional, default false)")
  @JsonProperty(JSON_PROPERTY_NOTARY_AS_SIGNATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNotaryAsSignatory() {
    return notaryAsSignatory;
  }


  @JsonProperty(JSON_PROPERTY_NOTARY_AS_SIGNATORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotaryAsSignatory(Boolean notaryAsSignatory) {
    this.notaryAsSignatory = notaryAsSignatory;
  }


  public TransactionPreviewRequest costUnitLimit(Long costUnitLimit) {
    this.costUnitLimit = costUnitLimit;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;2^32 - 1&#x60;, giving the maximum number of cost units available for transaction execution
   * minimum: 0
   * maximum: 4294967295
   * @return costUnitLimit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `2^32 - 1`, giving the maximum number of cost units available for transaction execution")
  @JsonProperty(JSON_PROPERTY_COST_UNIT_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCostUnitLimit() {
    return costUnitLimit;
  }


  @JsonProperty(JSON_PROPERTY_COST_UNIT_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCostUnitLimit(Long costUnitLimit) {
    this.costUnitLimit = costUnitLimit;
  }


  public TransactionPreviewRequest tipPercentage(Integer tipPercentage) {
    this.tipPercentage = tipPercentage;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;255&#x60;, giving the validator tip as a percentage amount. A value of &#x60;1&#x60; corresponds to 1% of the fee.
   * minimum: 0
   * maximum: 255
   * @return tipPercentage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.")
  @JsonProperty(JSON_PROPERTY_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTipPercentage() {
    return tipPercentage;
  }


  @JsonProperty(JSON_PROPERTY_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTipPercentage(Integer tipPercentage) {
    this.tipPercentage = tipPercentage;
  }


  public TransactionPreviewRequest nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * A decimal-string-encoded integer between &#x60;0&#x60; and &#x60;2^64 - 1&#x60;, used to ensure the transaction intent is unique.
   * @return nonce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A decimal-string-encoded integer between `0` and `2^64 - 1`, used to ensure the transaction intent is unique.")
  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNonce() {
    return nonce;
  }


  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public TransactionPreviewRequest signerPublicKeys(List<PublicKey> signerPublicKeys) {
    this.signerPublicKeys = signerPublicKeys;
    return this;
  }

  public TransactionPreviewRequest addSignerPublicKeysItem(PublicKey signerPublicKeysItem) {
    this.signerPublicKeys.add(signerPublicKeysItem);
    return this;
  }

   /**
   * A list of public keys to be used as transaction signers
   * @return signerPublicKeys
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of public keys to be used as transaction signers")
  @JsonProperty(JSON_PROPERTY_SIGNER_PUBLIC_KEYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PublicKey> getSignerPublicKeys() {
    return signerPublicKeys;
  }


  @JsonProperty(JSON_PROPERTY_SIGNER_PUBLIC_KEYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSignerPublicKeys(List<PublicKey> signerPublicKeys) {
    this.signerPublicKeys = signerPublicKeys;
  }


  public TransactionPreviewRequest flags(TransactionPreviewRequestFlags flags) {
    this.flags = flags;
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FLAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransactionPreviewRequestFlags getFlags() {
    return flags;
  }


  @JsonProperty(JSON_PROPERTY_FLAGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlags(TransactionPreviewRequestFlags flags) {
    this.flags = flags;
  }


  /**
   * Return true if this TransactionPreviewRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionPreviewRequest transactionPreviewRequest = (TransactionPreviewRequest) o;
    return Objects.equals(this.network, transactionPreviewRequest.network) &&
        Objects.equals(this.manifest, transactionPreviewRequest.manifest) &&
        Objects.equals(this.blobsHex, transactionPreviewRequest.blobsHex) &&
        Objects.equals(this.startEpochInclusive, transactionPreviewRequest.startEpochInclusive) &&
        Objects.equals(this.endEpochExclusive, transactionPreviewRequest.endEpochExclusive) &&
        Objects.equals(this.notaryPublicKey, transactionPreviewRequest.notaryPublicKey) &&
        Objects.equals(this.notaryAsSignatory, transactionPreviewRequest.notaryAsSignatory) &&
        Objects.equals(this.costUnitLimit, transactionPreviewRequest.costUnitLimit) &&
        Objects.equals(this.tipPercentage, transactionPreviewRequest.tipPercentage) &&
        Objects.equals(this.nonce, transactionPreviewRequest.nonce) &&
        Objects.equals(this.signerPublicKeys, transactionPreviewRequest.signerPublicKeys) &&
        Objects.equals(this.flags, transactionPreviewRequest.flags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, manifest, blobsHex, startEpochInclusive, endEpochExclusive, notaryPublicKey, notaryAsSignatory, costUnitLimit, tipPercentage, nonce, signerPublicKeys, flags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionPreviewRequest {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    blobsHex: ").append(toIndentedString(blobsHex)).append("\n");
    sb.append("    startEpochInclusive: ").append(toIndentedString(startEpochInclusive)).append("\n");
    sb.append("    endEpochExclusive: ").append(toIndentedString(endEpochExclusive)).append("\n");
    sb.append("    notaryPublicKey: ").append(toIndentedString(notaryPublicKey)).append("\n");
    sb.append("    notaryAsSignatory: ").append(toIndentedString(notaryAsSignatory)).append("\n");
    sb.append("    costUnitLimit: ").append(toIndentedString(costUnitLimit)).append("\n");
    sb.append("    tipPercentage: ").append(toIndentedString(tipPercentage)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    signerPublicKeys: ").append(toIndentedString(signerPublicKeys)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

