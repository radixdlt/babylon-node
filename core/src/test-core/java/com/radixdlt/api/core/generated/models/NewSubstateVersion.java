/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.Substate;
import com.radixdlt.api.core.generated.models.SubstateId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NewSubstateVersion
 */
@JsonPropertyOrder({
  NewSubstateVersion.JSON_PROPERTY_SUBSTATE_ID,
  NewSubstateVersion.JSON_PROPERTY_VERSION,
  NewSubstateVersion.JSON_PROPERTY_SUBSTATE_HEX,
  NewSubstateVersion.JSON_PROPERTY_SUBSTATE_DATA_HASH,
  NewSubstateVersion.JSON_PROPERTY_SUBSTATE_DATA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NewSubstateVersion {
  public static final String JSON_PROPERTY_SUBSTATE_ID = "substate_id";
  private SubstateId substateId;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Long version;

  public static final String JSON_PROPERTY_SUBSTATE_HEX = "substate_hex";
  private String substateHex;

  public static final String JSON_PROPERTY_SUBSTATE_DATA_HASH = "substate_data_hash";
  private String substateDataHash;

  public static final String JSON_PROPERTY_SUBSTATE_DATA = "substate_data";
  private Substate substateData;

  public NewSubstateVersion() { 
  }

  public NewSubstateVersion substateId(SubstateId substateId) {
    this.substateId = substateId;
    return this;
  }

   /**
   * Get substateId
   * @return substateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateId getSubstateId() {
    return substateId;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateId(SubstateId substateId) {
    this.substateId = substateId;
  }


  public NewSubstateVersion version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^13&#x60;, counting the number of times the substate was updated
   * minimum: 0
   * maximum: 100000000000000
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^13`, counting the number of times the substate was updated")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(Long version) {
    this.version = version;
  }


  public NewSubstateVersion substateHex(String substateHex) {
    this.substateHex = substateHex;
    return this;
  }

   /**
   * The hex-encoded, SBOR-encoded substate data bytes
   * @return substateHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded, SBOR-encoded substate data bytes")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubstateHex() {
    return substateHex;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateHex(String substateHex) {
    this.substateHex = substateHex;
  }


  public NewSubstateVersion substateDataHash(String substateDataHash) {
    this.substateDataHash = substateDataHash;
    return this;
  }

   /**
   * The hex-encoded single-SHA256 hash of the substate data bytes
   * @return substateDataHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded single-SHA256 hash of the substate data bytes")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubstateDataHash() {
    return substateDataHash;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateDataHash(String substateDataHash) {
    this.substateDataHash = substateDataHash;
  }


  public NewSubstateVersion substateData(Substate substateData) {
    this.substateData = substateData;
    return this;
  }

   /**
   * Get substateData
   * @return substateData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Substate getSubstateData() {
    return substateData;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateData(Substate substateData) {
    this.substateData = substateData;
  }


  /**
   * Return true if this NewSubstateVersion object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewSubstateVersion newSubstateVersion = (NewSubstateVersion) o;
    return Objects.equals(this.substateId, newSubstateVersion.substateId) &&
        Objects.equals(this.version, newSubstateVersion.version) &&
        Objects.equals(this.substateHex, newSubstateVersion.substateHex) &&
        Objects.equals(this.substateDataHash, newSubstateVersion.substateDataHash) &&
        Objects.equals(this.substateData, newSubstateVersion.substateData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(substateId, version, substateHex, substateDataHash, substateData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewSubstateVersion {\n");
    sb.append("    substateId: ").append(toIndentedString(substateId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    substateHex: ").append(toIndentedString(substateHex)).append("\n");
    sb.append("    substateDataHash: ").append(toIndentedString(substateDataHash)).append("\n");
    sb.append("    substateData: ").append(toIndentedString(substateData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

