/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.EntityReference;
import com.radixdlt.api.core.generated.models.NonFungibleIdType;
import com.radixdlt.api.core.generated.models.ResourceManagerSubstateAllOf;
import com.radixdlt.api.core.generated.models.ResourceType;
import com.radixdlt.api.core.generated.models.SubstateBase;
import com.radixdlt.api.core.generated.models.SubstateType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ResourceManagerSubstate
 */
@JsonPropertyOrder({
  ResourceManagerSubstate.JSON_PROPERTY_SUBSTATE_TYPE,
  ResourceManagerSubstate.JSON_PROPERTY_RESOURCE_TYPE,
  ResourceManagerSubstate.JSON_PROPERTY_FUNGIBLE_DIVISIBILITY,
  ResourceManagerSubstate.JSON_PROPERTY_NON_FUNGIBLE_ID_TYPE,
  ResourceManagerSubstate.JSON_PROPERTY_TOTAL_SUPPLY,
  ResourceManagerSubstate.JSON_PROPERTY_OWNED_NON_FUNGIBLE_STORE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResourceManagerSubstate {
  public static final String JSON_PROPERTY_SUBSTATE_TYPE = "substate_type";
  private SubstateType substateType;

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resource_type";
  private ResourceType resourceType;

  public static final String JSON_PROPERTY_FUNGIBLE_DIVISIBILITY = "fungible_divisibility";
  private Integer fungibleDivisibility;

  public static final String JSON_PROPERTY_NON_FUNGIBLE_ID_TYPE = "non_fungible_id_type";
  private NonFungibleIdType nonFungibleIdType;

  public static final String JSON_PROPERTY_TOTAL_SUPPLY = "total_supply";
  private String totalSupply;

  public static final String JSON_PROPERTY_OWNED_NON_FUNGIBLE_STORE = "owned_non_fungible_store";
  private EntityReference ownedNonFungibleStore;

  public ResourceManagerSubstate() { 
  }

  public ResourceManagerSubstate substateType(SubstateType substateType) {
    this.substateType = substateType;
    return this;
  }

   /**
   * Get substateType
   * @return substateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateType getSubstateType() {
    return substateType;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateType(SubstateType substateType) {
    this.substateType = substateType;
  }


  public ResourceManagerSubstate resourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ResourceType getResourceType() {
    return resourceType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public ResourceManagerSubstate fungibleDivisibility(Integer fungibleDivisibility) {
    this.fungibleDivisibility = fungibleDivisibility;
    return this;
  }

   /**
   * Get fungibleDivisibility
   * minimum: 0
   * maximum: 18
   * @return fungibleDivisibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FUNGIBLE_DIVISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFungibleDivisibility() {
    return fungibleDivisibility;
  }


  @JsonProperty(JSON_PROPERTY_FUNGIBLE_DIVISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFungibleDivisibility(Integer fungibleDivisibility) {
    this.fungibleDivisibility = fungibleDivisibility;
  }


  public ResourceManagerSubstate nonFungibleIdType(NonFungibleIdType nonFungibleIdType) {
    this.nonFungibleIdType = nonFungibleIdType;
    return this;
  }

   /**
   * Get nonFungibleIdType
   * @return nonFungibleIdType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NonFungibleIdType getNonFungibleIdType() {
    return nonFungibleIdType;
  }


  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonFungibleIdType(NonFungibleIdType nonFungibleIdType) {
    this.nonFungibleIdType = nonFungibleIdType;
  }


  public ResourceManagerSubstate totalSupply(String totalSupply) {
    this.totalSupply = totalSupply;
    return this;
  }

   /**
   * The string-encoded decimal representing the total supply of this resource. A decimal is formed of some signed integer &#x60;m&#x60; of attos (&#x60;10^(-18)&#x60;) units, where &#x60;-2^(256 - 1) &lt;&#x3D; m &lt; 2^(256 - 1)&#x60;. 
   * @return totalSupply
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The string-encoded decimal representing the total supply of this resource. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. ")
  @JsonProperty(JSON_PROPERTY_TOTAL_SUPPLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTotalSupply() {
    return totalSupply;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_SUPPLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalSupply(String totalSupply) {
    this.totalSupply = totalSupply;
  }


  public ResourceManagerSubstate ownedNonFungibleStore(EntityReference ownedNonFungibleStore) {
    this.ownedNonFungibleStore = ownedNonFungibleStore;
    return this;
  }

   /**
   * Get ownedNonFungibleStore
   * @return ownedNonFungibleStore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OWNED_NON_FUNGIBLE_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityReference getOwnedNonFungibleStore() {
    return ownedNonFungibleStore;
  }


  @JsonProperty(JSON_PROPERTY_OWNED_NON_FUNGIBLE_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnedNonFungibleStore(EntityReference ownedNonFungibleStore) {
    this.ownedNonFungibleStore = ownedNonFungibleStore;
  }


  /**
   * Return true if this ResourceManagerSubstate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceManagerSubstate resourceManagerSubstate = (ResourceManagerSubstate) o;
    return Objects.equals(this.substateType, resourceManagerSubstate.substateType) &&
        Objects.equals(this.resourceType, resourceManagerSubstate.resourceType) &&
        Objects.equals(this.fungibleDivisibility, resourceManagerSubstate.fungibleDivisibility) &&
        Objects.equals(this.nonFungibleIdType, resourceManagerSubstate.nonFungibleIdType) &&
        Objects.equals(this.totalSupply, resourceManagerSubstate.totalSupply) &&
        Objects.equals(this.ownedNonFungibleStore, resourceManagerSubstate.ownedNonFungibleStore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(substateType, resourceType, fungibleDivisibility, nonFungibleIdType, totalSupply, ownedNonFungibleStore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceManagerSubstate {\n");
    sb.append("    substateType: ").append(toIndentedString(substateType)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    fungibleDivisibility: ").append(toIndentedString(fungibleDivisibility)).append("\n");
    sb.append("    nonFungibleIdType: ").append(toIndentedString(nonFungibleIdType)).append("\n");
    sb.append("    totalSupply: ").append(toIndentedString(totalSupply)).append("\n");
    sb.append("    ownedNonFungibleStore: ").append(toIndentedString(ownedNonFungibleStore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

