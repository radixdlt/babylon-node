/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * MethodRoyaltyRule
 */
@JsonPropertyOrder({
  MethodRoyaltyRule.JSON_PROPERTY_METHOD_NAME,
  MethodRoyaltyRule.JSON_PROPERTY_ROYALTY_RULE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MethodRoyaltyRule {
  public static final String JSON_PROPERTY_METHOD_NAME = "method_name";
  private String methodName;

  public static final String JSON_PROPERTY_ROYALTY_RULE = "royalty_rule";
  private Long royaltyRule;

  public MethodRoyaltyRule() { 
  }

  public MethodRoyaltyRule methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public MethodRoyaltyRule royaltyRule(Long royaltyRule) {
    this.royaltyRule = royaltyRule;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;2^32 - 1&#x60;, representing the number of cost units required to access this method.
   * minimum: 0
   * maximum: 4294967295
   * @return royaltyRule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `2^32 - 1`, representing the number of cost units required to access this method.")
  @JsonProperty(JSON_PROPERTY_ROYALTY_RULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getRoyaltyRule() {
    return royaltyRule;
  }


  @JsonProperty(JSON_PROPERTY_ROYALTY_RULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoyaltyRule(Long royaltyRule) {
    this.royaltyRule = royaltyRule;
  }


  /**
   * Return true if this MethodRoyaltyRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodRoyaltyRule methodRoyaltyRule = (MethodRoyaltyRule) o;
    return Objects.equals(this.methodName, methodRoyaltyRule.methodName) &&
        Objects.equals(this.royaltyRule, methodRoyaltyRule.royaltyRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(methodName, royaltyRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodRoyaltyRule {\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    royaltyRule: ").append(toIndentedString(royaltyRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

