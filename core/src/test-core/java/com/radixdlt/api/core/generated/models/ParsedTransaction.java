/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.LedgerTransaction;
import com.radixdlt.api.core.generated.models.NotarizedTransaction;
import com.radixdlt.api.core.generated.models.ParsedLedgerTransaction;
import com.radixdlt.api.core.generated.models.ParsedLedgerTransactionAllOfIdentifiers;
import com.radixdlt.api.core.generated.models.ParsedNotarizedTransaction;
import com.radixdlt.api.core.generated.models.ParsedNotarizedTransactionAllOfValidationError;
import com.radixdlt.api.core.generated.models.ParsedSignedTransactionIntent;
import com.radixdlt.api.core.generated.models.ParsedTransactionIntent;
import com.radixdlt.api.core.generated.models.ParsedTransactionManifest;
import com.radixdlt.api.core.generated.models.SignedTransactionIntent;
import com.radixdlt.api.core.generated.models.TransactionIntent;
import com.radixdlt.api.core.generated.models.TransactionManifest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.radixdlt.api.core.generated.client.JSON;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = ParsedTransaction.ParsedTransactionDeserializer.class)
@JsonSerialize(using = ParsedTransaction.ParsedTransactionSerializer.class)
public class ParsedTransaction extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ParsedTransaction.class.getName());

    public static class ParsedTransactionSerializer extends StdSerializer<ParsedTransaction> {
        public ParsedTransactionSerializer(Class<ParsedTransaction> t) {
            super(t);
        }

        public ParsedTransactionSerializer() {
            this(null);
        }

        @Override
        public void serialize(ParsedTransaction value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ParsedTransactionDeserializer extends StdDeserializer<ParsedTransaction> {
        public ParsedTransactionDeserializer() {
            this(ParsedTransaction.class);
        }

        public ParsedTransactionDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ParsedTransaction deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            ParsedTransaction newParsedTransaction = new ParsedTransaction();
            Map<String,Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
            String discriminatorValue = (String)result2.get("type");
            switch (discriminatorValue) {
                case "LedgerTransaction":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedLedgerTransaction.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "NotarizedTransaction":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedNotarizedTransaction.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "ParsedLedgerTransaction":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedLedgerTransaction.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "ParsedNotarizedTransaction":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedNotarizedTransaction.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "ParsedSignedTransactionIntent":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedSignedTransactionIntent.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "ParsedTransactionIntent":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedTransactionIntent.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "ParsedTransactionManifest":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedTransactionManifest.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "SignedTransactionIntent":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedSignedTransactionIntent.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "TransactionIntent":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedTransactionIntent.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                case "TransactionManifest":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedTransactionManifest.class);
                    newParsedTransaction.setActualInstance(deserialized);
                    return newParsedTransaction;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for ParsedTransaction. Possible values: LedgerTransaction NotarizedTransaction ParsedLedgerTransaction ParsedNotarizedTransaction ParsedSignedTransactionIntent ParsedTransactionIntent ParsedTransactionManifest SignedTransactionIntent TransactionIntent TransactionManifest", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize ParsedLedgerTransaction
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ParsedLedgerTransaction.class.equals(Integer.class) || ParsedLedgerTransaction.class.equals(Long.class) || ParsedLedgerTransaction.class.equals(Float.class) || ParsedLedgerTransaction.class.equals(Double.class) || ParsedLedgerTransaction.class.equals(Boolean.class) || ParsedLedgerTransaction.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ParsedLedgerTransaction.class.equals(Integer.class) || ParsedLedgerTransaction.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ParsedLedgerTransaction.class.equals(Float.class) || ParsedLedgerTransaction.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ParsedLedgerTransaction.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ParsedLedgerTransaction.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedLedgerTransaction.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ParsedLedgerTransaction'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ParsedLedgerTransaction'", e);
            }

            // deserialize ParsedNotarizedTransaction
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ParsedNotarizedTransaction.class.equals(Integer.class) || ParsedNotarizedTransaction.class.equals(Long.class) || ParsedNotarizedTransaction.class.equals(Float.class) || ParsedNotarizedTransaction.class.equals(Double.class) || ParsedNotarizedTransaction.class.equals(Boolean.class) || ParsedNotarizedTransaction.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ParsedNotarizedTransaction.class.equals(Integer.class) || ParsedNotarizedTransaction.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ParsedNotarizedTransaction.class.equals(Float.class) || ParsedNotarizedTransaction.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ParsedNotarizedTransaction.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ParsedNotarizedTransaction.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedNotarizedTransaction.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ParsedNotarizedTransaction'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ParsedNotarizedTransaction'", e);
            }

            // deserialize ParsedSignedTransactionIntent
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ParsedSignedTransactionIntent.class.equals(Integer.class) || ParsedSignedTransactionIntent.class.equals(Long.class) || ParsedSignedTransactionIntent.class.equals(Float.class) || ParsedSignedTransactionIntent.class.equals(Double.class) || ParsedSignedTransactionIntent.class.equals(Boolean.class) || ParsedSignedTransactionIntent.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ParsedSignedTransactionIntent.class.equals(Integer.class) || ParsedSignedTransactionIntent.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ParsedSignedTransactionIntent.class.equals(Float.class) || ParsedSignedTransactionIntent.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ParsedSignedTransactionIntent.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ParsedSignedTransactionIntent.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedSignedTransactionIntent.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ParsedSignedTransactionIntent'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ParsedSignedTransactionIntent'", e);
            }

            // deserialize ParsedTransactionIntent
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ParsedTransactionIntent.class.equals(Integer.class) || ParsedTransactionIntent.class.equals(Long.class) || ParsedTransactionIntent.class.equals(Float.class) || ParsedTransactionIntent.class.equals(Double.class) || ParsedTransactionIntent.class.equals(Boolean.class) || ParsedTransactionIntent.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ParsedTransactionIntent.class.equals(Integer.class) || ParsedTransactionIntent.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ParsedTransactionIntent.class.equals(Float.class) || ParsedTransactionIntent.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ParsedTransactionIntent.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ParsedTransactionIntent.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedTransactionIntent.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ParsedTransactionIntent'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ParsedTransactionIntent'", e);
            }

            // deserialize ParsedTransactionManifest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ParsedTransactionManifest.class.equals(Integer.class) || ParsedTransactionManifest.class.equals(Long.class) || ParsedTransactionManifest.class.equals(Float.class) || ParsedTransactionManifest.class.equals(Double.class) || ParsedTransactionManifest.class.equals(Boolean.class) || ParsedTransactionManifest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ParsedTransactionManifest.class.equals(Integer.class) || ParsedTransactionManifest.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ParsedTransactionManifest.class.equals(Float.class) || ParsedTransactionManifest.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ParsedTransactionManifest.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ParsedTransactionManifest.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ParsedTransactionManifest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ParsedTransactionManifest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ParsedTransactionManifest'", e);
            }

            if (match == 1) {
                ParsedTransaction ret = new ParsedTransaction();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for ParsedTransaction: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ParsedTransaction getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "ParsedTransaction cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public ParsedTransaction() {
        super("oneOf", Boolean.FALSE);
    }

    public ParsedTransaction(ParsedLedgerTransaction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ParsedTransaction(ParsedNotarizedTransaction o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ParsedTransaction(ParsedSignedTransactionIntent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ParsedTransaction(ParsedTransactionIntent o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ParsedTransaction(ParsedTransactionManifest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ParsedLedgerTransaction", ParsedLedgerTransaction.class);
        schemas.put("ParsedNotarizedTransaction", ParsedNotarizedTransaction.class);
        schemas.put("ParsedSignedTransactionIntent", ParsedSignedTransactionIntent.class);
        schemas.put("ParsedTransactionIntent", ParsedTransactionIntent.class);
        schemas.put("ParsedTransactionManifest", ParsedTransactionManifest.class);
        JSON.registerDescendants(ParsedTransaction.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("LedgerTransaction", ParsedLedgerTransaction.class);
        mappings.put("NotarizedTransaction", ParsedNotarizedTransaction.class);
        mappings.put("ParsedLedgerTransaction", ParsedLedgerTransaction.class);
        mappings.put("ParsedNotarizedTransaction", ParsedNotarizedTransaction.class);
        mappings.put("ParsedSignedTransactionIntent", ParsedSignedTransactionIntent.class);
        mappings.put("ParsedTransactionIntent", ParsedTransactionIntent.class);
        mappings.put("ParsedTransactionManifest", ParsedTransactionManifest.class);
        mappings.put("SignedTransactionIntent", ParsedSignedTransactionIntent.class);
        mappings.put("TransactionIntent", ParsedTransactionIntent.class);
        mappings.put("TransactionManifest", ParsedTransactionManifest.class);
        mappings.put("ParsedTransaction", ParsedTransaction.class);
        JSON.registerDiscriminator(ParsedTransaction.class, "type", mappings);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ParsedTransaction.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ParsedLedgerTransaction, ParsedNotarizedTransaction, ParsedSignedTransactionIntent, ParsedTransactionIntent, ParsedTransactionManifest
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ParsedLedgerTransaction.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ParsedNotarizedTransaction.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ParsedSignedTransactionIntent.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ParsedTransactionIntent.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ParsedTransactionManifest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ParsedLedgerTransaction, ParsedNotarizedTransaction, ParsedSignedTransactionIntent, ParsedTransactionIntent, ParsedTransactionManifest");
    }

    /**
     * Get the actual instance, which can be the following:
     * ParsedLedgerTransaction, ParsedNotarizedTransaction, ParsedSignedTransactionIntent, ParsedTransactionIntent, ParsedTransactionManifest
     *
     * @return The actual instance (ParsedLedgerTransaction, ParsedNotarizedTransaction, ParsedSignedTransactionIntent, ParsedTransactionIntent, ParsedTransactionManifest)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ParsedLedgerTransaction`. If the actual instance is not `ParsedLedgerTransaction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ParsedLedgerTransaction`
     * @throws ClassCastException if the instance is not `ParsedLedgerTransaction`
     */
    public ParsedLedgerTransaction getParsedLedgerTransaction() throws ClassCastException {
        return (ParsedLedgerTransaction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ParsedNotarizedTransaction`. If the actual instance is not `ParsedNotarizedTransaction`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ParsedNotarizedTransaction`
     * @throws ClassCastException if the instance is not `ParsedNotarizedTransaction`
     */
    public ParsedNotarizedTransaction getParsedNotarizedTransaction() throws ClassCastException {
        return (ParsedNotarizedTransaction)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ParsedSignedTransactionIntent`. If the actual instance is not `ParsedSignedTransactionIntent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ParsedSignedTransactionIntent`
     * @throws ClassCastException if the instance is not `ParsedSignedTransactionIntent`
     */
    public ParsedSignedTransactionIntent getParsedSignedTransactionIntent() throws ClassCastException {
        return (ParsedSignedTransactionIntent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ParsedTransactionIntent`. If the actual instance is not `ParsedTransactionIntent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ParsedTransactionIntent`
     * @throws ClassCastException if the instance is not `ParsedTransactionIntent`
     */
    public ParsedTransactionIntent getParsedTransactionIntent() throws ClassCastException {
        return (ParsedTransactionIntent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ParsedTransactionManifest`. If the actual instance is not `ParsedTransactionManifest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ParsedTransactionManifest`
     * @throws ClassCastException if the instance is not `ParsedTransactionManifest`
     */
    public ParsedTransactionManifest getParsedTransactionManifest() throws ClassCastException {
        return (ParsedTransactionManifest)super.getActualInstance();
    }

}

