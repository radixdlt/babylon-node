/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TransactionPreviewRequestFlags
 */
@JsonPropertyOrder({
  TransactionPreviewRequestFlags.JSON_PROPERTY_UNLIMITED_LOAN,
  TransactionPreviewRequestFlags.JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS,
  TransactionPreviewRequestFlags.JSON_PROPERTY_PERMIT_DUPLICATE_INTENT_HASH,
  TransactionPreviewRequestFlags.JSON_PROPERTY_PERMIT_INVALID_HEADER_EPOCH
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionPreviewRequestFlags {
  public static final String JSON_PROPERTY_UNLIMITED_LOAN = "unlimited_loan";
  private Boolean unlimitedLoan;

  public static final String JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS = "assume_all_signature_proofs";
  private Boolean assumeAllSignatureProofs;

  public static final String JSON_PROPERTY_PERMIT_DUPLICATE_INTENT_HASH = "permit_duplicate_intent_hash";
  private Boolean permitDuplicateIntentHash;

  public static final String JSON_PROPERTY_PERMIT_INVALID_HEADER_EPOCH = "permit_invalid_header_epoch";
  private Boolean permitInvalidHeaderEpoch;

  public TransactionPreviewRequestFlags() { 
  }

  public TransactionPreviewRequestFlags unlimitedLoan(Boolean unlimitedLoan) {
    this.unlimitedLoan = unlimitedLoan;
    return this;
  }

   /**
   * Get unlimitedLoan
   * @return unlimitedLoan
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UNLIMITED_LOAN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUnlimitedLoan() {
    return unlimitedLoan;
  }


  @JsonProperty(JSON_PROPERTY_UNLIMITED_LOAN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnlimitedLoan(Boolean unlimitedLoan) {
    this.unlimitedLoan = unlimitedLoan;
  }


  public TransactionPreviewRequestFlags assumeAllSignatureProofs(Boolean assumeAllSignatureProofs) {
    this.assumeAllSignatureProofs = assumeAllSignatureProofs;
    return this;
  }

   /**
   * Get assumeAllSignatureProofs
   * @return assumeAllSignatureProofs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAssumeAllSignatureProofs() {
    return assumeAllSignatureProofs;
  }


  @JsonProperty(JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssumeAllSignatureProofs(Boolean assumeAllSignatureProofs) {
    this.assumeAllSignatureProofs = assumeAllSignatureProofs;
  }


  public TransactionPreviewRequestFlags permitDuplicateIntentHash(Boolean permitDuplicateIntentHash) {
    this.permitDuplicateIntentHash = permitDuplicateIntentHash;
    return this;
  }

   /**
   * Get permitDuplicateIntentHash
   * @return permitDuplicateIntentHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PERMIT_DUPLICATE_INTENT_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getPermitDuplicateIntentHash() {
    return permitDuplicateIntentHash;
  }


  @JsonProperty(JSON_PROPERTY_PERMIT_DUPLICATE_INTENT_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPermitDuplicateIntentHash(Boolean permitDuplicateIntentHash) {
    this.permitDuplicateIntentHash = permitDuplicateIntentHash;
  }


  public TransactionPreviewRequestFlags permitInvalidHeaderEpoch(Boolean permitInvalidHeaderEpoch) {
    this.permitInvalidHeaderEpoch = permitInvalidHeaderEpoch;
    return this;
  }

   /**
   * Get permitInvalidHeaderEpoch
   * @return permitInvalidHeaderEpoch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PERMIT_INVALID_HEADER_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getPermitInvalidHeaderEpoch() {
    return permitInvalidHeaderEpoch;
  }


  @JsonProperty(JSON_PROPERTY_PERMIT_INVALID_HEADER_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPermitInvalidHeaderEpoch(Boolean permitInvalidHeaderEpoch) {
    this.permitInvalidHeaderEpoch = permitInvalidHeaderEpoch;
  }


  /**
   * Return true if this TransactionPreviewRequest_flags object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionPreviewRequestFlags transactionPreviewRequestFlags = (TransactionPreviewRequestFlags) o;
    return Objects.equals(this.unlimitedLoan, transactionPreviewRequestFlags.unlimitedLoan) &&
        Objects.equals(this.assumeAllSignatureProofs, transactionPreviewRequestFlags.assumeAllSignatureProofs) &&
        Objects.equals(this.permitDuplicateIntentHash, transactionPreviewRequestFlags.permitDuplicateIntentHash) &&
        Objects.equals(this.permitInvalidHeaderEpoch, transactionPreviewRequestFlags.permitInvalidHeaderEpoch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unlimitedLoan, assumeAllSignatureProofs, permitDuplicateIntentHash, permitInvalidHeaderEpoch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionPreviewRequestFlags {\n");
    sb.append("    unlimitedLoan: ").append(toIndentedString(unlimitedLoan)).append("\n");
    sb.append("    assumeAllSignatureProofs: ").append(toIndentedString(assumeAllSignatureProofs)).append("\n");
    sb.append("    permitDuplicateIntentHash: ").append(toIndentedString(permitDuplicateIntentHash)).append("\n");
    sb.append("    permitInvalidHeaderEpoch: ").append(toIndentedString(permitInvalidHeaderEpoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

