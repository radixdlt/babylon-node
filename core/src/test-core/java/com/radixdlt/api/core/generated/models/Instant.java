/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Instant
 */
@JsonPropertyOrder({
  Instant.JSON_PROPERTY_UNIX_TIMESTAMP_MS,
  Instant.JSON_PROPERTY_DATE_TIME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Instant {
  public static final String JSON_PROPERTY_UNIX_TIMESTAMP_MS = "unix_timestamp_ms";
  private Long unixTimestampMs;

  public static final String JSON_PROPERTY_DATE_TIME = "date_time";
  private String dateTime;

  public Instant() { 
  }

  public Instant unixTimestampMs(Long unixTimestampMs) {
    this.unixTimestampMs = unixTimestampMs;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^14&#x60;, marking the unix timestamp in ms.
   * minimum: 0
   * maximum: 100000000000000
   * @return unixTimestampMs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^14`, marking the unix timestamp in ms.")
  @JsonProperty(JSON_PROPERTY_UNIX_TIMESTAMP_MS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getUnixTimestampMs() {
    return unixTimestampMs;
  }


  @JsonProperty(JSON_PROPERTY_UNIX_TIMESTAMP_MS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnixTimestampMs(Long unixTimestampMs) {
    this.unixTimestampMs = unixTimestampMs;
  }


  public Instant dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

   /**
   * The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use \&quot;Z\&quot; denoting UTC and include milliseconds. EG: &#x60;2023-01-26T18:30:09.453Z&#x60;. 
   * @return dateTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use \"Z\" denoting UTC and include milliseconds. EG: `2023-01-26T18:30:09.453Z`. ")
  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDateTime() {
    return dateTime;
  }


  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  /**
   * Return true if this Instant object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instant instant = (Instant) o;
    return Objects.equals(this.unixTimestampMs, instant.unixTimestampMs) &&
        Objects.equals(this.dateTime, instant.dateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unixTimestampMs, dateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instant {\n");
    sb.append("    unixTimestampMs: ").append(toIndentedString(unixTimestampMs)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

