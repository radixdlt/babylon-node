/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.NonFungibleData;
import com.radixdlt.api.core.generated.models.NonFungibleId;
import com.radixdlt.api.core.generated.models.NonFungibleStoreEntrySubstateAllOf;
import com.radixdlt.api.core.generated.models.SubstateBase;
import com.radixdlt.api.core.generated.models.SubstateType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NonFungibleStoreEntrySubstate
 */
@JsonPropertyOrder({
  NonFungibleStoreEntrySubstate.JSON_PROPERTY_SUBSTATE_TYPE,
  NonFungibleStoreEntrySubstate.JSON_PROPERTY_NON_FUNGIBLE_ID,
  NonFungibleStoreEntrySubstate.JSON_PROPERTY_NON_FUNGIBLE_DATA,
  NonFungibleStoreEntrySubstate.JSON_PROPERTY_IS_DELETED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NonFungibleStoreEntrySubstate {
  public static final String JSON_PROPERTY_SUBSTATE_TYPE = "substate_type";
  private SubstateType substateType;

  public static final String JSON_PROPERTY_NON_FUNGIBLE_ID = "non_fungible_id";
  private NonFungibleId nonFungibleId;

  public static final String JSON_PROPERTY_NON_FUNGIBLE_DATA = "non_fungible_data";
  private NonFungibleData nonFungibleData;

  public static final String JSON_PROPERTY_IS_DELETED = "is_deleted";
  private Boolean isDeleted;

  public NonFungibleStoreEntrySubstate() { 
  }

  public NonFungibleStoreEntrySubstate substateType(SubstateType substateType) {
    this.substateType = substateType;
    return this;
  }

   /**
   * Get substateType
   * @return substateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateType getSubstateType() {
    return substateType;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateType(SubstateType substateType) {
    this.substateType = substateType;
  }


  public NonFungibleStoreEntrySubstate nonFungibleId(NonFungibleId nonFungibleId) {
    this.nonFungibleId = nonFungibleId;
    return this;
  }

   /**
   * Get nonFungibleId
   * @return nonFungibleId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NonFungibleId getNonFungibleId() {
    return nonFungibleId;
  }


  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonFungibleId(NonFungibleId nonFungibleId) {
    this.nonFungibleId = nonFungibleId;
  }


  public NonFungibleStoreEntrySubstate nonFungibleData(NonFungibleData nonFungibleData) {
    this.nonFungibleData = nonFungibleData;
    return this;
  }

   /**
   * Get nonFungibleData
   * @return nonFungibleData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NonFungibleData getNonFungibleData() {
    return nonFungibleData;
  }


  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNonFungibleData(NonFungibleData nonFungibleData) {
    this.nonFungibleData = nonFungibleData;
  }


  public NonFungibleStoreEntrySubstate isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Get isDeleted
   * @return isDeleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsDeleted() {
    return isDeleted;
  }


  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  /**
   * Return true if this NonFungibleStoreEntrySubstate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NonFungibleStoreEntrySubstate nonFungibleStoreEntrySubstate = (NonFungibleStoreEntrySubstate) o;
    return Objects.equals(this.substateType, nonFungibleStoreEntrySubstate.substateType) &&
        Objects.equals(this.nonFungibleId, nonFungibleStoreEntrySubstate.nonFungibleId) &&
        Objects.equals(this.nonFungibleData, nonFungibleStoreEntrySubstate.nonFungibleData) &&
        Objects.equals(this.isDeleted, nonFungibleStoreEntrySubstate.isDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(substateType, nonFungibleId, nonFungibleData, isDeleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NonFungibleStoreEntrySubstate {\n");
    sb.append("    substateType: ").append(toIndentedString(substateType)).append("\n");
    sb.append("    nonFungibleId: ").append(toIndentedString(nonFungibleId)).append("\n");
    sb.append("    nonFungibleData: ").append(toIndentedString(nonFungibleData)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

