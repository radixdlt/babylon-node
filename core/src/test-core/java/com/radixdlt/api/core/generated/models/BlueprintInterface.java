/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.BlueprintPayloadDef;
import com.radixdlt.api.core.generated.models.FunctionSchema;
import com.radixdlt.api.core.generated.models.GenericTypeParameter;
import com.radixdlt.api.core.generated.models.IndexedStateSchema;
import com.radixdlt.api.core.generated.models.ScopedTypeId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlueprintInterface
 */
@JsonPropertyOrder({
  BlueprintInterface.JSON_PROPERTY_OUTER_BLUEPRINT,
  BlueprintInterface.JSON_PROPERTY_GENERIC_TYPE_PARAMETERS,
  BlueprintInterface.JSON_PROPERTY_IS_TRANSIENT,
  BlueprintInterface.JSON_PROPERTY_FEATURES,
  BlueprintInterface.JSON_PROPERTY_STATE,
  BlueprintInterface.JSON_PROPERTY_FUNCTIONS,
  BlueprintInterface.JSON_PROPERTY_EVENTS,
  BlueprintInterface.JSON_PROPERTY_TYPES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlueprintInterface {
  public static final String JSON_PROPERTY_OUTER_BLUEPRINT = "outer_blueprint";
  private String outerBlueprint;

  public static final String JSON_PROPERTY_GENERIC_TYPE_PARAMETERS = "generic_type_parameters";
  private List<GenericTypeParameter> genericTypeParameters = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_TRANSIENT = "is_transient";
  private Boolean isTransient;

  public static final String JSON_PROPERTY_FEATURES = "features";
  private List<String> features = new ArrayList<>();

  public static final String JSON_PROPERTY_STATE = "state";
  private IndexedStateSchema state;

  public static final String JSON_PROPERTY_FUNCTIONS = "functions";
  private Map<String, FunctionSchema> functions = new HashMap<>();

  public static final String JSON_PROPERTY_EVENTS = "events";
  private Map<String, BlueprintPayloadDef> events = new HashMap<>();

  public static final String JSON_PROPERTY_TYPES = "types";
  private Map<String, ScopedTypeId> types = new HashMap<>();

  public BlueprintInterface() { 
  }

  public BlueprintInterface outerBlueprint(String outerBlueprint) {
    this.outerBlueprint = outerBlueprint;
    return this;
  }

   /**
   * Get outerBlueprint
   * @return outerBlueprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OUTER_BLUEPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOuterBlueprint() {
    return outerBlueprint;
  }


  @JsonProperty(JSON_PROPERTY_OUTER_BLUEPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOuterBlueprint(String outerBlueprint) {
    this.outerBlueprint = outerBlueprint;
  }


  public BlueprintInterface genericTypeParameters(List<GenericTypeParameter> genericTypeParameters) {
    this.genericTypeParameters = genericTypeParameters;
    return this;
  }

  public BlueprintInterface addGenericTypeParametersItem(GenericTypeParameter genericTypeParametersItem) {
    this.genericTypeParameters.add(genericTypeParametersItem);
    return this;
  }

   /**
   * Generic (SBOR) type parameters which need to be filled by a concrete instance of this blueprint. 
   * @return genericTypeParameters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Generic (SBOR) type parameters which need to be filled by a concrete instance of this blueprint. ")
  @JsonProperty(JSON_PROPERTY_GENERIC_TYPE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<GenericTypeParameter> getGenericTypeParameters() {
    return genericTypeParameters;
  }


  @JsonProperty(JSON_PROPERTY_GENERIC_TYPE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGenericTypeParameters(List<GenericTypeParameter> genericTypeParameters) {
    this.genericTypeParameters = genericTypeParameters;
  }


  public BlueprintInterface isTransient(Boolean isTransient) {
    this.isTransient = isTransient;
    return this;
  }

   /**
   * If true, an instantiation of this blueprint cannot be persisted. EG buckets and proofs are transient.
   * @return isTransient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true, an instantiation of this blueprint cannot be persisted. EG buckets and proofs are transient.")
  @JsonProperty(JSON_PROPERTY_IS_TRANSIENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsTransient() {
    return isTransient;
  }


  @JsonProperty(JSON_PROPERTY_IS_TRANSIENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsTransient(Boolean isTransient) {
    this.isTransient = isTransient;
  }


  public BlueprintInterface features(List<String> features) {
    this.features = features;
    return this;
  }

  public BlueprintInterface addFeaturesItem(String featuresItem) {
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getFeatures() {
    return features;
  }


  @JsonProperty(JSON_PROPERTY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public BlueprintInterface state(IndexedStateSchema state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IndexedStateSchema getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(IndexedStateSchema state) {
    this.state = state;
  }


  public BlueprintInterface functions(Map<String, FunctionSchema> functions) {
    this.functions = functions;
    return this;
  }

  public BlueprintInterface putFunctionsItem(String key, FunctionSchema functionsItem) {
    this.functions.put(key, functionsItem);
    return this;
  }

   /**
   * A map from the function name to the FunctionSchema
   * @return functions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the function name to the FunctionSchema")
  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, FunctionSchema> getFunctions() {
    return functions;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFunctions(Map<String, FunctionSchema> functions) {
    this.functions = functions;
  }


  public BlueprintInterface events(Map<String, BlueprintPayloadDef> events) {
    this.events = events;
    return this;
  }

  public BlueprintInterface putEventsItem(String key, BlueprintPayloadDef eventsItem) {
    this.events.put(key, eventsItem);
    return this;
  }

   /**
   * A map from the event name to the event payload type reference.
   * @return events
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the event name to the event payload type reference.")
  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, BlueprintPayloadDef> getEvents() {
    return events;
  }


  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvents(Map<String, BlueprintPayloadDef> events) {
    this.events = events;
  }


  public BlueprintInterface types(Map<String, ScopedTypeId> types) {
    this.types = types;
    return this;
  }

  public BlueprintInterface putTypesItem(String key, ScopedTypeId typesItem) {
    this.types.put(key, typesItem);
    return this;
  }

   /**
   * A map from the registered type name to the concrete type, resolved against a schema from the package&#39;s schema partition. 
   * @return types
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the registered type name to the concrete type, resolved against a schema from the package's schema partition. ")
  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, ScopedTypeId> getTypes() {
    return types;
  }


  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTypes(Map<String, ScopedTypeId> types) {
    this.types = types;
  }


  /**
   * Return true if this BlueprintInterface object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintInterface blueprintInterface = (BlueprintInterface) o;
    return Objects.equals(this.outerBlueprint, blueprintInterface.outerBlueprint) &&
        Objects.equals(this.genericTypeParameters, blueprintInterface.genericTypeParameters) &&
        Objects.equals(this.isTransient, blueprintInterface.isTransient) &&
        Objects.equals(this.features, blueprintInterface.features) &&
        Objects.equals(this.state, blueprintInterface.state) &&
        Objects.equals(this.functions, blueprintInterface.functions) &&
        Objects.equals(this.events, blueprintInterface.events) &&
        Objects.equals(this.types, blueprintInterface.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outerBlueprint, genericTypeParameters, isTransient, features, state, functions, events, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintInterface {\n");
    sb.append("    outerBlueprint: ").append(toIndentedString(outerBlueprint)).append("\n");
    sb.append("    genericTypeParameters: ").append(toIndentedString(genericTypeParameters)).append("\n");
    sb.append("    isTransient: ").append(toIndentedString(isTransient)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

