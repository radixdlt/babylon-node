/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ComponentMethodIdentifier
 */
@JsonPropertyOrder({
  ComponentMethodIdentifier.JSON_PROPERTY_COMPONENT_ADDRESS,
  ComponentMethodIdentifier.JSON_PROPERTY_METHOD_NAME
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ComponentMethodIdentifier {
  public static final String JSON_PROPERTY_COMPONENT_ADDRESS = "component_address";
  private String componentAddress;

  public static final String JSON_PROPERTY_METHOD_NAME = "method_name";
  private String methodName;

  public ComponentMethodIdentifier() { 
  }

  public ComponentMethodIdentifier componentAddress(String componentAddress) {
    this.componentAddress = componentAddress;
    return this;
  }

   /**
   * The Bech32m-encoded human readable version of the component address
   * @return componentAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Bech32m-encoded human readable version of the component address")
  @JsonProperty(JSON_PROPERTY_COMPONENT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getComponentAddress() {
    return componentAddress;
  }


  @JsonProperty(JSON_PROPERTY_COMPONENT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComponentAddress(String componentAddress) {
    this.componentAddress = componentAddress;
  }


  public ComponentMethodIdentifier methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  /**
   * Return true if this ComponentMethodIdentifier object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentMethodIdentifier componentMethodIdentifier = (ComponentMethodIdentifier) o;
    return Objects.equals(this.componentAddress, componentMethodIdentifier.componentAddress) &&
        Objects.equals(this.methodName, componentMethodIdentifier.methodName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentAddress, methodName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentMethodIdentifier {\n");
    sb.append("    componentAddress: ").append(toIndentedString(componentAddress)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

