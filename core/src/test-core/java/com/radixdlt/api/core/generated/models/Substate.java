/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.BlueprintData;
import com.radixdlt.api.core.generated.models.ComponentAccessRulesLayer;
import com.radixdlt.api.core.generated.models.ComponentInfoSubstate;
import com.radixdlt.api.core.generated.models.ComponentStateSubstate;
import com.radixdlt.api.core.generated.models.DataStruct;
import com.radixdlt.api.core.generated.models.EntityReference;
import com.radixdlt.api.core.generated.models.EntityType;
import com.radixdlt.api.core.generated.models.EpochManagerSubstate;
import com.radixdlt.api.core.generated.models.GlobalEntityAssignment;
import com.radixdlt.api.core.generated.models.GlobalSubstate;
import com.radixdlt.api.core.generated.models.KeyValueStoreEntrySubstate;
import com.radixdlt.api.core.generated.models.NonFungibleData;
import com.radixdlt.api.core.generated.models.NonFungibleSubstate;
import com.radixdlt.api.core.generated.models.PackageSubstate;
import com.radixdlt.api.core.generated.models.ResourceAmount;
import com.radixdlt.api.core.generated.models.ResourceManagerSubstate;
import com.radixdlt.api.core.generated.models.ResourceManagerSubstateAllOfAuthRules;
import com.radixdlt.api.core.generated.models.ResourceManagerSubstateAllOfMetadata;
import com.radixdlt.api.core.generated.models.ResourceType;
import com.radixdlt.api.core.generated.models.SubstateType;
import com.radixdlt.api.core.generated.models.VaultSubstate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.radixdlt.api.core.generated.client.JSON;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = Substate.SubstateDeserializer.class)
@JsonSerialize(using = Substate.SubstateSerializer.class)
public class Substate extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Substate.class.getName());

    public static class SubstateSerializer extends StdSerializer<Substate> {
        public SubstateSerializer(Class<Substate> t) {
            super(t);
        }

        public SubstateSerializer() {
            this(null);
        }

        @Override
        public void serialize(Substate value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class SubstateDeserializer extends StdDeserializer<Substate> {
        public SubstateDeserializer() {
            this(Substate.class);
        }

        public SubstateDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public Substate deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            Substate newSubstate = new Substate();
            Map<String,Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
            String discriminatorValue = (String)result2.get("substate_type");
            switch (discriminatorValue) {
                case "ComponentInfo":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ComponentInfoSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "ComponentInfoSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ComponentInfoSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "ComponentState":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ComponentStateSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "ComponentStateSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ComponentStateSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "EpochManager":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(EpochManagerSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "EpochManagerSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(EpochManagerSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "Global":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GlobalSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "GlobalSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GlobalSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "KeyValueStoreEntry":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(KeyValueStoreEntrySubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "KeyValueStoreEntrySubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(KeyValueStoreEntrySubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "NonFungible":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(NonFungibleSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "NonFungibleSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(NonFungibleSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "Package":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PackageSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "PackageSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PackageSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "ResourceManager":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ResourceManagerSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "ResourceManagerSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ResourceManagerSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "Vault":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(VaultSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                case "VaultSubstate":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(VaultSubstate.class);
                    newSubstate.setActualInstance(deserialized);
                    return newSubstate;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for Substate. Possible values: ComponentInfo ComponentInfoSubstate ComponentState ComponentStateSubstate EpochManager EpochManagerSubstate Global GlobalSubstate KeyValueStoreEntry KeyValueStoreEntrySubstate NonFungible NonFungibleSubstate Package PackageSubstate ResourceManager ResourceManagerSubstate Vault VaultSubstate", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize ComponentInfoSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ComponentInfoSubstate.class.equals(Integer.class) || ComponentInfoSubstate.class.equals(Long.class) || ComponentInfoSubstate.class.equals(Float.class) || ComponentInfoSubstate.class.equals(Double.class) || ComponentInfoSubstate.class.equals(Boolean.class) || ComponentInfoSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ComponentInfoSubstate.class.equals(Integer.class) || ComponentInfoSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ComponentInfoSubstate.class.equals(Float.class) || ComponentInfoSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ComponentInfoSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ComponentInfoSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ComponentInfoSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ComponentInfoSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ComponentInfoSubstate'", e);
            }

            // deserialize ComponentStateSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ComponentStateSubstate.class.equals(Integer.class) || ComponentStateSubstate.class.equals(Long.class) || ComponentStateSubstate.class.equals(Float.class) || ComponentStateSubstate.class.equals(Double.class) || ComponentStateSubstate.class.equals(Boolean.class) || ComponentStateSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ComponentStateSubstate.class.equals(Integer.class) || ComponentStateSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ComponentStateSubstate.class.equals(Float.class) || ComponentStateSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ComponentStateSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ComponentStateSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ComponentStateSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ComponentStateSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ComponentStateSubstate'", e);
            }

            // deserialize EpochManagerSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (EpochManagerSubstate.class.equals(Integer.class) || EpochManagerSubstate.class.equals(Long.class) || EpochManagerSubstate.class.equals(Float.class) || EpochManagerSubstate.class.equals(Double.class) || EpochManagerSubstate.class.equals(Boolean.class) || EpochManagerSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((EpochManagerSubstate.class.equals(Integer.class) || EpochManagerSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((EpochManagerSubstate.class.equals(Float.class) || EpochManagerSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (EpochManagerSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (EpochManagerSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(EpochManagerSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'EpochManagerSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'EpochManagerSubstate'", e);
            }

            // deserialize GlobalSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (GlobalSubstate.class.equals(Integer.class) || GlobalSubstate.class.equals(Long.class) || GlobalSubstate.class.equals(Float.class) || GlobalSubstate.class.equals(Double.class) || GlobalSubstate.class.equals(Boolean.class) || GlobalSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((GlobalSubstate.class.equals(Integer.class) || GlobalSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((GlobalSubstate.class.equals(Float.class) || GlobalSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (GlobalSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (GlobalSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GlobalSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'GlobalSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'GlobalSubstate'", e);
            }

            // deserialize KeyValueStoreEntrySubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (KeyValueStoreEntrySubstate.class.equals(Integer.class) || KeyValueStoreEntrySubstate.class.equals(Long.class) || KeyValueStoreEntrySubstate.class.equals(Float.class) || KeyValueStoreEntrySubstate.class.equals(Double.class) || KeyValueStoreEntrySubstate.class.equals(Boolean.class) || KeyValueStoreEntrySubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((KeyValueStoreEntrySubstate.class.equals(Integer.class) || KeyValueStoreEntrySubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((KeyValueStoreEntrySubstate.class.equals(Float.class) || KeyValueStoreEntrySubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (KeyValueStoreEntrySubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (KeyValueStoreEntrySubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(KeyValueStoreEntrySubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'KeyValueStoreEntrySubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'KeyValueStoreEntrySubstate'", e);
            }

            // deserialize NonFungibleSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (NonFungibleSubstate.class.equals(Integer.class) || NonFungibleSubstate.class.equals(Long.class) || NonFungibleSubstate.class.equals(Float.class) || NonFungibleSubstate.class.equals(Double.class) || NonFungibleSubstate.class.equals(Boolean.class) || NonFungibleSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((NonFungibleSubstate.class.equals(Integer.class) || NonFungibleSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((NonFungibleSubstate.class.equals(Float.class) || NonFungibleSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (NonFungibleSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (NonFungibleSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(NonFungibleSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'NonFungibleSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'NonFungibleSubstate'", e);
            }

            // deserialize PackageSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PackageSubstate.class.equals(Integer.class) || PackageSubstate.class.equals(Long.class) || PackageSubstate.class.equals(Float.class) || PackageSubstate.class.equals(Double.class) || PackageSubstate.class.equals(Boolean.class) || PackageSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PackageSubstate.class.equals(Integer.class) || PackageSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PackageSubstate.class.equals(Float.class) || PackageSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PackageSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PackageSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PackageSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PackageSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PackageSubstate'", e);
            }

            // deserialize ResourceManagerSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ResourceManagerSubstate.class.equals(Integer.class) || ResourceManagerSubstate.class.equals(Long.class) || ResourceManagerSubstate.class.equals(Float.class) || ResourceManagerSubstate.class.equals(Double.class) || ResourceManagerSubstate.class.equals(Boolean.class) || ResourceManagerSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ResourceManagerSubstate.class.equals(Integer.class) || ResourceManagerSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ResourceManagerSubstate.class.equals(Float.class) || ResourceManagerSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ResourceManagerSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ResourceManagerSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ResourceManagerSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ResourceManagerSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ResourceManagerSubstate'", e);
            }

            // deserialize VaultSubstate
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (VaultSubstate.class.equals(Integer.class) || VaultSubstate.class.equals(Long.class) || VaultSubstate.class.equals(Float.class) || VaultSubstate.class.equals(Double.class) || VaultSubstate.class.equals(Boolean.class) || VaultSubstate.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((VaultSubstate.class.equals(Integer.class) || VaultSubstate.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((VaultSubstate.class.equals(Float.class) || VaultSubstate.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (VaultSubstate.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (VaultSubstate.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(VaultSubstate.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'VaultSubstate'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'VaultSubstate'", e);
            }

            if (match == 1) {
                Substate ret = new Substate();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for Substate: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public Substate getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "Substate cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public Substate() {
        super("oneOf", Boolean.FALSE);
    }

    public Substate(ComponentInfoSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(ComponentStateSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(EpochManagerSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(GlobalSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(KeyValueStoreEntrySubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(NonFungibleSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(PackageSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(ResourceManagerSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Substate(VaultSubstate o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ComponentInfoSubstate", ComponentInfoSubstate.class);
        schemas.put("ComponentStateSubstate", ComponentStateSubstate.class);
        schemas.put("EpochManagerSubstate", EpochManagerSubstate.class);
        schemas.put("GlobalSubstate", GlobalSubstate.class);
        schemas.put("KeyValueStoreEntrySubstate", KeyValueStoreEntrySubstate.class);
        schemas.put("NonFungibleSubstate", NonFungibleSubstate.class);
        schemas.put("PackageSubstate", PackageSubstate.class);
        schemas.put("ResourceManagerSubstate", ResourceManagerSubstate.class);
        schemas.put("VaultSubstate", VaultSubstate.class);
        JSON.registerDescendants(Substate.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("ComponentInfo", ComponentInfoSubstate.class);
        mappings.put("ComponentInfoSubstate", ComponentInfoSubstate.class);
        mappings.put("ComponentState", ComponentStateSubstate.class);
        mappings.put("ComponentStateSubstate", ComponentStateSubstate.class);
        mappings.put("EpochManager", EpochManagerSubstate.class);
        mappings.put("EpochManagerSubstate", EpochManagerSubstate.class);
        mappings.put("Global", GlobalSubstate.class);
        mappings.put("GlobalSubstate", GlobalSubstate.class);
        mappings.put("KeyValueStoreEntry", KeyValueStoreEntrySubstate.class);
        mappings.put("KeyValueStoreEntrySubstate", KeyValueStoreEntrySubstate.class);
        mappings.put("NonFungible", NonFungibleSubstate.class);
        mappings.put("NonFungibleSubstate", NonFungibleSubstate.class);
        mappings.put("Package", PackageSubstate.class);
        mappings.put("PackageSubstate", PackageSubstate.class);
        mappings.put("ResourceManager", ResourceManagerSubstate.class);
        mappings.put("ResourceManagerSubstate", ResourceManagerSubstate.class);
        mappings.put("Vault", VaultSubstate.class);
        mappings.put("VaultSubstate", VaultSubstate.class);
        mappings.put("Substate", Substate.class);
        JSON.registerDiscriminator(Substate.class, "substate_type", mappings);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Substate.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ComponentInfoSubstate, ComponentStateSubstate, EpochManagerSubstate, GlobalSubstate, KeyValueStoreEntrySubstate, NonFungibleSubstate, PackageSubstate, ResourceManagerSubstate, VaultSubstate
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ComponentInfoSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ComponentStateSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(EpochManagerSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(GlobalSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(KeyValueStoreEntrySubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(NonFungibleSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PackageSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ResourceManagerSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(VaultSubstate.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ComponentInfoSubstate, ComponentStateSubstate, EpochManagerSubstate, GlobalSubstate, KeyValueStoreEntrySubstate, NonFungibleSubstate, PackageSubstate, ResourceManagerSubstate, VaultSubstate");
    }

    /**
     * Get the actual instance, which can be the following:
     * ComponentInfoSubstate, ComponentStateSubstate, EpochManagerSubstate, GlobalSubstate, KeyValueStoreEntrySubstate, NonFungibleSubstate, PackageSubstate, ResourceManagerSubstate, VaultSubstate
     *
     * @return The actual instance (ComponentInfoSubstate, ComponentStateSubstate, EpochManagerSubstate, GlobalSubstate, KeyValueStoreEntrySubstate, NonFungibleSubstate, PackageSubstate, ResourceManagerSubstate, VaultSubstate)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ComponentInfoSubstate`. If the actual instance is not `ComponentInfoSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ComponentInfoSubstate`
     * @throws ClassCastException if the instance is not `ComponentInfoSubstate`
     */
    public ComponentInfoSubstate getComponentInfoSubstate() throws ClassCastException {
        return (ComponentInfoSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ComponentStateSubstate`. If the actual instance is not `ComponentStateSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ComponentStateSubstate`
     * @throws ClassCastException if the instance is not `ComponentStateSubstate`
     */
    public ComponentStateSubstate getComponentStateSubstate() throws ClassCastException {
        return (ComponentStateSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EpochManagerSubstate`. If the actual instance is not `EpochManagerSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EpochManagerSubstate`
     * @throws ClassCastException if the instance is not `EpochManagerSubstate`
     */
    public EpochManagerSubstate getEpochManagerSubstate() throws ClassCastException {
        return (EpochManagerSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GlobalSubstate`. If the actual instance is not `GlobalSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GlobalSubstate`
     * @throws ClassCastException if the instance is not `GlobalSubstate`
     */
    public GlobalSubstate getGlobalSubstate() throws ClassCastException {
        return (GlobalSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `KeyValueStoreEntrySubstate`. If the actual instance is not `KeyValueStoreEntrySubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KeyValueStoreEntrySubstate`
     * @throws ClassCastException if the instance is not `KeyValueStoreEntrySubstate`
     */
    public KeyValueStoreEntrySubstate getKeyValueStoreEntrySubstate() throws ClassCastException {
        return (KeyValueStoreEntrySubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NonFungibleSubstate`. If the actual instance is not `NonFungibleSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NonFungibleSubstate`
     * @throws ClassCastException if the instance is not `NonFungibleSubstate`
     */
    public NonFungibleSubstate getNonFungibleSubstate() throws ClassCastException {
        return (NonFungibleSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PackageSubstate`. If the actual instance is not `PackageSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PackageSubstate`
     * @throws ClassCastException if the instance is not `PackageSubstate`
     */
    public PackageSubstate getPackageSubstate() throws ClassCastException {
        return (PackageSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResourceManagerSubstate`. If the actual instance is not `ResourceManagerSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResourceManagerSubstate`
     * @throws ClassCastException if the instance is not `ResourceManagerSubstate`
     */
    public ResourceManagerSubstate getResourceManagerSubstate() throws ClassCastException {
        return (ResourceManagerSubstate)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VaultSubstate`. If the actual instance is not `VaultSubstate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VaultSubstate`
     * @throws ClassCastException if the instance is not `VaultSubstate`
     */
    public VaultSubstate getVaultSubstate() throws ClassCastException {
        return (VaultSubstate)super.getActualInstance();
    }

}

