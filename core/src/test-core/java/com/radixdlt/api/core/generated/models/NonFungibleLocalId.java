/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.NonFungibleIdType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NonFungibleLocalId
 */
@JsonPropertyOrder({
  NonFungibleLocalId.JSON_PROPERTY_SIMPLE_REP,
  NonFungibleLocalId.JSON_PROPERTY_ID_TYPE,
  NonFungibleLocalId.JSON_PROPERTY_SBOR_HEX
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NonFungibleLocalId {
  public static final String JSON_PROPERTY_SIMPLE_REP = "simple_rep";
  private String simpleRep;

  public static final String JSON_PROPERTY_ID_TYPE = "id_type";
  private NonFungibleIdType idType;

  public static final String JSON_PROPERTY_SBOR_HEX = "sbor_hex";
  private String sborHex;

  public NonFungibleLocalId() { 
  }

  public NonFungibleLocalId simpleRep(String simpleRep) {
    this.simpleRep = simpleRep;
    return this;
  }

   /**
   * The simple string representation of the non-fungible id. For string id types, this is simply the string itself; for integer types, this is the integer as a decimal; and for the bytes id type, this is the lower case hex representation. A non-fungible resource has a fixed &#x60;NonFungibleIdType&#x60;, so this representation uniquely identifies this non-fungible under the given resource address. 
   * @return simpleRep
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The simple string representation of the non-fungible id. For string id types, this is simply the string itself; for integer types, this is the integer as a decimal; and for the bytes id type, this is the lower case hex representation. A non-fungible resource has a fixed `NonFungibleIdType`, so this representation uniquely identifies this non-fungible under the given resource address. ")
  @JsonProperty(JSON_PROPERTY_SIMPLE_REP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSimpleRep() {
    return simpleRep;
  }


  @JsonProperty(JSON_PROPERTY_SIMPLE_REP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSimpleRep(String simpleRep) {
    this.simpleRep = simpleRep;
  }


  public NonFungibleLocalId idType(NonFungibleIdType idType) {
    this.idType = idType;
    return this;
  }

   /**
   * Get idType
   * @return idType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NonFungibleIdType getIdType() {
    return idType;
  }


  @JsonProperty(JSON_PROPERTY_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdType(NonFungibleIdType idType) {
    this.idType = idType;
  }


  public NonFungibleLocalId sborHex(String sborHex) {
    this.sborHex = sborHex;
    return this;
  }

   /**
   * The hex-encoded SBOR-encoded bytes of its non-fungible id
   * @return sborHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded SBOR-encoded bytes of its non-fungible id")
  @JsonProperty(JSON_PROPERTY_SBOR_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSborHex() {
    return sborHex;
  }


  @JsonProperty(JSON_PROPERTY_SBOR_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSborHex(String sborHex) {
    this.sborHex = sborHex;
  }


  /**
   * Return true if this NonFungibleLocalId object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NonFungibleLocalId nonFungibleLocalId = (NonFungibleLocalId) o;
    return Objects.equals(this.simpleRep, nonFungibleLocalId.simpleRep) &&
        Objects.equals(this.idType, nonFungibleLocalId.idType) &&
        Objects.equals(this.sborHex, nonFungibleLocalId.sborHex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(simpleRep, idType, sborHex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NonFungibleLocalId {\n");
    sb.append("    simpleRep: ").append(toIndentedString(simpleRep)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    sborHex: ").append(toIndentedString(sborHex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

