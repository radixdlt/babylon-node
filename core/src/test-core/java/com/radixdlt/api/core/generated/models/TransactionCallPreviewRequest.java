/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.TransactionCallPreviewRequestTarget;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TransactionCallPreviewRequest
 */
@JsonPropertyOrder({
  TransactionCallPreviewRequest.JSON_PROPERTY_TARGET,
  TransactionCallPreviewRequest.JSON_PROPERTY_ARGUMENTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionCallPreviewRequest {
  public static final String JSON_PROPERTY_TARGET = "target";
  private TransactionCallPreviewRequestTarget target;

  public static final String JSON_PROPERTY_ARGUMENTS = "arguments";
  private List<String> arguments = new ArrayList<>();

  public TransactionCallPreviewRequest() { 
  }

  public TransactionCallPreviewRequest target(TransactionCallPreviewRequestTarget target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransactionCallPreviewRequestTarget getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTarget(TransactionCallPreviewRequestTarget target) {
    this.target = target;
  }


  public TransactionCallPreviewRequest arguments(List<String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public TransactionCallPreviewRequest addArgumentsItem(String argumentsItem) {
    this.arguments.add(argumentsItem);
    return this;
  }

   /**
   * Argument list
   * @return arguments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Argument list")
  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getArguments() {
    return arguments;
  }


  @JsonProperty(JSON_PROPERTY_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }


  /**
   * Return true if this TransactionCallPreviewRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCallPreviewRequest transactionCallPreviewRequest = (TransactionCallPreviewRequest) o;
    return Objects.equals(this.target, transactionCallPreviewRequest.target) &&
        Objects.equals(this.arguments, transactionCallPreviewRequest.arguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, arguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCallPreviewRequest {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

