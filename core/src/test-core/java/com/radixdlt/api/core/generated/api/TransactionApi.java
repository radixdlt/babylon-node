/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.core.generated.api;

import com.radixdlt.api.core.generated.client.ApiClient;
import com.radixdlt.api.core.generated.client.ApiException;
import com.radixdlt.api.core.generated.client.ApiResponse;
import com.radixdlt.api.core.generated.client.Pair;

import com.radixdlt.api.core.generated.models.CommittedTransactionsRequest;
import com.radixdlt.api.core.generated.models.CommittedTransactionsResponse;
import com.radixdlt.api.core.generated.models.ErrorResponse;
import com.radixdlt.api.core.generated.models.TransactionCallPreviewRequest;
import com.radixdlt.api.core.generated.models.TransactionCallPreviewResponse;
import com.radixdlt.api.core.generated.models.TransactionParseRequest;
import com.radixdlt.api.core.generated.models.TransactionParseResponse;
import com.radixdlt.api.core.generated.models.TransactionPreviewRequest;
import com.radixdlt.api.core.generated.models.TransactionPreviewResponse;
import com.radixdlt.api.core.generated.models.TransactionSubmitRequest;
import com.radixdlt.api.core.generated.models.TransactionSubmitResponse;
import com.radixdlt.api.core.generated.models.V0CommittedTransactionRequest;
import com.radixdlt.api.core.generated.models.V0CommittedTransactionResponse;
import com.radixdlt.api.core.generated.models.V0TransactionStatusRequest;
import com.radixdlt.api.core.generated.models.V0TransactionStatusResponse;
import com.radixdlt.api.core.generated.models.V0TransactionSubmitRequest;
import com.radixdlt.api.core.generated.models.V0TransactionSubmitResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TransactionApi() {
    this(new ApiClient());
  }

  public TransactionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Preview a scrypto function or method call against the latest network state
   * Returns the result of the scrypto function or method call
   * @param transactionCallPreviewRequest  (required)
   * @return TransactionCallPreviewResponse
   * @throws ApiException if fails to make API call
   */
  public TransactionCallPreviewResponse transactionCallPreviewPost(TransactionCallPreviewRequest transactionCallPreviewRequest) throws ApiException {
    ApiResponse<TransactionCallPreviewResponse> localVarResponse = transactionCallPreviewPostWithHttpInfo(transactionCallPreviewRequest);
    return localVarResponse.getData();
  }

  /**
   * Preview a scrypto function or method call against the latest network state
   * Returns the result of the scrypto function or method call
   * @param transactionCallPreviewRequest  (required)
   * @return ApiResponse&lt;TransactionCallPreviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TransactionCallPreviewResponse> transactionCallPreviewPostWithHttpInfo(TransactionCallPreviewRequest transactionCallPreviewRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionCallPreviewPostRequestBuilder(transactionCallPreviewRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("transactionCallPreviewPost", localVarResponse);
        }
        return new ApiResponse<TransactionCallPreviewResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TransactionCallPreviewResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionCallPreviewPostRequestBuilder(TransactionCallPreviewRequest transactionCallPreviewRequest) throws ApiException {
    // verify the required parameter 'transactionCallPreviewRequest' is set
    if (transactionCallPreviewRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'transactionCallPreviewRequest' when calling transactionCallPreviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/call-preview";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(transactionCallPreviewRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Parse a transaction payload
   * Returns the contents and hashes of a notarized transaction, signed transaction or transaction intent.
   * @param transactionParseRequest  (required)
   * @return TransactionParseResponse
   * @throws ApiException if fails to make API call
   */
  public TransactionParseResponse transactionParsePost(TransactionParseRequest transactionParseRequest) throws ApiException {
    ApiResponse<TransactionParseResponse> localVarResponse = transactionParsePostWithHttpInfo(transactionParseRequest);
    return localVarResponse.getData();
  }

  /**
   * Parse a transaction payload
   * Returns the contents and hashes of a notarized transaction, signed transaction or transaction intent.
   * @param transactionParseRequest  (required)
   * @return ApiResponse&lt;TransactionParseResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TransactionParseResponse> transactionParsePostWithHttpInfo(TransactionParseRequest transactionParseRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionParsePostRequestBuilder(transactionParseRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("transactionParsePost", localVarResponse);
        }
        return new ApiResponse<TransactionParseResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TransactionParseResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionParsePostRequestBuilder(TransactionParseRequest transactionParseRequest) throws ApiException {
    // verify the required parameter 'transactionParseRequest' is set
    if (transactionParseRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'transactionParseRequest' when calling transactionParsePost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/parse";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(transactionParseRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Preview a transaction against the latest network state
   * Returns the preview response
   * @param transactionPreviewRequest  (required)
   * @return TransactionPreviewResponse
   * @throws ApiException if fails to make API call
   */
  public TransactionPreviewResponse transactionPreviewPost(TransactionPreviewRequest transactionPreviewRequest) throws ApiException {
    ApiResponse<TransactionPreviewResponse> localVarResponse = transactionPreviewPostWithHttpInfo(transactionPreviewRequest);
    return localVarResponse.getData();
  }

  /**
   * Preview a transaction against the latest network state
   * Returns the preview response
   * @param transactionPreviewRequest  (required)
   * @return ApiResponse&lt;TransactionPreviewResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TransactionPreviewResponse> transactionPreviewPostWithHttpInfo(TransactionPreviewRequest transactionPreviewRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionPreviewPostRequestBuilder(transactionPreviewRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("transactionPreviewPost", localVarResponse);
        }
        return new ApiResponse<TransactionPreviewResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TransactionPreviewResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionPreviewPostRequestBuilder(TransactionPreviewRequest transactionPreviewRequest) throws ApiException {
    // verify the required parameter 'transactionPreviewRequest' is set
    if (transactionPreviewRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'transactionPreviewRequest' when calling transactionPreviewPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/preview";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(transactionPreviewRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get committed transactions
   * 
   * @param committedTransactionsRequest  (required)
   * @return CommittedTransactionsResponse
   * @throws ApiException if fails to make API call
   */
  public CommittedTransactionsResponse transactionStreamPost(CommittedTransactionsRequest committedTransactionsRequest) throws ApiException {
    ApiResponse<CommittedTransactionsResponse> localVarResponse = transactionStreamPostWithHttpInfo(committedTransactionsRequest);
    return localVarResponse.getData();
  }

  /**
   * Get committed transactions
   * 
   * @param committedTransactionsRequest  (required)
   * @return ApiResponse&lt;CommittedTransactionsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CommittedTransactionsResponse> transactionStreamPostWithHttpInfo(CommittedTransactionsRequest committedTransactionsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionStreamPostRequestBuilder(committedTransactionsRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("transactionStreamPost", localVarResponse);
        }
        return new ApiResponse<CommittedTransactionsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CommittedTransactionsResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionStreamPostRequestBuilder(CommittedTransactionsRequest committedTransactionsRequest) throws ApiException {
    // verify the required parameter 'committedTransactionsRequest' is set
    if (committedTransactionsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'committedTransactionsRequest' when calling transactionStreamPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/stream";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(committedTransactionsRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Submit transaction to the network
   * Returns whether the transaction submission was accepted.
   * @param transactionSubmitRequest  (required)
   * @return TransactionSubmitResponse
   * @throws ApiException if fails to make API call
   */
  public TransactionSubmitResponse transactionSubmitPost(TransactionSubmitRequest transactionSubmitRequest) throws ApiException {
    ApiResponse<TransactionSubmitResponse> localVarResponse = transactionSubmitPostWithHttpInfo(transactionSubmitRequest);
    return localVarResponse.getData();
  }

  /**
   * Submit transaction to the network
   * Returns whether the transaction submission was accepted.
   * @param transactionSubmitRequest  (required)
   * @return ApiResponse&lt;TransactionSubmitResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TransactionSubmitResponse> transactionSubmitPostWithHttpInfo(TransactionSubmitRequest transactionSubmitRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transactionSubmitPostRequestBuilder(transactionSubmitRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("transactionSubmitPost", localVarResponse);
        }
        return new ApiResponse<TransactionSubmitResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TransactionSubmitResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transactionSubmitPostRequestBuilder(TransactionSubmitRequest transactionSubmitRequest) throws ApiException {
    // verify the required parameter 'transactionSubmitRequest' is set
    if (transactionSubmitRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'transactionSubmitRequest' when calling transactionSubmitPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/transaction/submit";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(transactionSubmitRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Read Committed Transaction
   * 
   * @param v0CommittedTransactionRequest  (required)
   * @return V0CommittedTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public V0CommittedTransactionResponse v0TransactionReceiptPost(V0CommittedTransactionRequest v0CommittedTransactionRequest) throws ApiException {
    ApiResponse<V0CommittedTransactionResponse> localVarResponse = v0TransactionReceiptPostWithHttpInfo(v0CommittedTransactionRequest);
    return localVarResponse.getData();
  }

  /**
   * Read Committed Transaction
   * 
   * @param v0CommittedTransactionRequest  (required)
   * @return ApiResponse&lt;V0CommittedTransactionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<V0CommittedTransactionResponse> v0TransactionReceiptPostWithHttpInfo(V0CommittedTransactionRequest v0CommittedTransactionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = v0TransactionReceiptPostRequestBuilder(v0CommittedTransactionRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("v0TransactionReceiptPost", localVarResponse);
        }
        return new ApiResponse<V0CommittedTransactionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<V0CommittedTransactionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder v0TransactionReceiptPostRequestBuilder(V0CommittedTransactionRequest v0CommittedTransactionRequest) throws ApiException {
    // verify the required parameter 'v0CommittedTransactionRequest' is set
    if (v0CommittedTransactionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'v0CommittedTransactionRequest' when calling v0TransactionReceiptPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v0/transaction/receipt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(v0CommittedTransactionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Read Transaction Status
   * 
   * @param v0TransactionStatusRequest  (required)
   * @return V0TransactionStatusResponse
   * @throws ApiException if fails to make API call
   */
  public V0TransactionStatusResponse v0TransactionStatusPost(V0TransactionStatusRequest v0TransactionStatusRequest) throws ApiException {
    ApiResponse<V0TransactionStatusResponse> localVarResponse = v0TransactionStatusPostWithHttpInfo(v0TransactionStatusRequest);
    return localVarResponse.getData();
  }

  /**
   * Read Transaction Status
   * 
   * @param v0TransactionStatusRequest  (required)
   * @return ApiResponse&lt;V0TransactionStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<V0TransactionStatusResponse> v0TransactionStatusPostWithHttpInfo(V0TransactionStatusRequest v0TransactionStatusRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = v0TransactionStatusPostRequestBuilder(v0TransactionStatusRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("v0TransactionStatusPost", localVarResponse);
        }
        return new ApiResponse<V0TransactionStatusResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<V0TransactionStatusResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder v0TransactionStatusPostRequestBuilder(V0TransactionStatusRequest v0TransactionStatusRequest) throws ApiException {
    // verify the required parameter 'v0TransactionStatusRequest' is set
    if (v0TransactionStatusRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'v0TransactionStatusRequest' when calling v0TransactionStatusPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v0/transaction/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(v0TransactionStatusRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Transaction Submit
   * 
   * @param v0TransactionSubmitRequest  (required)
   * @return V0TransactionSubmitResponse
   * @throws ApiException if fails to make API call
   */
  public V0TransactionSubmitResponse v0TransactionSubmitPost(V0TransactionSubmitRequest v0TransactionSubmitRequest) throws ApiException {
    ApiResponse<V0TransactionSubmitResponse> localVarResponse = v0TransactionSubmitPostWithHttpInfo(v0TransactionSubmitRequest);
    return localVarResponse.getData();
  }

  /**
   * Transaction Submit
   * 
   * @param v0TransactionSubmitRequest  (required)
   * @return ApiResponse&lt;V0TransactionSubmitResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<V0TransactionSubmitResponse> v0TransactionSubmitPostWithHttpInfo(V0TransactionSubmitRequest v0TransactionSubmitRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = v0TransactionSubmitPostRequestBuilder(v0TransactionSubmitRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("v0TransactionSubmitPost", localVarResponse);
        }
        return new ApiResponse<V0TransactionSubmitResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<V0TransactionSubmitResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder v0TransactionSubmitPostRequestBuilder(V0TransactionSubmitRequest v0TransactionSubmitRequest) throws ApiException {
    // verify the required parameter 'v0TransactionSubmitRequest' is set
    if (v0TransactionSubmitRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'v0TransactionSubmitRequest' when calling v0TransactionSubmitPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v0/transaction/submit";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(v0TransactionSubmitRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
