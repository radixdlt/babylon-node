/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.Substate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * V0StateNonFungibleResponse
 */
@JsonPropertyOrder({
  V0StateNonFungibleResponse.JSON_PROPERTY_NON_FUNGIBLE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class V0StateNonFungibleResponse {
  public static final String JSON_PROPERTY_NON_FUNGIBLE = "non_fungible";
  private Substate nonFungible;

  public V0StateNonFungibleResponse() { 
  }

  public V0StateNonFungibleResponse nonFungible(Substate nonFungible) {
    this.nonFungible = nonFungible;
    return this;
  }

   /**
   * Get nonFungible
   * @return nonFungible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Substate getNonFungible() {
    return nonFungible;
  }


  @JsonProperty(JSON_PROPERTY_NON_FUNGIBLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonFungible(Substate nonFungible) {
    this.nonFungible = nonFungible;
  }


  /**
   * Return true if this V0StateNonFungibleResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V0StateNonFungibleResponse v0StateNonFungibleResponse = (V0StateNonFungibleResponse) o;
    return Objects.equals(this.nonFungible, v0StateNonFungibleResponse.nonFungible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonFungible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V0StateNonFungibleResponse {\n");
    sb.append("    nonFungible: ").append(toIndentedString(nonFungible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

