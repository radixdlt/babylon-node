/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.EntityReference;
import com.radixdlt.api.core.generated.models.SubstateId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * StateComponentDescendentId
 */
@JsonPropertyOrder({
  StateComponentDescendentId.JSON_PROPERTY_PARENT,
  StateComponentDescendentId.JSON_PROPERTY_ENTITY,
  StateComponentDescendentId.JSON_PROPERTY_DEPTH
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StateComponentDescendentId {
  public static final String JSON_PROPERTY_PARENT = "parent";
  private SubstateId parent;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private EntityReference entity;

  public static final String JSON_PROPERTY_DEPTH = "depth";
  private Integer depth;

  public StateComponentDescendentId() { 
  }

  public StateComponentDescendentId parent(SubstateId parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateId getParent() {
    return parent;
  }


  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParent(SubstateId parent) {
    this.parent = parent;
  }


  public StateComponentDescendentId entity(EntityReference entity) {
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityReference getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntity(EntityReference entity) {
    this.entity = entity;
  }


  public StateComponentDescendentId depth(Integer depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Depth under component
   * minimum: 0
   * maximum: 100
   * @return depth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Depth under component")
  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDepth() {
    return depth;
  }


  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDepth(Integer depth) {
    this.depth = depth;
  }


  /**
   * Return true if this StateComponentDescendentId object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StateComponentDescendentId stateComponentDescendentId = (StateComponentDescendentId) o;
    return Objects.equals(this.parent, stateComponentDescendentId.parent) &&
        Objects.equals(this.entity, stateComponentDescendentId.entity) &&
        Objects.equals(this.depth, stateComponentDescendentId.depth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parent, entity, depth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StateComponentDescendentId {\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

