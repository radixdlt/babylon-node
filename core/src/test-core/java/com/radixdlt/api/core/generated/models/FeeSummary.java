/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Fees paid
 */
@ApiModel(description = "Fees paid")
@JsonPropertyOrder({
  FeeSummary.JSON_PROPERTY_LOAN_FULLY_REPAID,
  FeeSummary.JSON_PROPERTY_COST_UNIT_LIMIT,
  FeeSummary.JSON_PROPERTY_COST_UNITS_CONSUMED,
  FeeSummary.JSON_PROPERTY_COST_UNIT_PRICE,
  FeeSummary.JSON_PROPERTY_TIP_PERCENTAGE,
  FeeSummary.JSON_PROPERTY_XRD_BURNED,
  FeeSummary.JSON_PROPERTY_XRD_TIPPED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FeeSummary {
  public static final String JSON_PROPERTY_LOAN_FULLY_REPAID = "loan_fully_repaid";
  private Boolean loanFullyRepaid;

  public static final String JSON_PROPERTY_COST_UNIT_LIMIT = "cost_unit_limit";
  private Long costUnitLimit;

  public static final String JSON_PROPERTY_COST_UNITS_CONSUMED = "cost_units_consumed";
  private Long costUnitsConsumed;

  public static final String JSON_PROPERTY_COST_UNIT_PRICE = "cost_unit_price";
  private String costUnitPrice;

  public static final String JSON_PROPERTY_TIP_PERCENTAGE = "tip_percentage";
  private Long tipPercentage;

  public static final String JSON_PROPERTY_XRD_BURNED = "xrd_burned";
  private String xrdBurned;

  public static final String JSON_PROPERTY_XRD_TIPPED = "xrd_tipped";
  private String xrdTipped;

  public FeeSummary() { 
  }

  public FeeSummary loanFullyRepaid(Boolean loanFullyRepaid) {
    this.loanFullyRepaid = loanFullyRepaid;
    return this;
  }

   /**
   * Specifies whether the transaction execution loan has been fully repaid.
   * @return loanFullyRepaid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies whether the transaction execution loan has been fully repaid.")
  @JsonProperty(JSON_PROPERTY_LOAN_FULLY_REPAID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLoanFullyRepaid() {
    return loanFullyRepaid;
  }


  @JsonProperty(JSON_PROPERTY_LOAN_FULLY_REPAID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLoanFullyRepaid(Boolean loanFullyRepaid) {
    this.loanFullyRepaid = loanFullyRepaid;
  }


  public FeeSummary costUnitLimit(Long costUnitLimit) {
    this.costUnitLimit = costUnitLimit;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;2^32 - 1&#x60;, representing the maximum amount of cost units available for the transaction execution.
   * minimum: 0
   * maximum: 4294967295
   * @return costUnitLimit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.")
  @JsonProperty(JSON_PROPERTY_COST_UNIT_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCostUnitLimit() {
    return costUnitLimit;
  }


  @JsonProperty(JSON_PROPERTY_COST_UNIT_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCostUnitLimit(Long costUnitLimit) {
    this.costUnitLimit = costUnitLimit;
  }


  public FeeSummary costUnitsConsumed(Long costUnitsConsumed) {
    this.costUnitsConsumed = costUnitsConsumed;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;2^32 - 1&#x60;, representing the amount of cost units consumed by the transaction execution.
   * minimum: 0
   * maximum: 4294967295
   * @return costUnitsConsumed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction execution.")
  @JsonProperty(JSON_PROPERTY_COST_UNITS_CONSUMED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCostUnitsConsumed() {
    return costUnitsConsumed;
  }


  @JsonProperty(JSON_PROPERTY_COST_UNITS_CONSUMED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCostUnitsConsumed(Long costUnitsConsumed) {
    this.costUnitsConsumed = costUnitsConsumed;
  }


  public FeeSummary costUnitPrice(String costUnitPrice) {
    this.costUnitPrice = costUnitPrice;
    return this;
  }

   /**
   * The string-encoded decimal representing the XRD price of a single cost unit. A decimal is formed of some signed integer &#x60;m&#x60; of attos (&#x60;10^(-18)&#x60;) units, where &#x60;-2^(256 - 1) &lt;&#x3D; m &lt; 2^(256 - 1)&#x60;. 
   * @return costUnitPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The string-encoded decimal representing the XRD price of a single cost unit. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. ")
  @JsonProperty(JSON_PROPERTY_COST_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCostUnitPrice() {
    return costUnitPrice;
  }


  @JsonProperty(JSON_PROPERTY_COST_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCostUnitPrice(String costUnitPrice) {
    this.costUnitPrice = costUnitPrice;
  }


  public FeeSummary tipPercentage(Long tipPercentage) {
    this.tipPercentage = tipPercentage;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;2^32 - 1&#x60;, specifying the validator tip as a percentage amount. A value of &#x60;1&#x60; corresponds to 1% of the fee.
   * minimum: 0
   * maximum: 4294967295
   * @return tipPercentage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `2^32 - 1`, specifying the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.")
  @JsonProperty(JSON_PROPERTY_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getTipPercentage() {
    return tipPercentage;
  }


  @JsonProperty(JSON_PROPERTY_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTipPercentage(Long tipPercentage) {
    this.tipPercentage = tipPercentage;
  }


  public FeeSummary xrdBurned(String xrdBurned) {
    this.xrdBurned = xrdBurned;
    return this;
  }

   /**
   * The string-encoded decimal representing the total amount of XRD burned in the transaction. A decimal is formed of some signed integer &#x60;m&#x60; of attos (&#x60;10^(-18)&#x60;) units, where &#x60;-2^(256 - 1) &lt;&#x3D; m &lt; 2^(256 - 1)&#x60;. 
   * @return xrdBurned
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The string-encoded decimal representing the total amount of XRD burned in the transaction. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. ")
  @JsonProperty(JSON_PROPERTY_XRD_BURNED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getXrdBurned() {
    return xrdBurned;
  }


  @JsonProperty(JSON_PROPERTY_XRD_BURNED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setXrdBurned(String xrdBurned) {
    this.xrdBurned = xrdBurned;
  }


  public FeeSummary xrdTipped(String xrdTipped) {
    this.xrdTipped = xrdTipped;
    return this;
  }

   /**
   * The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction. A decimal is formed of some signed integer &#x60;m&#x60; of attos (&#x60;10^(-18)&#x60;) units, where &#x60;-2^(256 - 1) &lt;&#x3D; m &lt; 2^(256 - 1)&#x60;. 
   * @return xrdTipped
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. ")
  @JsonProperty(JSON_PROPERTY_XRD_TIPPED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getXrdTipped() {
    return xrdTipped;
  }


  @JsonProperty(JSON_PROPERTY_XRD_TIPPED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setXrdTipped(String xrdTipped) {
    this.xrdTipped = xrdTipped;
  }


  /**
   * Return true if this FeeSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeSummary feeSummary = (FeeSummary) o;
    return Objects.equals(this.loanFullyRepaid, feeSummary.loanFullyRepaid) &&
        Objects.equals(this.costUnitLimit, feeSummary.costUnitLimit) &&
        Objects.equals(this.costUnitsConsumed, feeSummary.costUnitsConsumed) &&
        Objects.equals(this.costUnitPrice, feeSummary.costUnitPrice) &&
        Objects.equals(this.tipPercentage, feeSummary.tipPercentage) &&
        Objects.equals(this.xrdBurned, feeSummary.xrdBurned) &&
        Objects.equals(this.xrdTipped, feeSummary.xrdTipped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loanFullyRepaid, costUnitLimit, costUnitsConsumed, costUnitPrice, tipPercentage, xrdBurned, xrdTipped);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeSummary {\n");
    sb.append("    loanFullyRepaid: ").append(toIndentedString(loanFullyRepaid)).append("\n");
    sb.append("    costUnitLimit: ").append(toIndentedString(costUnitLimit)).append("\n");
    sb.append("    costUnitsConsumed: ").append(toIndentedString(costUnitsConsumed)).append("\n");
    sb.append("    costUnitPrice: ").append(toIndentedString(costUnitPrice)).append("\n");
    sb.append("    tipPercentage: ").append(toIndentedString(tipPercentage)).append("\n");
    sb.append("    xrdBurned: ").append(toIndentedString(xrdBurned)).append("\n");
    sb.append("    xrdTipped: ").append(toIndentedString(xrdTipped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

