/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.CommittedTransaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CommittedTransactionsResponse
 */
@JsonPropertyOrder({
  CommittedTransactionsResponse.JSON_PROPERTY_FROM_STATE_VERSION,
  CommittedTransactionsResponse.JSON_PROPERTY_COUNT,
  CommittedTransactionsResponse.JSON_PROPERTY_MAX_LEDGER_STATE_VERSION,
  CommittedTransactionsResponse.JSON_PROPERTY_TRANSACTIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommittedTransactionsResponse {
  public static final String JSON_PROPERTY_FROM_STATE_VERSION = "from_state_version";
  private Long fromStateVersion;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_MAX_LEDGER_STATE_VERSION = "max_ledger_state_version";
  private Long maxLedgerStateVersion;

  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  private List<CommittedTransaction> transactions = new ArrayList<>();

  public CommittedTransactionsResponse() { 
  }

  public CommittedTransactionsResponse fromStateVersion(Long fromStateVersion) {
    this.fromStateVersion = fromStateVersion;
    return this;
  }

   /**
   * An integer between &#x60;1&#x60; and &#x60;10^13&#x60;, giving the first (resultant) state version in the returned response (if any). This matches the &#x60;from_state_version&#x60; in the request. 
   * minimum: 1
   * maximum: 100000000000000
   * @return fromStateVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `1` and `10^13`, giving the first (resultant) state version in the returned response (if any). This matches the `from_state_version` in the request. ")
  @JsonProperty(JSON_PROPERTY_FROM_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getFromStateVersion() {
    return fromStateVersion;
  }


  @JsonProperty(JSON_PROPERTY_FROM_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromStateVersion(Long fromStateVersion) {
    this.fromStateVersion = fromStateVersion;
  }


  public CommittedTransactionsResponse count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10000&#x60;, giving the total count of transactions in the returned response
   * minimum: 0
   * maximum: 10000
   * @return count
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10000`, giving the total count of transactions in the returned response")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(Integer count) {
    this.count = count;
  }


  public CommittedTransactionsResponse maxLedgerStateVersion(Long maxLedgerStateVersion) {
    this.maxLedgerStateVersion = maxLedgerStateVersion;
    return this;
  }

   /**
   * An integer between &#x60;1&#x60; and &#x60;10^13&#x60;, giving the maximum state version currently committed on this node&#39;s ledger.
   * minimum: 1
   * maximum: 100000000000000
   * @return maxLedgerStateVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `1` and `10^13`, giving the maximum state version currently committed on this node's ledger.")
  @JsonProperty(JSON_PROPERTY_MAX_LEDGER_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getMaxLedgerStateVersion() {
    return maxLedgerStateVersion;
  }


  @JsonProperty(JSON_PROPERTY_MAX_LEDGER_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxLedgerStateVersion(Long maxLedgerStateVersion) {
    this.maxLedgerStateVersion = maxLedgerStateVersion;
  }


  public CommittedTransactionsResponse transactions(List<CommittedTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public CommittedTransactionsResponse addTransactionsItem(CommittedTransaction transactionsItem) {
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * A committed transactions list starting from the &#x60;from_state_version&#x60; (inclusive).
   * @return transactions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A committed transactions list starting from the `from_state_version` (inclusive).")
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CommittedTransaction> getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactions(List<CommittedTransaction> transactions) {
    this.transactions = transactions;
  }


  /**
   * Return true if this CommittedTransactionsResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommittedTransactionsResponse committedTransactionsResponse = (CommittedTransactionsResponse) o;
    return Objects.equals(this.fromStateVersion, committedTransactionsResponse.fromStateVersion) &&
        Objects.equals(this.count, committedTransactionsResponse.count) &&
        Objects.equals(this.maxLedgerStateVersion, committedTransactionsResponse.maxLedgerStateVersion) &&
        Objects.equals(this.transactions, committedTransactionsResponse.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromStateVersion, count, maxLedgerStateVersion, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommittedTransactionsResponse {\n");
    sb.append("    fromStateVersion: ").append(toIndentedString(fromStateVersion)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    maxLedgerStateVersion: ").append(toIndentedString(maxLedgerStateVersion)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

