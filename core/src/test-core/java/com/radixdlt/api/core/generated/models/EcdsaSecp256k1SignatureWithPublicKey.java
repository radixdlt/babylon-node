/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.EcdsaSecp256k1Signature;
import com.radixdlt.api.core.generated.models.PublicKeyType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Because ECDSA has recoverable signatures, this only includes a signature
 */
@ApiModel(description = "Because ECDSA has recoverable signatures, this only includes a signature")
@JsonPropertyOrder({
  EcdsaSecp256k1SignatureWithPublicKey.JSON_PROPERTY_KEY_TYPE,
  EcdsaSecp256k1SignatureWithPublicKey.JSON_PROPERTY_RECOVERABLE_SIGNATURE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EcdsaSecp256k1SignatureWithPublicKey {
  public static final String JSON_PROPERTY_KEY_TYPE = "key_type";
  private PublicKeyType keyType;

  public static final String JSON_PROPERTY_RECOVERABLE_SIGNATURE = "recoverable_signature";
  private EcdsaSecp256k1Signature recoverableSignature;

  public EcdsaSecp256k1SignatureWithPublicKey() { 
  }

  public EcdsaSecp256k1SignatureWithPublicKey keyType(PublicKeyType keyType) {
    this.keyType = keyType;
    return this;
  }

   /**
   * Get keyType
   * @return keyType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PublicKeyType getKeyType() {
    return keyType;
  }


  @JsonProperty(JSON_PROPERTY_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKeyType(PublicKeyType keyType) {
    this.keyType = keyType;
  }


  public EcdsaSecp256k1SignatureWithPublicKey recoverableSignature(EcdsaSecp256k1Signature recoverableSignature) {
    this.recoverableSignature = recoverableSignature;
    return this;
  }

   /**
   * Get recoverableSignature
   * @return recoverableSignature
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_RECOVERABLE_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EcdsaSecp256k1Signature getRecoverableSignature() {
    return recoverableSignature;
  }


  @JsonProperty(JSON_PROPERTY_RECOVERABLE_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecoverableSignature(EcdsaSecp256k1Signature recoverableSignature) {
    this.recoverableSignature = recoverableSignature;
  }


  /**
   * Return true if this EcdsaSecp256k1SignatureWithPublicKey object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcdsaSecp256k1SignatureWithPublicKey ecdsaSecp256k1SignatureWithPublicKey = (EcdsaSecp256k1SignatureWithPublicKey) o;
    return Objects.equals(this.keyType, ecdsaSecp256k1SignatureWithPublicKey.keyType) &&
        Objects.equals(this.recoverableSignature, ecdsaSecp256k1SignatureWithPublicKey.recoverableSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyType, recoverableSignature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcdsaSecp256k1SignatureWithPublicKey {\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    recoverableSignature: ").append(toIndentedString(recoverableSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

