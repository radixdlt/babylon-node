/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.SborFormatOptions;
import com.radixdlt.api.core.generated.models.SubstateFormatOptions;
import com.radixdlt.api.core.generated.models.TransactionFormatOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A request to retrieve a sublist of committed transactions from the ledger. 
 */
@ApiModel(description = "A request to retrieve a sublist of committed transactions from the ledger. ")
@JsonPropertyOrder({
  StreamTransactionsRequest.JSON_PROPERTY_NETWORK,
  StreamTransactionsRequest.JSON_PROPERTY_FROM_STATE_VERSION,
  StreamTransactionsRequest.JSON_PROPERTY_LIMIT,
  StreamTransactionsRequest.JSON_PROPERTY_SBOR_FORMAT_OPTIONS,
  StreamTransactionsRequest.JSON_PROPERTY_TRANSACTION_FORMAT_OPTIONS,
  StreamTransactionsRequest.JSON_PROPERTY_SUBSTATE_FORMAT_OPTIONS,
  StreamTransactionsRequest.JSON_PROPERTY_INCLUDE_PROOFS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StreamTransactionsRequest {
  public static final String JSON_PROPERTY_NETWORK = "network";
  private String network;

  public static final String JSON_PROPERTY_FROM_STATE_VERSION = "from_state_version";
  private Long fromStateVersion;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Integer limit;

  public static final String JSON_PROPERTY_SBOR_FORMAT_OPTIONS = "sbor_format_options";
  private SborFormatOptions sborFormatOptions;

  public static final String JSON_PROPERTY_TRANSACTION_FORMAT_OPTIONS = "transaction_format_options";
  private TransactionFormatOptions transactionFormatOptions;

  public static final String JSON_PROPERTY_SUBSTATE_FORMAT_OPTIONS = "substate_format_options";
  private SubstateFormatOptions substateFormatOptions;

  public static final String JSON_PROPERTY_INCLUDE_PROOFS = "include_proofs";
  private Boolean includeProofs;

  public StreamTransactionsRequest() { 
  }

  public StreamTransactionsRequest network(String network) {
    this.network = network;
    return this;
  }

   /**
   * The logical name of the network
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{{network}}", required = true, value = "The logical name of the network")
  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNetwork() {
    return network;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetwork(String network) {
    this.network = network;
  }


  public StreamTransactionsRequest fromStateVersion(Long fromStateVersion) {
    this.fromStateVersion = fromStateVersion;
    return this;
  }

   /**
   * Get fromStateVersion
   * minimum: 1
   * maximum: 100000000000000
   * @return fromStateVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FROM_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getFromStateVersion() {
    return fromStateVersion;
  }


  @JsonProperty(JSON_PROPERTY_FROM_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromStateVersion(Long fromStateVersion) {
    this.fromStateVersion = fromStateVersion;
  }


  public StreamTransactionsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum number of transactions that will be returned.
   * @return limit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The maximum number of transactions that will be returned.")
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public StreamTransactionsRequest sborFormatOptions(SborFormatOptions sborFormatOptions) {
    this.sborFormatOptions = sborFormatOptions;
    return this;
  }

   /**
   * Get sborFormatOptions
   * @return sborFormatOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SBOR_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SborFormatOptions getSborFormatOptions() {
    return sborFormatOptions;
  }


  @JsonProperty(JSON_PROPERTY_SBOR_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSborFormatOptions(SborFormatOptions sborFormatOptions) {
    this.sborFormatOptions = sborFormatOptions;
  }


  public StreamTransactionsRequest transactionFormatOptions(TransactionFormatOptions transactionFormatOptions) {
    this.transactionFormatOptions = transactionFormatOptions;
    return this;
  }

   /**
   * Get transactionFormatOptions
   * @return transactionFormatOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionFormatOptions getTransactionFormatOptions() {
    return transactionFormatOptions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionFormatOptions(TransactionFormatOptions transactionFormatOptions) {
    this.transactionFormatOptions = transactionFormatOptions;
  }


  public StreamTransactionsRequest substateFormatOptions(SubstateFormatOptions substateFormatOptions) {
    this.substateFormatOptions = substateFormatOptions;
    return this;
  }

   /**
   * Get substateFormatOptions
   * @return substateFormatOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SubstateFormatOptions getSubstateFormatOptions() {
    return substateFormatOptions;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubstateFormatOptions(SubstateFormatOptions substateFormatOptions) {
    this.substateFormatOptions = substateFormatOptions;
  }


  public StreamTransactionsRequest includeProofs(Boolean includeProofs) {
    this.includeProofs = includeProofs;
    return this;
  }

   /**
   * Whether to include LedgerProofs (default false)
   * @return includeProofs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to include LedgerProofs (default false)")
  @JsonProperty(JSON_PROPERTY_INCLUDE_PROOFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeProofs() {
    return includeProofs;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_PROOFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeProofs(Boolean includeProofs) {
    this.includeProofs = includeProofs;
  }


  /**
   * Return true if this StreamTransactionsRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTransactionsRequest streamTransactionsRequest = (StreamTransactionsRequest) o;
    return Objects.equals(this.network, streamTransactionsRequest.network) &&
        Objects.equals(this.fromStateVersion, streamTransactionsRequest.fromStateVersion) &&
        Objects.equals(this.limit, streamTransactionsRequest.limit) &&
        Objects.equals(this.sborFormatOptions, streamTransactionsRequest.sborFormatOptions) &&
        Objects.equals(this.transactionFormatOptions, streamTransactionsRequest.transactionFormatOptions) &&
        Objects.equals(this.substateFormatOptions, streamTransactionsRequest.substateFormatOptions) &&
        Objects.equals(this.includeProofs, streamTransactionsRequest.includeProofs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, fromStateVersion, limit, sborFormatOptions, transactionFormatOptions, substateFormatOptions, includeProofs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTransactionsRequest {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    fromStateVersion: ").append(toIndentedString(fromStateVersion)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    sborFormatOptions: ").append(toIndentedString(sborFormatOptions)).append("\n");
    sb.append("    transactionFormatOptions: ").append(toIndentedString(transactionFormatOptions)).append("\n");
    sb.append("    substateFormatOptions: ").append(toIndentedString(substateFormatOptions)).append("\n");
    sb.append("    includeProofs: ").append(toIndentedString(includeProofs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

