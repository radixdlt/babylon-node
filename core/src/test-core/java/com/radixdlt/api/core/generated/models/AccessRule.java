/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.AccessRuleNode;
import com.radixdlt.api.core.generated.models.AccessRuleType;
import com.radixdlt.api.core.generated.models.AllowAllAccessRule;
import com.radixdlt.api.core.generated.models.DenyAllAccessRule;
import com.radixdlt.api.core.generated.models.ProtectedAccessRule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.radixdlt.api.core.generated.client.JSON;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using=AccessRule.AccessRuleDeserializer.class)
@JsonSerialize(using = AccessRule.AccessRuleSerializer.class)
public class AccessRule extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccessRule.class.getName());

    public static class AccessRuleSerializer extends StdSerializer<AccessRule> {
        public AccessRuleSerializer(Class<AccessRule> t) {
            super(t);
        }

        public AccessRuleSerializer() {
            this(null);
        }

        @Override
        public void serialize(AccessRule value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AccessRuleDeserializer extends StdDeserializer<AccessRule> {
        public AccessRuleDeserializer() {
            this(AccessRule.class);
        }

        public AccessRuleDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AccessRule deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            Class<?> cls = JSON.getClassForElement(tree, AccessRule.class);
            if (cls != null) {
                // When the OAS schema includes a discriminator, use the discriminator value to
                // discriminate the anyOf schemas.
                // Get the discriminator mapping value to get the class.
                deserialized = tree.traverse(jp.getCodec()).readValueAs(cls);
                AccessRule ret = new AccessRule();
                ret.setActualInstance(deserialized);
                return ret;
            }
            // deserialize AllowAllAccessRule
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(AllowAllAccessRule.class);
                AccessRule ret = new AccessRule();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'AccessRule'", e);
            }

            // deserialize DenyAllAccessRule
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(DenyAllAccessRule.class);
                AccessRule ret = new AccessRule();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'AccessRule'", e);
            }

            // deserialize ProtectedAccessRule
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ProtectedAccessRule.class);
                AccessRule ret = new AccessRule();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'AccessRule'", e);
            }

            throw new IOException(String.format("Failed deserialization for AccessRule: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public AccessRule getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "AccessRule cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AccessRule() {
        super("anyOf", Boolean.FALSE);
    }

    public AccessRule(AllowAllAccessRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(DenyAllAccessRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(ProtectedAccessRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AllowAllAccessRule", AllowAllAccessRule.class);
        schemas.put("DenyAllAccessRule", DenyAllAccessRule.class);
        schemas.put("ProtectedAccessRule", ProtectedAccessRule.class);
        JSON.registerDescendants(AccessRule.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("AllowAll", AllowAllAccessRule.class);
        mappings.put("AllowAllAccessRule", AllowAllAccessRule.class);
        mappings.put("DenyAll", DenyAllAccessRule.class);
        mappings.put("DenyAllAccessRule", DenyAllAccessRule.class);
        mappings.put("Protected", ProtectedAccessRule.class);
        mappings.put("ProtectedAccessRule", ProtectedAccessRule.class);
        mappings.put("AccessRule", AccessRule.class);
        JSON.registerDiscriminator(AccessRule.class, "type", mappings);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccessRule.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AllowAllAccessRule, DenyAllAccessRule, ProtectedAccessRule
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AllowAllAccessRule.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(DenyAllAccessRule.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ProtectedAccessRule.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AllowAllAccessRule, DenyAllAccessRule, ProtectedAccessRule");
    }

    /**
     * Get the actual instance, which can be the following:
     * AllowAllAccessRule, DenyAllAccessRule, ProtectedAccessRule
     *
     * @return The actual instance (AllowAllAccessRule, DenyAllAccessRule, ProtectedAccessRule)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AllowAllAccessRule`. If the actual instance is not `AllowAllAccessRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AllowAllAccessRule`
     * @throws ClassCastException if the instance is not `AllowAllAccessRule`
     */
    public AllowAllAccessRule getAllowAllAccessRule() throws ClassCastException {
        return (AllowAllAccessRule)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DenyAllAccessRule`. If the actual instance is not `DenyAllAccessRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DenyAllAccessRule`
     * @throws ClassCastException if the instance is not `DenyAllAccessRule`
     */
    public DenyAllAccessRule getDenyAllAccessRule() throws ClassCastException {
        return (DenyAllAccessRule)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ProtectedAccessRule`. If the actual instance is not `ProtectedAccessRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProtectedAccessRule`
     * @throws ClassCastException if the instance is not `ProtectedAccessRule`
     */
    public ProtectedAccessRule getProtectedAccessRule() throws ClassCastException {
        return (ProtectedAccessRule)super.getActualInstance();
    }

}

