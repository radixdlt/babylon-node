/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.EntityType;
import com.radixdlt.api.core.generated.models.ModuleType;
import com.radixdlt.api.core.generated.models.SubstateKeyType;
import com.radixdlt.api.core.generated.models.SubstateType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SubstateId
 */
@JsonPropertyOrder({
  SubstateId.JSON_PROPERTY_ENTITY_TYPE,
  SubstateId.JSON_PROPERTY_ENTITY_ID_HEX,
  SubstateId.JSON_PROPERTY_MODULE_TYPE,
  SubstateId.JSON_PROPERTY_SUBSTATE_TYPE,
  SubstateId.JSON_PROPERTY_SUBSTATE_KEY_TYPE,
  SubstateId.JSON_PROPERTY_SUBSTATE_KEY_HEX
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubstateId {
  public static final String JSON_PROPERTY_ENTITY_TYPE = "entity_type";
  private EntityType entityType;

  public static final String JSON_PROPERTY_ENTITY_ID_HEX = "entity_id_hex";
  private String entityIdHex;

  public static final String JSON_PROPERTY_MODULE_TYPE = "module_type";
  private ModuleType moduleType;

  public static final String JSON_PROPERTY_SUBSTATE_TYPE = "substate_type";
  private SubstateType substateType;

  public static final String JSON_PROPERTY_SUBSTATE_KEY_TYPE = "substate_key_type";
  private SubstateKeyType substateKeyType;

  public static final String JSON_PROPERTY_SUBSTATE_KEY_HEX = "substate_key_hex";
  private String substateKeyHex;

  public SubstateId() { 
  }

  public SubstateId entityType(EntityType entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityType getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }


  public SubstateId entityIdHex(String entityIdHex) {
    this.entityIdHex = entityIdHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the entity id
   * @return entityIdHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded bytes of the entity id")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEntityIdHex() {
    return entityIdHex;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ID_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityIdHex(String entityIdHex) {
    this.entityIdHex = entityIdHex;
  }


  public SubstateId moduleType(ModuleType moduleType) {
    this.moduleType = moduleType;
    return this;
  }

   /**
   * Get moduleType
   * @return moduleType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ModuleType getModuleType() {
    return moduleType;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModuleType(ModuleType moduleType) {
    this.moduleType = moduleType;
  }


  public SubstateId substateType(SubstateType substateType) {
    this.substateType = substateType;
    return this;
  }

   /**
   * Get substateType
   * @return substateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateType getSubstateType() {
    return substateType;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateType(SubstateType substateType) {
    this.substateType = substateType;
  }


  public SubstateId substateKeyType(SubstateKeyType substateKeyType) {
    this.substateKeyType = substateKeyType;
    return this;
  }

   /**
   * Get substateKeyType
   * @return substateKeyType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateKeyType getSubstateKeyType() {
    return substateKeyType;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateKeyType(SubstateKeyType substateKeyType) {
    this.substateKeyType = substateKeyType;
  }


  public SubstateId substateKeyHex(String substateKeyHex) {
    this.substateKeyHex = substateKeyHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the substate key, under the entity
   * @return substateKeyHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded bytes of the substate key, under the entity")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubstateKeyHex() {
    return substateKeyHex;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateKeyHex(String substateKeyHex) {
    this.substateKeyHex = substateKeyHex;
  }


  /**
   * Return true if this SubstateId object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubstateId substateId = (SubstateId) o;
    return Objects.equals(this.entityType, substateId.entityType) &&
        Objects.equals(this.entityIdHex, substateId.entityIdHex) &&
        Objects.equals(this.moduleType, substateId.moduleType) &&
        Objects.equals(this.substateType, substateId.substateType) &&
        Objects.equals(this.substateKeyType, substateId.substateKeyType) &&
        Objects.equals(this.substateKeyHex, substateId.substateKeyHex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, entityIdHex, moduleType, substateType, substateKeyType, substateKeyHex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubstateId {\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityIdHex: ").append(toIndentedString(entityIdHex)).append("\n");
    sb.append("    moduleType: ").append(toIndentedString(moduleType)).append("\n");
    sb.append("    substateType: ").append(toIndentedString(substateType)).append("\n");
    sb.append("    substateKeyType: ").append(toIndentedString(substateKeyType)).append("\n");
    sb.append("    substateKeyHex: ").append(toIndentedString(substateKeyHex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

