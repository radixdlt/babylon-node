/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.FixedActionAuthRules;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ResourceManagerSubstateAllOfAuthRules
 */
@JsonPropertyOrder({
  ResourceManagerSubstateAllOfAuthRules.JSON_PROPERTY_MINT,
  ResourceManagerSubstateAllOfAuthRules.JSON_PROPERTY_BURN,
  ResourceManagerSubstateAllOfAuthRules.JSON_PROPERTY_WITHDRAW,
  ResourceManagerSubstateAllOfAuthRules.JSON_PROPERTY_DEPOSIT,
  ResourceManagerSubstateAllOfAuthRules.JSON_PROPERTY_UPDATE_METADATA,
  ResourceManagerSubstateAllOfAuthRules.JSON_PROPERTY_UPDATE_NON_FUNGIBLE_DATA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResourceManagerSubstateAllOfAuthRules {
  public static final String JSON_PROPERTY_MINT = "mint";
  private FixedActionAuthRules mint;

  public static final String JSON_PROPERTY_BURN = "burn";
  private FixedActionAuthRules burn;

  public static final String JSON_PROPERTY_WITHDRAW = "withdraw";
  private FixedActionAuthRules withdraw;

  public static final String JSON_PROPERTY_DEPOSIT = "deposit";
  private FixedActionAuthRules deposit;

  public static final String JSON_PROPERTY_UPDATE_METADATA = "update_metadata";
  private FixedActionAuthRules updateMetadata;

  public static final String JSON_PROPERTY_UPDATE_NON_FUNGIBLE_DATA = "update_non_fungible_data";
  private FixedActionAuthRules updateNonFungibleData;

  public ResourceManagerSubstateAllOfAuthRules() { 
  }

  public ResourceManagerSubstateAllOfAuthRules mint(FixedActionAuthRules mint) {
    this.mint = mint;
    return this;
  }

   /**
   * Get mint
   * @return mint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FixedActionAuthRules getMint() {
    return mint;
  }


  @JsonProperty(JSON_PROPERTY_MINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMint(FixedActionAuthRules mint) {
    this.mint = mint;
  }


  public ResourceManagerSubstateAllOfAuthRules burn(FixedActionAuthRules burn) {
    this.burn = burn;
    return this;
  }

   /**
   * Get burn
   * @return burn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BURN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FixedActionAuthRules getBurn() {
    return burn;
  }


  @JsonProperty(JSON_PROPERTY_BURN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBurn(FixedActionAuthRules burn) {
    this.burn = burn;
  }


  public ResourceManagerSubstateAllOfAuthRules withdraw(FixedActionAuthRules withdraw) {
    this.withdraw = withdraw;
    return this;
  }

   /**
   * Get withdraw
   * @return withdraw
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_WITHDRAW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FixedActionAuthRules getWithdraw() {
    return withdraw;
  }


  @JsonProperty(JSON_PROPERTY_WITHDRAW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWithdraw(FixedActionAuthRules withdraw) {
    this.withdraw = withdraw;
  }


  public ResourceManagerSubstateAllOfAuthRules deposit(FixedActionAuthRules deposit) {
    this.deposit = deposit;
    return this;
  }

   /**
   * Get deposit
   * @return deposit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DEPOSIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FixedActionAuthRules getDeposit() {
    return deposit;
  }


  @JsonProperty(JSON_PROPERTY_DEPOSIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeposit(FixedActionAuthRules deposit) {
    this.deposit = deposit;
  }


  public ResourceManagerSubstateAllOfAuthRules updateMetadata(FixedActionAuthRules updateMetadata) {
    this.updateMetadata = updateMetadata;
    return this;
  }

   /**
   * Get updateMetadata
   * @return updateMetadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FixedActionAuthRules getUpdateMetadata() {
    return updateMetadata;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdateMetadata(FixedActionAuthRules updateMetadata) {
    this.updateMetadata = updateMetadata;
  }


  public ResourceManagerSubstateAllOfAuthRules updateNonFungibleData(FixedActionAuthRules updateNonFungibleData) {
    this.updateNonFungibleData = updateNonFungibleData;
    return this;
  }

   /**
   * Get updateNonFungibleData
   * @return updateNonFungibleData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_NON_FUNGIBLE_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FixedActionAuthRules getUpdateNonFungibleData() {
    return updateNonFungibleData;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_NON_FUNGIBLE_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdateNonFungibleData(FixedActionAuthRules updateNonFungibleData) {
    this.updateNonFungibleData = updateNonFungibleData;
  }


  /**
   * Return true if this ResourceManagerSubstate_allOf_auth_rules object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceManagerSubstateAllOfAuthRules resourceManagerSubstateAllOfAuthRules = (ResourceManagerSubstateAllOfAuthRules) o;
    return Objects.equals(this.mint, resourceManagerSubstateAllOfAuthRules.mint) &&
        Objects.equals(this.burn, resourceManagerSubstateAllOfAuthRules.burn) &&
        Objects.equals(this.withdraw, resourceManagerSubstateAllOfAuthRules.withdraw) &&
        Objects.equals(this.deposit, resourceManagerSubstateAllOfAuthRules.deposit) &&
        Objects.equals(this.updateMetadata, resourceManagerSubstateAllOfAuthRules.updateMetadata) &&
        Objects.equals(this.updateNonFungibleData, resourceManagerSubstateAllOfAuthRules.updateNonFungibleData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mint, burn, withdraw, deposit, updateMetadata, updateNonFungibleData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceManagerSubstateAllOfAuthRules {\n");
    sb.append("    mint: ").append(toIndentedString(mint)).append("\n");
    sb.append("    burn: ").append(toIndentedString(burn)).append("\n");
    sb.append("    withdraw: ").append(toIndentedString(withdraw)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("    updateMetadata: ").append(toIndentedString(updateMetadata)).append("\n");
    sb.append("    updateNonFungibleData: ").append(toIndentedString(updateNonFungibleData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

