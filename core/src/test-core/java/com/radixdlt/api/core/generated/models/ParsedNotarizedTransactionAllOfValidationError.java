/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * If the transaction is known to not be valid, this gives a reason. Different levels of validation are performed, dependent on the validation mode. Note that, even if validation mode is Static or Full, the transaction may still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid). 
 */
@ApiModel(description = "If the transaction is known to not be valid, this gives a reason. Different levels of validation are performed, dependent on the validation mode. Note that, even if validation mode is Static or Full, the transaction may still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid). ")
@JsonPropertyOrder({
  ParsedNotarizedTransactionAllOfValidationError.JSON_PROPERTY_REASON,
  ParsedNotarizedTransactionAllOfValidationError.JSON_PROPERTY_IS_PERMANENT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ParsedNotarizedTransactionAllOfValidationError {
  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_IS_PERMANENT = "is_permanent";
  private Boolean isPermanent;

  public ParsedNotarizedTransactionAllOfValidationError() { 
  }

  public ParsedNotarizedTransactionAllOfValidationError reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * The error message. 
   * @return reason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The error message. ")
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReason(String reason) {
    this.reason = reason;
  }


  public ParsedNotarizedTransactionAllOfValidationError isPermanent(Boolean isPermanent) {
    this.isPermanent = isPermanent;
    return this;
  }

   /**
   * Whether the error is known to be permanent, or not. This relates to whether the transaction would be rejected permanently or temporarily if submitted. 
   * @return isPermanent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the error is known to be permanent, or not. This relates to whether the transaction would be rejected permanently or temporarily if submitted. ")
  @JsonProperty(JSON_PROPERTY_IS_PERMANENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsPermanent() {
    return isPermanent;
  }


  @JsonProperty(JSON_PROPERTY_IS_PERMANENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsPermanent(Boolean isPermanent) {
    this.isPermanent = isPermanent;
  }


  /**
   * Return true if this ParsedNotarizedTransaction_allOf_validation_error object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParsedNotarizedTransactionAllOfValidationError parsedNotarizedTransactionAllOfValidationError = (ParsedNotarizedTransactionAllOfValidationError) o;
    return Objects.equals(this.reason, parsedNotarizedTransactionAllOfValidationError.reason) &&
        Objects.equals(this.isPermanent, parsedNotarizedTransactionAllOfValidationError.isPermanent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, isPermanent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParsedNotarizedTransactionAllOfValidationError {\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    isPermanent: ").append(toIndentedString(isPermanent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

