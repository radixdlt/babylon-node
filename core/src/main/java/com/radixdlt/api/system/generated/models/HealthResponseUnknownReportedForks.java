/*
 * Babylon System API
 * This API is exposed by the Babylon Radix node to give clients access to information about the node itself, its configuration, status and subsystems.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against ledger state, you may also wish to consider using the [Core API or Gateway API instead](https://docs-babylon.radixdlt.com/main/apis/api-specification.html). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.system.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * HealthResponseUnknownReportedForks
 */
@JsonPropertyOrder({
  HealthResponseUnknownReportedForks.JSON_PROPERTY_NAME,
  HealthResponseUnknownReportedForks.JSON_PROPERTY_REPORTED_BY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HealthResponseUnknownReportedForks {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_REPORTED_BY = "reported_by";
  private List<String> reportedBy = new ArrayList<>();


  public HealthResponseUnknownReportedForks name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public HealthResponseUnknownReportedForks reportedBy(List<String> reportedBy) {
    this.reportedBy = reportedBy;
    return this;
  }

  public HealthResponseUnknownReportedForks addReportedByItem(String reportedByItem) {
    this.reportedBy.add(reportedByItem);
    return this;
  }

   /**
   * Get reportedBy
   * @return reportedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_REPORTED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getReportedBy() {
    return reportedBy;
  }


  @JsonProperty(JSON_PROPERTY_REPORTED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReportedBy(List<String> reportedBy) {
    this.reportedBy = reportedBy;
  }


  /**
   * Return true if this HealthResponse_unknown_reported_forks object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthResponseUnknownReportedForks healthResponseUnknownReportedForks = (HealthResponseUnknownReportedForks) o;
    return Objects.equals(this.name, healthResponseUnknownReportedForks.name) &&
        Objects.equals(this.reportedBy, healthResponseUnknownReportedForks.reportedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, reportedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthResponseUnknownReportedForks {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reportedBy: ").append(toIndentedString(reportedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

