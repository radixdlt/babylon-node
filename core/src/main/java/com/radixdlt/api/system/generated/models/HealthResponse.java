/*
 * Babylon System API
 * This API is exposed by the Babylon Radix node to give clients access to information about the node itself, its configuration, status and subsystems.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against ledger state, you may also wish to consider using the [Core API or Gateway API instead](https://docs-babylon.radixdlt.com/main/apis/api-specification.html). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.system.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.system.generated.models.ExecutedFork;
import com.radixdlt.api.system.generated.models.HealthResponseUnknownReportedForks;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * HealthResponse
 */
@JsonPropertyOrder({
  HealthResponse.JSON_PROPERTY_STATUS,
  HealthResponse.JSON_PROPERTY_CURRENT_FORK_NAME,
  HealthResponse.JSON_PROPERTY_EXECUTED_FORKS,
  HealthResponse.JSON_PROPERTY_FORK_VOTE_STATUS,
  HealthResponse.JSON_PROPERTY_UNKNOWN_REPORTED_FORKS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HealthResponse {
  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    BOOTING("BOOTING"),
    
    SYNCING("SYNCING"),
    
    UP("UP"),
    
    STALLED("STALLED"),
    
    OUT_OF_SYNC("OUT_OF_SYNC");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CURRENT_FORK_NAME = "current_fork_name";
  private String currentForkName;

  public static final String JSON_PROPERTY_EXECUTED_FORKS = "executed_forks";
  private List<ExecutedFork> executedForks = new ArrayList<>();

  /**
   * Gets or Sets forkVoteStatus
   */
  public enum ForkVoteStatusEnum {
    VOTE_REQUIRED("VOTE_REQUIRED"),
    
    NO_ACTION_NEEDED("NO_ACTION_NEEDED");

    private String value;

    ForkVoteStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ForkVoteStatusEnum fromValue(String value) {
      for (ForkVoteStatusEnum b : ForkVoteStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FORK_VOTE_STATUS = "fork_vote_status";
  private ForkVoteStatusEnum forkVoteStatus;

  public static final String JSON_PROPERTY_UNKNOWN_REPORTED_FORKS = "unknown_reported_forks";
  private List<HealthResponseUnknownReportedForks> unknownReportedForks = new ArrayList<>();


  public HealthResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public HealthResponse currentForkName(String currentForkName) {
    this.currentForkName = currentForkName;
    return this;
  }

   /**
   * Get currentForkName
   * @return currentForkName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CURRENT_FORK_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrentForkName() {
    return currentForkName;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_FORK_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrentForkName(String currentForkName) {
    this.currentForkName = currentForkName;
  }


  public HealthResponse executedForks(List<ExecutedFork> executedForks) {
    this.executedForks = executedForks;
    return this;
  }

  public HealthResponse addExecutedForksItem(ExecutedFork executedForksItem) {
    this.executedForks.add(executedForksItem);
    return this;
  }

   /**
   * Get executedForks
   * @return executedForks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EXECUTED_FORKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ExecutedFork> getExecutedForks() {
    return executedForks;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTED_FORKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutedForks(List<ExecutedFork> executedForks) {
    this.executedForks = executedForks;
  }


  public HealthResponse forkVoteStatus(ForkVoteStatusEnum forkVoteStatus) {
    this.forkVoteStatus = forkVoteStatus;
    return this;
  }

   /**
   * Get forkVoteStatus
   * @return forkVoteStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FORK_VOTE_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ForkVoteStatusEnum getForkVoteStatus() {
    return forkVoteStatus;
  }


  @JsonProperty(JSON_PROPERTY_FORK_VOTE_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForkVoteStatus(ForkVoteStatusEnum forkVoteStatus) {
    this.forkVoteStatus = forkVoteStatus;
  }


  public HealthResponse unknownReportedForks(List<HealthResponseUnknownReportedForks> unknownReportedForks) {
    this.unknownReportedForks = unknownReportedForks;
    return this;
  }

  public HealthResponse addUnknownReportedForksItem(HealthResponseUnknownReportedForks unknownReportedForksItem) {
    this.unknownReportedForks.add(unknownReportedForksItem);
    return this;
  }

   /**
   * Get unknownReportedForks
   * @return unknownReportedForks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UNKNOWN_REPORTED_FORKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<HealthResponseUnknownReportedForks> getUnknownReportedForks() {
    return unknownReportedForks;
  }


  @JsonProperty(JSON_PROPERTY_UNKNOWN_REPORTED_FORKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnknownReportedForks(List<HealthResponseUnknownReportedForks> unknownReportedForks) {
    this.unknownReportedForks = unknownReportedForks;
  }


  /**
   * Return true if this HealthResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthResponse healthResponse = (HealthResponse) o;
    return Objects.equals(this.status, healthResponse.status) &&
        Objects.equals(this.currentForkName, healthResponse.currentForkName) &&
        Objects.equals(this.executedForks, healthResponse.executedForks) &&
        Objects.equals(this.forkVoteStatus, healthResponse.forkVoteStatus) &&
        Objects.equals(this.unknownReportedForks, healthResponse.unknownReportedForks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, currentForkName, executedForks, forkVoteStatus, unknownReportedForks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currentForkName: ").append(toIndentedString(currentForkName)).append("\n");
    sb.append("    executedForks: ").append(toIndentedString(executedForks)).append("\n");
    sb.append("    forkVoteStatus: ").append(toIndentedString(forkVoteStatus)).append("\n");
    sb.append("    unknownReportedForks: ").append(toIndentedString(unknownReportedForks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

