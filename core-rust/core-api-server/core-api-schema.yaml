openapi: 3.1.0
# NOTES TO EDITORS:
#
# Guidance for integer types (see https://swagger.io/docs/specification/data-models/data-types/#numbers)
#
# => If a u8, use type: integer, format: int32, minimum: 0, maximum: 255
# => If an i8, use type: integer, format: int32, minimum: -128, maximum: 127 (also, why are you using an i8!?)
# => If a u16:
#         type: integer
#         format: int32
#         minimum: 0
#         maximum: 65535
# => If a u32:
#    => If there's a domain-imposed requirement that fits it within an i32 (2,147,483,647 = 2^31 - 1), with bound B use
#         type: integer
#         format: int32
#         minimum: 0
#         maximum: B
#       And be sure to validate against B in the code which maps into the type. See EG epoch max length in numerics.rs
#    => If not, to be compatible with OAS, we need to put it into an int64:
#         type: integer
#         format: int64
#         minimum: 0
#         maximum: 4294967295
# => If an i32, use type: integer, format: int32
# => If a u64:
#    => The maximum safe integer in Javascript is (+-)2^53 – 1 = 9,007,199,254,740,991 ~ 9 * 10^15
#       To be pragmatic, any numbers outside this range we will choose to represent as strings.
#    => So if it's possible for us to assert that: value <= bound B <= 2^53 - 1, then use:
#       type: integer, format: int64, minimum: 0, maximum: B
#       And be sure to validate against B in the code which maps into the type. See EG epoch max length in numerics.rs
#    => If not, use a string instead
# => If an i64:
#    => The maximum safe integer in Javascript is (+-)2^53 – 1 = 9,007,199,254,740,991 ~ 9 * 10^15
#       To be pragmatic, any numbers outside this range we will choose to represent as strings.
#    => So if it's possible for us to assert that: -(2^53 - 1) <= B1 <= value <= B2 <= 2^53 - 1, then use:
#         type: integer
#         format: int64
#         minimum: B1
#         maximum: B2
#       And be sure to validate against B in the code which maps into the type. See EG epoch max length in numerics.rs
#    => If not, use a string instead
# => If something over i64/u64, use type: string
#
# Regardless of the type, specify in the description what the underlying type and bounds are, by starting with something like:
# - An integer between 0 and 10^10, giving
# - A decimal-string-encoded integer between 0 and 2^64 - 1, which
# - A decimal-string-encoded integer between 0 and 10^123, that
#
# Descriptions guidance:
# => For descriptions of encoded types, we follow this pattern: 'The xyz-encoded, abc-encoded xx of the yy'
#    EG 'The hex-encoded, SBOR-encoded data' or 'The hex-encoded Blake2b-256 hash of the banana payload'
# => Don't end in a full-stop, unless it is more than 1 sentence, then all sentences should end in a full stop
# => It's not technically valid to have both $ref and description, but it works in ReDocly, so feel free to do it
#
# Naming guidance:
# => Hex-encoded hashes should end _hash
# => Hex-encoded bytes/payload should end _hex and not include _bytes
info:
  # Should be the release version, and the release display name
  version: 'v1.3.0'
  title: 'Radix Core API'
  license:
    name: The Radix License, Version 1.0
    url: https://www.radixfoundation.org/licenses/license-v1
  x-logo:
    url: https://cdn.document360.io/50e78792-5410-4ac9-aa43-4612b4d33953/Images/Documentation/radix-logo-banner.png
    href: https://docs.radixdlt.com
  description: |
    This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.

    The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly.
    Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints
    which may be problematic, but monitoring is advised. This configuration parameter is
    `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.

    This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history
    (under `/lts/stream/` or `/stream`).

    If you require queries against snapshots of historical ledger state, you may also wish to consider using the
    [Gateway API](https://docs-babylon.radixdlt.com/).

    ## Integration and forward compatibility guarantees

    Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear
    and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.

    All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions.
    We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive
    JSON parser which ignores unknown fields, any additions will not affect existing code.

    Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes
    will be flagged clearly in the corresponding release notes.

    All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown
    fields on JSON objects.

servers:
  - url: 'localhost:3333/core'
# See https://redocly.com/docs/api-reference-docs/specification-extensions/x-tag-groups/ for details
x-tagGroups:
  - name: Overview
    tags:
      - SDKs
      - SubAPIs
      - Concepts
      - Construction
  - name: Endpoints
    tags:
      - LTS
      - Status
      - Transaction
      - Mempool
      - State
      - Stream
tags:
  - name: SDKs
    x-displayName: SDKs
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      The following SDKs are currently available for the Core API:
      - Typescript: [@radixdlt/babylon-core-api-sdk](https://www.npmjs.com/package/@radixdlt/babylon-core-api-sdk)

      For other languages, you can use a HTTP client of your choice and code the JSON models yourself.
      You could also consider using an Open API generator, but unless you have experience with battling the gremlins in Open API generators,
      it may be more trouble than it's worth.
  - name: SubAPIs
    x-displayName: Sub-APIs
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      The API is split into 6 sub apis:
      - **Long Term Support** (`/lts/*`) - For long term support/backward compatible endpoints aimed at integrators such as exchanges.
      - **Status** (`/status/*`) - For status and configuration details for the node / engine.
      - **Transaction** (`/transaction/*`) - For transaction construction, preview, submission, and monitoring the status of an individual transaction.
      - **Mempool** (`/mempool/*`) - For information on the contents of the node's mempool.
      - **Current State** (`/state/*`) - For reading the state of entities. At present, we only support reading details from the top of the currently committed ledger.
      - **Stream** (`/stream/*`) - For reading the committed transactions.
  - name: Concepts
    x-displayName: Concepts
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      Interacting with this API effectively may require knowledge about the Radix Babylon Transaction Model and the State Model.

      We share some very high-level details below, but please see the [official documentation](http://docs.radixdlt.com) for more details on this.

      ## Transactions

      User transactions are formed of a core "intent", which is then signed by 0+ signatories, before being notarized. The output is called a notarized payload.
      It is this notarized transaction payload which is submitted to the network.

      For most users, this construction process will generally happen in their Radix Wallet. If you wish to construct transactions programmatically or offline,
      you will need to integrate the Radix Engine Toolkit into your application for construction and finalization.

      Once submitted, a transaction payload can end up being either rejected or committed. Transactions get rejected if they fail to pass certain criteria at the given time.
      A transaction payload can be marked as a:
      - **Permanent Rejection** if it is never possible for it to be committed (e.g. it's statically invalid, or only valid up until epoch 100 and it's now epoch 101)
      - **Temporary Rejection** if it still may be possible that the transaction payload could be committed

      A given intent typically is only part of one submitted notarized payload, but it's possible for a notary to notarize and submit multiple payloads for the same intent.
      The Radix Engine ensures that any intent can only be committed once.

      A committed transaction is either committed with an outcome of "Success" or "Failure":
      - **Committed Failure** will result in fees being paid up until the failure point, but all other changes will be discarded.
      - **Committed Success** will result in all changes being committed.

      Only committed transactions appear on ledger. The status of rejected transactions can be read at submission time or from the transaction status endpoint - by virtue of
      a rejection cache on the node. This cache is limited in size, so rejected statuses may no longer be tracked after a period of time.

      For a more robust handling of transaction rejections, consider running your own Gateway.

      ## State Model

      The Radix Engine State Model can be thought of as a forest of state sub-trees.
      A state sub-tree consists of "entities". These entities have an ID, and 0 or more "substates" at keys underneath them.
      These substates are typed, and can own other entities, forming a tree of ownership.

      Each state sub-tree has a root entity, and a single Bech32M Global Address, with a human-readable-prefix (and prefix byte) matching the root entity type.

      As an example, entities include concepts like Components, Packages, Vaults, Resource Managers and Key-Value Stores.
      Substates under a component include the Component Struct, Component Data, and Access Rules substates.
  - name: Construction
    x-displayName: Transaction Construction
    x-traitTag: true # Don't display endpoints under this tag
    description: |
      To construct and submit a transaction using the LTS endpoints:

      * Query `/lts/transaction/construction` to retrieve the current epoch (according to your node).
        Check also that the `ledger_clock` is close to the current time - this ensures that the node is synced up.
      * Make use of the Radix Engine Toolkit to construct the intent, sign/notarize, and compile the notarized transaction.
      * You can use `/lts/transaction/submit` to submit the transaction
      * Use `/lts/transaction/status` to check the status of the transaction
      * Use `/lts/stream/transaction-outcomes` to look up the outcome of the transaction, from its state version
  - name: LTS
    x-displayName: LTS Endpoints
    description: |
      For long term support/backward compatible endpoints aimed at integrators such as exchanges.
  - name: Status
    x-displayName: Status Endpoints
    description: |
      For status and configuration details for the node / engine.
  - name: Transaction
    x-displayName: Transaction Endpoints
    description: |
      For transaction construction, preview, submission, and monitoring the status of an individual transaction.
  - name: Mempool
    x-displayName: Mempool Endpoints
    description: |
      For information on the contents of the node's mempool.
  - name: State
    x-displayName: State Endpoints
    description: |
      For reading the state of entities. At present, we only support reading details from the top of the currently committed ledger.
  - name: Stream
    x-displayName: Stream Endpoints
    description: To query the transaction or proof stream of the ledger.
paths:
##################################################
# Long Term Support backwards compatible Sub-API #
##################################################
  "/lts/transaction/construction":
    post:
      summary: Get Construction Metadata
      description: Returns information necessary to build a transaction
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsTransactionConstructionRequest"
      responses:
        '200':
          description: All info needed to build a transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionConstructionResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/transaction/submit":
    post:
      summary: Submit Transaction
      description: |
        Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node's mempool.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsTransactionSubmitRequest"
      responses:
        '200':
          description: Transaction Submit Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionSubmitResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionSubmitErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionSubmitErrorResponse"
  "/lts/transaction/status":
    post:
      summary: Get Transaction Status
      description: |
        Shares the node's knowledge of any payloads associated with the given intent hash.
        Generally there will be a single payload for a given intent, but it's theoretically possible there may be multiple.
        This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient
        for most clients.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsTransactionStatusRequest"
      responses:
        '200':
          description: Transaction status response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsTransactionStatusResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/state/account-all-fungible-resource-balances":
    post:
      summary: Get All Account Balances
      description: Returns balances for all resources associated with an account
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStateAccountAllFungibleResourceBalancesRequest"
      responses:
        '200':
          description: Account all resource balances response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStateAccountAllFungibleResourceBalancesResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/state/account-fungible-resource-balance":
    post:
      summary: Get Single Account Balance
      description: Returns balance of a single fungible resource in an account
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStateAccountFungibleResourceBalanceRequest"
      responses:
        '200':
          description: Account resource balance response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStateAccountFungibleResourceBalanceResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/state/account-deposit-behaviour":
    post:
      summary: Get Account Deposit Behaviour
      description: Returns deposit behaviour of a single account for multiple resource addresses
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStateAccountDepositBehaviourRequest"
      responses:
        '200':
          description: Account deposit behaviour response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStateAccountDepositBehaviourResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/stream/transaction-outcomes":
    post:
      summary: Get Transaction Outcomes
      description: |
        Returns a list of committed transaction outcomes (containing balance changes) from a given state version.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStreamTransactionOutcomesRequest"
      responses:
        '200':
          description: Paged response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStreamTransactionOutcomesResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/lts/stream/account-transaction-outcomes":
    post:
      summary: Get Account Transaction Outcomes
      description: |
        Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account.
      tags:
        - LTS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LtsStreamAccountTransactionOutcomesRequest"
      responses:
        '200':
          description: Paged response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LtsStreamAccountTransactionOutcomesResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
##################
# Status Sub-API #
##################
  "/status/network-configuration":
    post:
      summary: Get Network Configuration
      description: Returns the network configuration of the network the node is connected to.
      tags:
        - Status
      responses:
        '200':
          description: Network Configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkConfigurationResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/status/network-status":
    post:
      summary: Get Network Status
      description: Returns the current state and status of the node's copy of the ledger.
      tags:
        - Status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkStatusRequest"
      responses:
        '200':
          description: Network Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkStatusResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/status/scenarios":
    post:
      summary: Get Scenarios' results.
      description: |
        Get results of test "Scenarios" executed on this Network.
        Note: these Scenarios are meant to only be executed on test Networks; on a production Node,
        the response is expected to be empty.
      tags:
        - Status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScenariosRequest"
      responses:
        '200':
          description: Scenarios' results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScenariosResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
###################
# Mempool Sub-API #
###################
  "/mempool/list":
    post:
      summary: Get Mempool List
      description: Returns the hashes of all the transactions currently in the mempool
      tags:
        - Mempool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MempoolListRequest"
      responses:
        '200':
          description: Mempool List Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MempoolListResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/mempool/transaction":
    post:
      summary: Get Mempool Transaction
      description: Returns the payload of a transaction currently in the mempool
      tags:
        - Mempool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MempoolTransactionRequest"
      responses:
        '200':
          description: Mempool Transaction Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MempoolTransactionResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
#######################
# Transaction Sub-API #
#######################
  "/transaction/parse":
    post:
      summary: Parse Transaction Payload
      description: Extracts the contents and hashes of various types of transaction payloads, or sub-payloads.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionParseRequest"
      responses:
        '200':
          description: Transaction Parse Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionParseResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/submit":
    post:
      summary: Transaction Submit
      description: |
        Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node's mempool.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionSubmitRequest"
      responses:
        '200':
          description: Transaction Submit Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSubmitErrorResponse"
  "/transaction/status":
    post:
      summary: Get Transaction Status
      description: |
        Shares the node's knowledge of any payloads associated with the given intent hash.
        Generally there will be a single payload for a given intent, but it's theoretically possible there may be multiple.
        This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient
        for most clients.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionStatusRequest"
      responses:
        '200':
          description: Transaction status response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionStatusResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/receipt":
    post:
      summary: Get Transaction Receipt
      description: |
        Gets the transaction receipt for a committed transaction.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionReceiptRequest"
      responses:
        '200':
          description: Committed transaction found response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionReceiptResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Committed transaction not found response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/call-preview":
    post:
      summary: Scrypto Call Preview
      description: |
        Preview a scrypto function or method call against the latest network state.
        Returns the result of the scrypto function or method call.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionCallPreviewRequest"
            examples:
              method:
                summary: A method call example
                value: {"target":{"type":"method","component_address":"component_loc1qftacppvmr9ezmekxqpq58en0nk954x0a7jv2zz0hc7qfxlgx4","method_name":"lock_fee"},"arguments":["a120000000000010632d5ec66b050000000000000000000000000000000000000000000000"]}
              function:
                summary: A function call example
                value: {"target":{"type":"function","package_address":"package_loc1q9ufgsc8yh5fkv8kzny3vnp68gkmuytc004k0j8dkwvs0xq76q","blueprint_name":"GumballMachine","function_name":"instantiate_gumball_machine"},"arguments":["a120000000000010632d5ec66b050000000000000000000000000000000000000000000000"]}
      responses:
        '200':
          description: Result of the scrypto function call
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCallPreviewResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/preview":
    post:
      summary: Transaction Preview V1
      description: |
        Preview a transaction against the latest network state, and returns the preview receipt.
        If the node has enabled it, you may be able to also preview against recent network state.

        For V2 transactions (and beyond) the `/preview-v2` endpoint should be used instead.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionPreviewRequest"
      responses:
        '200':
          description: Transaction preview response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPreviewResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/transaction/preview-v2":
    post:
      summary: Transaction Preview V2
      description: |
        Previews a transaction against the latest network state, and returns the preview receipt.
        If the node has enabled it, you may be able to also preview against recent network state.

        This endpoint supports V2 transactions (and beyond). If you still need to preview V1
        transactions, you should use the `/preview` endpoint instead.
      tags:
        - Transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionPreviewV2Request"
      responses:
        '200':
          description: Transaction preview response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPreviewV2Response"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPreviewV2ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPreviewV2ErrorResponse"
##################
# Stream Sub-API #
##################
  "/stream/proofs":
    post:
      summary: Stream Proofs
      description: |
        Returns a stream of proofs committed to the node's ledger.

        NOTE: This endpoint may return different results on different nodes:
        * Each node may persist different subset of signatures on a given proofs, as long as enough
        of the validator set has signed.
        * Inside an epoch, different nodes may receive and persist / keep different proofs, subject to
        constraints on gaps between proofs.

        Proofs during an epoch can also be garbage collected by the node after the fact. Therefore
        proofs may disappear from this stream.

        Some proofs (such as during genesis and protocol update enactment) are created on a node and don't
        include signatures.

        This stream accepts four different options in the request:
        * All proofs forward (from state version)
        * All end-of-epoch proofs (from epoch number)
        * All end-of-epoch proofs triggering a protocol update
        * All node-injected proofs enacting genesis or a protocol update (for protocol update name, from state version)

        The end-of-epoch proofs can be used to "trustlessly" verify the validator set for a given epoch.
        By tracking the fact that validators for epoch N sign the next validator set for epoch N + 1,
        this chain of proofs can be used to provide proof of the current validator set from a hardcoded
        start.

        When a validator set is known for a given epoch, this can be used to verify the various transaction
        hash trees in the epoch, and to prove other data.

        NOTE: This endpoint was built after agreeing the new Radix convention for paged APIs. Its models
        therefore follow the new convention, rather than attempting to align with existing loose Core API conventions.
      tags:
        - Stream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamProofsRequest"
      responses:
        '200':
          description: Stream proofs response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamProofsResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamProofsErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamProofsErrorResponse"
  "/stream/transactions":
    post:
      summary: Get Committed Transactions
      description: |
        Returns the list of committed transactions.
      tags:
        - Stream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamTransactionsRequest"
      responses:
        '200':
          description: Committed transactions response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamTransactionsResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamTransactionsErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamTransactionsErrorResponse"
#################
# State Sub-API #
#################
  "/state/consensus-manager":
    post:
      summary: Get Consensus Manager Details
      description: |
        Reads the consensus manager's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateConsensusManagerRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateConsensusManagerResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/account":
    post:
      summary: Get Account Details
      description: |
        Reads the account's substate/s from the top of the current ledger.
        Also returns all vaults under the account.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateAccountRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateAccountResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/component":
    post:
      summary: Get Component Details
      description: |
        Reads the component's substate/s from the top of the current ledger.
        Also recursively extracts vault balance totals from the component's entity subtree.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateComponentRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateComponentResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/validator":
    post:
      summary: Get Validator Details
      description: |
        Reads the validator's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateValidatorRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateValidatorResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/access-controller":
    post:
      summary: Get Access Controller Details
      description: |
        Reads the access controller's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateAccessControllerRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateAccessControllerResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/resource":
    post:
      summary: Get Resource Details
      description: |
        Reads the resource manager's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateResourceRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResourceResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/non-fungible":
    post:
      summary: Get Non-Fungible Details
      description: |
        Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateNonFungibleRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateNonFungibleResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
  "/state/package":
    post:
      summary: Get Package Details
      description: |
        Reads the package's substate/s from the top of the current ledger.
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatePackageRequest"
      responses:
        '200':
          description: Current state response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatePackageResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicErrorResponse"
#############################################################################################
components:
  schemas:
#############################################
# GENERAL / SHARED MODELS - Request Options #
#############################################
    NetworkIdentifier:
      description: The logical name of the network
      type: string
      example: "{{network}}"
    SborFormatOptions:
      type: object
      description: Requested SBOR formats to include in the response
      properties:
        raw:
          description: Whether to return the raw hex-encoded bytes (default true)
          type: boolean
        programmatic_json:
          description: Whether to return the programmatic json format (normally default true, defaults false for streamed transactions)
          type: boolean
    TransactionFormatOptions:
      type: object
      description: Requested transaction formats to include in the response
      properties:
        manifest:
          description: Whether to return the raw manifest (default true)
          type: boolean
        blobs:
          description: Whether to return the hex-encoded blobs (default false)
          type: boolean
        message:
          description: Whether to return the transaction message (default true)
          type: boolean
        balance_changes:
          description: Whether to return the transaction balance changes (default false)
          type: boolean
        raw_system_transaction:
          description: Whether to return the raw hex-encoded system transaction bytes (default false)
          type: boolean
        raw_notarized_transaction:
          description: Whether to return the raw hex-encoded notarized transaction bytes (default true)
          type: boolean
        raw_ledger_transaction:
          description: Whether to return the raw hex-encoded ledger transaction bytes (default false)
          type: boolean
    SubstateFormatOptions:
      type: object
      description: Requested substate formats to include in the response
      properties:
        raw:
          description: Whether to return the raw substate value bytes (default false)
          type: boolean
        hash:
          description: Whether to return the raw substate value bytes hash (default false)
          type: boolean
        typed:
          description: Whether to return the typed substate information (default true)
          type: boolean
        previous:
          description: Whether to return the previous substate value for updates and deletes (default false)
          type: boolean
    LedgerStateSelectorType:
      type: string
      enum:
        - ByStateVersion
    LedgerStateSelector:
      description: |
        An optional specification of a historical ledger state at which to execute the request.
        The "historical state" feature (see the `db.historical_substate_values.enable` flag) must be
        enabled on the Node, and the requested point in history must be recent enough (in accordance
        with the Node's configured `state_hash_tree.state_version_history_length`).
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/LedgerStateSelectorType'
      discriminator:
        propertyName: type
        mapping:
          ByStateVersion: '#/components/schemas/VersionLedgerStateSelector'
          # Currently no other options exist, but we plan to have e.g. `ByTimestamp` in future.
    VersionLedgerStateSelector:
      allOf:
        - $ref: '#/components/schemas/LedgerStateSelector'
        - type: object
          required:
            - state_version
          properties:
            state_version:
              description: An exact version at which to execute the request.
              $ref: "#/components/schemas/StateVersion"
############################################
# GENERAL / SHARED MODELS - General Models #
############################################
    ErrorResponseType:
      type: string
      enum:
        - Basic
        - TransactionSubmit
        - LtsTransactionSubmit
        - TransactionPreviewV2
        - StreamTransactions
        - StreamProofs
    ErrorResponse:
      type: object
      discriminator:
        propertyName: error_type
        mapping:
          # NOTE: These need to match ErrorResponseType
          Basic: "#/components/schemas/BasicErrorResponse"
          TransactionSubmit: "#/components/schemas/TransactionSubmitErrorResponse"
          LtsTransactionSubmit: "#/components/schemas/LtsTransactionSubmitErrorResponse"
          TransactionPreviewV2: "#/components/schemas/TransactionPreviewV2ErrorResponse"
          StreamTransactions: "#/components/schemas/StreamTransactionsErrorResponse"
          StreamProofs: "#/components/schemas/StreamProofsErrorResponse"
      required:
        - error_type
        - code
        - message
      properties:
        error_type:
          $ref: "#/components/schemas/ErrorResponseType"
        code:
          type: integer
          description: A numeric code corresponding to the given HTTP error code.
        message:
          description: A human-readable error message.
          type: string
        trace_id:
          description: A GUID to be used when reporting errors, to allow correlation with the Core API's error logs, in the case where the Core API details are hidden.
          type: string
    BasicErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
    ContinuationToken:
      type: string
      description: |
        A continuation token is returned if and only if there are further non-empty pages of items currently available.
        The token can be provided in a following request to fetch the next page of results.
        The filter and sort should not be changed when re-using the continuation token.
###########################################################
# GENERAL / SHARED MODELS - General / Numeric / Utilities #
###########################################################
    Decimal:
      type: string
      description: |
        A string-encoded fixed-precision decimal to 18 decimal places.
        A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
##################################################
# GENERAL / SHARED MODELS - TransactionV1 Models #
##################################################
    NotarizedTransaction:
      type: object
      required:
        - hash
        - hash_bech32m
        - signed_intent
        - notary_signature
      properties:
        hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        payload_hex:
          type: string
          description: The hex-encoded full notarized transaction payload. Returning this can be disabled in TransactionFormatOptions on your request (default true).
        signed_intent:
          $ref: "#/components/schemas/SignedTransactionIntent"
        notary_signature:
          $ref: "#/components/schemas/Signature"
    SignedTransactionIntent:
      type: object
      required:
        - hash
        - hash_bech32m
        - intent
        - intent_signatures
      properties:
        hash:
          $ref: "#/components/schemas/SignedTransactionIntentHash"
        hash_bech32m:
          $ref: "#/components/schemas/SignedTransactionIntentHashBech32m"
        intent:
          $ref: "#/components/schemas/TransactionIntent"
        intent_signatures:
          type: array
          items:
            $ref: "#/components/schemas/SignatureWithPublicKey"
    TransactionIntent:
      type: object
      required:
        - hash
        - hash_bech32m
        - header
      properties:
        hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        header:
          $ref: "#/components/schemas/TransactionHeader"
        instructions:
          type: string
          description: The decompiled transaction manifest instructions. Only returned if enabled in `TransactionFormatOptions` on your request.
        blobs_hex:
          type: object
          description: A map of the hex-encoded blob hash, to hex-encoded blob content. Only returned if enabled in `TransactionFormatOptions` on your request.
          additionalProperties:
            type: string
            description: The hex-encoded blob content
        message:
          description: The optional transaction message. Only returned if present and enabled in `TransactionFormatOptions` on your request.
          $ref: "#/components/schemas/TransactionMessage"
    TransactionMessageType:
      type: string
      enum:
        - Plaintext
        - Encrypted
    TransactionMessage:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/TransactionMessageType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TransactionMessageType
          Plaintext: '#/components/schemas/PlaintextTransactionMessage'
          Encrypted: '#/components/schemas/EncryptedTransactionMessage'
    PlaintextTransactionMessage:
      allOf:
        - $ref: "#/components/schemas/TransactionMessage"
        - type: object
          description: An unencrypted message.
          required:
            - mime_type
            - content
          properties:
            mime_type:
              type: string
              description: |
                Intended to represent the RFC 2046 MIME type of the `content`.
                A client cannot trust that this field is a valid mime type - in particular, the
                choice between `String` or `Binary` representation of the content is not enforced by
                this `mime_type`.
            content:
              $ref: "#/components/schemas/PlaintextMessageContent"
    PlaintextMessageContentType:
      type: string
      enum:
        - String
        - Binary
    PlaintextMessageContent:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/PlaintextMessageContentType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PlaintextMessageContentType
          String: '#/components/schemas/StringPlaintextMessageContent'
          Binary: '#/components/schemas/BinaryPlaintextMessageContent'
    StringPlaintextMessageContent:
      allOf:
        - $ref: "#/components/schemas/PlaintextMessageContent"
        - type: object
          required:
            - value
          properties:
            value:
              type: string
              description: The value of a message that the author decided to provide as a UTF-8 string.
    BinaryPlaintextMessageContent:
      allOf:
        - $ref: "#/components/schemas/PlaintextMessageContent"
        - type: object
          required:
            - value_hex
          properties:
            value_hex:
              type: string
              description: The hex-encoded value of a message that the author decided to provide as raw bytes.
    EncryptedTransactionMessage:
      allOf:
        - $ref: "#/components/schemas/TransactionMessage"
        - type: object
          description: A `PlaintextTransactionMessage` encrypted with "Multi-party ECIES" for a number of decryptors (public keys).
          required:
            - encrypted_hex
            - curve_decryptor_sets
          properties:
            encrypted_hex:
              type: string
              description: |
                The hex-encoded (128-bit) AES-GCM encrypted bytes of an SBOR-encoded `PlaintextTransactionMessage`.
                The bytes are serialized as the concatenation `Nonce/IV (12 bytes) || Cipher (variable length) || Tag/MAC (16 bytes)`:
            curve_decryptor_sets:
              type: array
              items:
                $ref: "#/components/schemas/EncryptedMessageCurveDecryptorSet"
    EncryptedMessageCurveDecryptorSet:
      type: object
      description: |
        A decryptor set for a particular ECDSA curve type.
        The (128-bit) AES-GCM symmetric key is encrypted separately for each decryptor public key via (256-bit) AES-KeyWrap.
        AES-KeyWrap uses a key derived via a KDF (Key Derivation Function) using a shared secret.
        For each decryptor public key, we create a shared curve point `G` via static Diffie-Helman between the decryptor public key, and a per-transaction ephemeral public key for that curve type.
        We then use that shared secret with a key derivation function to create the (256-bit) KEK (Key Encrypting Key):
        `KEK = HKDF(hash: Blake2b, secret: x co-ord of G, salt: [], length: 256 bits)`.
      required:
        - dh_ephemeral_public_key
        - decryptors
      properties:
        dh_ephemeral_public_key:
          description: The ephemeral Diffie-Helman public key for a particular ECDSA curve type (see its `key_type`).
          $ref: "#/components/schemas/PublicKey"
        decryptors:
          type: array
          items:
            $ref: "#/components/schemas/EncryptedMessageDecryptor"
    EncryptedMessageDecryptor:
      type: object
      required:
        - public_key_fingerprint_hex
        - aes_wrapped_key_hex
      properties:
        public_key_fingerprint_hex:
          type: string
          description: The last 8 bytes of the Blake2b-256 hash of the public key bytes, in their standard Radix byte-serialization.
        aes_wrapped_key_hex:
          type: string
          description: |
            The hex-encoded wrapped key bytes from applying RFC 3394 (256-bit) AES-KeyWrap to the message ephemeral public key, with the secret KEK provided by static Diffie-Helman between the decryptor public key, and the `dh_ephemeral_public_key` for that curve type.
            The bytes are serialized (according to RFC 3394) as the concatenation `IV (first 8 bytes) || Cipher`.

            The message ephemeral public key is 128-bit in V1 transactions, but 256-bit in V2 transactions.
            The Cipher is the wrapped ephemeral public key, and is encoded as two 64-bit blocks in V1, and four 64-bit blocks in V2.
    TransactionHeader:
      type: object
      required:
        - network_id
        - start_epoch_inclusive
        - end_epoch_exclusive
        - nonce
        - notary_public_key
        - notary_is_signatory
        - tip_percentage
      properties:
        network_id:
          $ref: "#/components/schemas/NetworkIdentifierByte"
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction can be submitted.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be rejected.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        nonce:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created (to enable submitting an otherwise identical/duplicate intent).

            As of Cuttlefish and V2 transaction models, this is now referred to in documentation as the `intent_discriminator`.
        notary_public_key:
          $ref: "#/components/schemas/PublicKey"
        notary_is_signatory:
          type: boolean
          description: Specifies whether the notary public key should be included in the transaction signers list
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: An integer between `0` and `65535`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
    NetworkIdentifierByte:
      description: The logical id of the network
      type: integer
      format: int32
      minimum: 0
      maximum: 255
##################################################
# GENERAL / SHARED MODELS - TransactionV2 Models #
##################################################
    NotarizedTransactionV2:
      type: object
      required:
        - hash
        - hash_bech32m
        - signed_transaction_intent
        - notary_signature
      properties:
        hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        payload_hex:
          type: string
          description: The hex-encoded full notarized transaction payload. Returning this can be disabled in TransactionFormatOptions on your request (default true).
        signed_transaction_intent:
          $ref: "#/components/schemas/SignedTransactionIntentV2"
        notary_signature:
          $ref: "#/components/schemas/Signature"
    SignedTransactionIntentV2:
      type: object
      required:
        - hash
        - hash_bech32m
        - transaction_intent
        - transaction_intent_signatures
        - non_root_subintent_signatures
      properties:
        hash:
          $ref: "#/components/schemas/SignedTransactionIntentHash"
        hash_bech32m:
          $ref: "#/components/schemas/SignedTransactionIntentHashBech32m"
        transaction_intent:
          $ref: "#/components/schemas/TransactionIntentV2"
        transaction_intent_signatures:
          $ref: "#/components/schemas/IntentSignatures"
        non_root_subintent_signatures:
          description: |
            This gives the signatures for each subintent in `non_root_subintents` in `TransactionIntentV2`.
            For committed transactions, these arrays are of equal length and correspond one-to-one in order.
          type: array
          items:
            $ref: "#/components/schemas/IntentSignatures"
    IntentSignatures:
      type: object
      description: Signatures against the given intent.
      required:
        - signatures
      properties:
        signatures:
          type: array
          items:
            $ref: "#/components/schemas/SignatureWithPublicKey"
    TransactionIntentV2:
      type: object
      required:
        - hash
        - hash_bech32m
        - transaction_header
        - root_intent_core
        - non_root_subintents
      properties:
        hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        transaction_header:
          $ref: "#/components/schemas/TransactionHeaderV2"
        root_intent_core:
          $ref: "#/components/schemas/IntentCoreV2"
        non_root_subintents:
          type: array
          items:
            $ref: "#/components/schemas/SubintentV2"
    TransactionHeaderV2:
      type: object
      required:
        - notary_public_key
        - notary_is_signatory
        - tip_basis_points
      properties:
        notary_public_key:
          $ref: "#/components/schemas/PublicKey"
        notary_is_signatory:
          type: boolean
          description: Specifies whether the notary public key should be included in the transaction signers list
        tip_basis_points:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1 = 4294967295`, giving the validator tip as a basis points amount.
            That is, a value of `1` corresponds to an additional tip on 0.01% of the base fee.
    SubintentV2:
      type: object
      required:
        - hash
        - hash_bech32m
        - intent_core
      properties:
        hash:
          $ref: "#/components/schemas/SubintentHash"
        hash_bech32m:
          $ref: "#/components/schemas/SubintentHashBech32m"
        intent_core:
          $ref: "#/components/schemas/IntentCoreV2"
    IntentCoreV2:
      type: object
      required:
        - intent_header
        - children_specifiers
      properties:
        intent_header:
          $ref: "#/components/schemas/IntentHeaderV2"
        children_specifiers:
          type: array
          items:
            $ref: "#/components/schemas/SubintentHashBech32m"
        blobs_hex:
          type: object
          description: A map of the hex-encoded blob hash, to hex-encoded blob content. Only returned if enabled in `TransactionFormatOptions` on your request.
          additionalProperties:
            type: string
            description: The hex-encoded blob content
        message:
          description: The optional transaction message. Only returned if present and enabled in `TransactionFormatOptions` on your request.
          $ref: "#/components/schemas/TransactionMessage"
        instructions:
          type: string
          description: The decompiled transaction manifest instructions. Only returned if enabled in `TransactionFormatOptions` on your request.
    IntentHeaderV2:
      type: object
      description: |
        The metadata common to both transaction intents and subintents.

        The `min_proposer_timestamp_inclusive` and `max_proposer_timestamp_exclusive` are both optional.
      required:
        - network_id
        - start_epoch_inclusive
        - end_epoch_exclusive
        - intent_discriminator
      properties:
        network_id:
          $ref: "#/components/schemas/NetworkIdentifierByte"
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction can be submitted.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be rejected.
            In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`.
        min_proposer_timestamp_inclusive:
          $ref: "#/components/schemas/ScryptoInstant"
        max_proposer_timestamp_exclusive:
          $ref: "#/components/schemas/ScryptoInstant"
        intent_discriminator:
          type: string
          description: |
            The string representation of an integer between `0` and `2^64 - 1`, which can be chosen to ensure that
            a unique intent can be created. It only needs to be unique for a particular intent content and epoch/timestamp,
            and can be safely selected randomly to very high probability.

            This field was called `nonce` in the V1 models, but was a misleading name, as it got confused with a
            cryptographic nonce or an Ethereum-style nonce, and it is neither.
#####################################################
# GENERAL / SHARED MODELS - Transaction Descriptors #
#####################################################
    LedgerStateSummary:
      type: object
      required:
        - state_version
        - header_summary
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The version at which the state was read.
        header_summary:
          $ref: "#/components/schemas/LedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
    LedgerHeaderSummary:
      type: object
      required:
        - epoch_round
        - ledger_hashes
        - proposer_timestamp
      properties:
        epoch_round:
          $ref: "#/components/schemas/EpochRound"
        ledger_hashes:
          $ref: "#/components/schemas/LedgerHashes"
        proposer_timestamp:
          description: |
            The time at which the consensus leader created the proposal for extending the ledger to
            the represented point.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
          $ref: '#/components/schemas/InstantMs'
    LedgerHashes:
      type: object
      required:
        - state_tree_hash
        - transaction_tree_hash
        - receipt_tree_hash
      properties:
        state_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger.
        transaction_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger.
        receipt_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger.
    StateVersion:
      type: integer
      format: int64
      minimum: 1
      maximum: 100000000000000
    TransactionIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - signed_intent_hash
        - signed_intent_hash_bech32m
        - payload_hash
        - payload_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/SignedTransactionIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/SignedTransactionIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
    TransactionIntentHashInput:
      type: string
      description: |
        The transaction intent hash for a user transaction, also known as the transaction id.
        This hash identifies the core "intent" of the transaction. Each transaction intent can only be committed once.
        This hash gets signed by any signatories on the transaction, to create the signed intent.
        Either hex or Bech32m-encoded strings are supported.
    TransactionIntentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded transaction intent hash for a user transaction, also known as the transaction id.
        This hash identifies the core "intent" of the transaction. Each transaction intent can only be committed once.
        This hash gets signed by any signatories on the transaction, to create the signed intent.
    TransactionIntentHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `TransactionIntentHash`.
    SubintentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded subintent hash for a subintent, also known as the partial transaction id.
        This hash identifies the subintent. Each subintent can only be *successfully* committed once,
        but unlike a transaction intent, could be committed as a failure zero or more times first.
        This hash gets signed by any signatories on subintent.
    SubintentHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `SubintentHash`.
    SignedTransactionIntentHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded signed intent hash for a user transaction.
        This hash identifies the transaction intent, plus additional signatures.
        This hash is signed by the notary, to create the submittable `NotarizedTransaction`.
    SignedTransactionIntentHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `SignedTransactionIntentHash`.
    NotarizedTransactionHashInput:
      type: string
      description: |
        This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature.
        This hash should either be hex or Bech32m-encoded.
    NotarizedTransactionHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded notarized transaction hash for a user transaction.
        This hash identifies the full submittable notarized transaction - ie the signed intent, plus the notary signature.
    NotarizedTransactionHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `NotarizedTransactionHash`.
    LedgerPayloadHash:
      type: string
      minLength: 64
      maxLength: 64
      description: |
        The hex-encoded ledger payload transaction hash.
        This is a wrapper for both user transactions, and system transactions such as genesis and round changes.
    LedgerPayloadHashBech32m:
      type: string
      description: The Bech32m-encoded human readable `LedgerPayloadHash`.
    CommittedIntentMetadata:
      type: object
      required:
        - state_version
        - payload_hash
        - payload_hash_bech32m
        - is_same_transaction
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: State version of a committed transaction which had the same intent.
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        is_same_transaction:
          type: boolean
          description: |
            Whether the intent was committed in a transaction with the same payload.
            This is a convenience field, which can also be computed using `payload_hash` by a client
            knowing the payload of the submitted transaction.
######################################
# GENERAL / SHARED MODELS - Receipts #
######################################
    TransactionStatus:
      type: string
      enum:
        - Succeeded
        - Failed
        - Rejected
      description: The status of the transaction
    TransactionReceipt:
      type: object
      description: The transaction execution receipt
      required:
        - status
        - state_updates
        - fee_summary
        - costing_parameters
      properties:
        status:
          $ref: "#/components/schemas/TransactionStatus"
        fee_summary:
          $ref: "#/components/schemas/FeeSummary"
        costing_parameters:
          $ref: "#/components/schemas/CostingParameters"
        fee_source:
          description: Only present if the `status` is not `Rejected`.
          $ref: "#/components/schemas/FeeSource"
        fee_destination:
          description: Only present if the `status` is not `Rejected`.
          $ref: "#/components/schemas/FeeDestination"
        state_updates:
          $ref: "#/components/schemas/StateUpdates"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        next_epoch:
          $ref: "#/components/schemas/NextEpoch"
        output:
          type: array
          description: |
            The return data for each line of the transaction intent's manifest.
            This property is only present if the `status` is `Succeeded`.
          items:
            $ref: "#/components/schemas/SborData"
        error_message:
          type: string
          description: |
            The error message. This property is only present if the status is `Failed` or `Rejected`.
    FeeSummary:
      type: object
      required:
        - execution_cost_units_consumed
        - finalization_cost_units_consumed
        - xrd_total_execution_cost
        - xrd_total_finalization_cost
        - xrd_total_storage_cost
        - xrd_total_royalty_cost
        - xrd_total_tipping_cost
      properties:
        execution_cost_units_consumed:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction execution.
        finalization_cost_units_consumed:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction finalization.
        xrd_total_execution_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD burned in the transaction as part of execution costs.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_finalization_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD burned in the transaction as part of finalization costs.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_royalty_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid in royalties as part of the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_storage_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid in state expansion costs as part of the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_total_tipping_cost:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    CostingParameters:
      type: object
      required:
        - execution_cost_unit_price
        - execution_cost_unit_limit
        - execution_cost_unit_loan
        - finalization_cost_unit_price
        - finalization_cost_unit_limit
        - xrd_usd_price
        - xrd_storage_price
        - xrd_archive_storage_price
        - tip_percentage
        # - tip_proportion - Can be made required post Cuttlefish
      properties:
        execution_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction execution.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        execution_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.
        execution_cost_unit_loan:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum number of cost units which can be used before fee is locked from a vault.
        finalization_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction finalization.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        finalization_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction finalization.
        xrd_usd_price:
          type: string
          description: |
            The string-encoded decimal representing what amount of XRD is consumed by a Royalty of 1 USD.
            This is fixed for a given protocol version, so is not an accurate representation of the XRD price.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of state storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_archive_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of archive storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          deprecated: true
          description: |
            NOTE: V2 transactions specify the tip in basis points, which gets rounded down for this `tip_percentage` field.
            It is recommended to instead use the `tip_proportion` field to get a fully accurate value.

            An integer between `0` and `65535`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
        tip_proportion:
          type: string
          description: |
            A string-encoded decimal, giving the validator tip as a proportional amount.
            A value of `"0.01"` corresponds to 1% of the fee being paid as a tip.

            NOTE: This field is not marked as required for Cuttlefish launch, to permit cuttlefish clients to talk to pre-cuttlefish nodes.
            This can be changed after Cuttlefish enactment once all nodes are on Cuttlefish.
    FeeSource:
      type: object
      required:
        - from_vaults
      properties:
        from_vaults:
          type: array
          description: A breakdown of which vaults were used to pay the fee.
          items:
            $ref: "#/components/schemas/PaymentFromVault"
    PaymentFromVault:
      type: object
      required:
        - vault_entity
        - xrd_amount
      properties:
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid by this vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    FeeDestination:
      type: object
      required:
        - to_proposer
        - to_validator_set
        - to_burn
        - to_royalty_recipients
      properties:
        to_proposer:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid to the proposer.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        to_validator_set:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid to the validator set.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        to_burn:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee burnt, in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        to_royalty_recipients:
          type: array
          description: |
            A breakdown of where the royalties were paid to.
          items:
            $ref: "#/components/schemas/PaymentToRoyaltyRecipient"
    PaymentToRoyaltyRecipient:
      type: object
      required:
        - royalty_recipient
        - xrd_amount
      properties:
        royalty_recipient:
          $ref: "#/components/schemas/EntityReference"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of fee in XRD paid as royalty to this recipient.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    ProposerReward:
      type: object
      required:
        - validator_index
        - xrd_amount
      properties:
        validator_index:
          $ref: "#/components/schemas/ActiveValidatorIndex"
        xrd_amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of reward in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    StateUpdates:
      type: object
      description: Transaction state updates (only present if status is Succeeded or Failed)
      required:
        - deleted_partitions
        - created_substates
        - updated_substates
        - deleted_substates
        - new_global_entities
      properties:
        deleted_partitions:
          type: array
          items:
            $ref: "#/components/schemas/PartitionId"
        created_substates:
          type: array
          items:
            $ref: "#/components/schemas/CreatedSubstate"
        updated_substates:
          type: array
          items:
            $ref: "#/components/schemas/UpdatedSubstate"
        deleted_substates:
          type: array
          items:
            $ref: "#/components/schemas/DeletedSubstate"
        new_global_entities:
          type: array
          items:
            $ref: "#/components/schemas/EntityReference"
    NextEpoch:
      type: object
      required:
        - epoch
        - validators
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the new epoch
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ActiveValidator'
          description: Active validator set for the new epoch, ordered by stake descending.
        significant_protocol_update_readiness:
          type: array
          items:
            $ref: '#/components/schemas/SignificantProtocolUpdateReadinessEntry'
    SignificantProtocolUpdateReadinessEntry:
      type: object
      required:
        - readiness_signal_name
        - signalled_stake
      properties:
        readiness_signal_name:
          type: string
        signalled_stake:
          type: string
    CreatedSubstate:
      type: object
      required:
        - substate_id
        - value
        - system_structure
      properties:
        substate_id:
          $ref: "#/components/schemas/SubstateId"
        value:
          $ref: "#/components/schemas/SubstateValue"
          description: The initial value assigned to the substate.
        system_structure:
          $ref: "#/components/schemas/SubstateSystemStructure"
          description: A structure with type references describing the substate's schema.
    UpdatedSubstate:
      type: object
      required:
        - substate_id
        - new_value
        - system_structure
      properties:
        substate_id:
          $ref: "#/components/schemas/SubstateId"
        new_value:
          $ref: "#/components/schemas/SubstateValue"
          description: The new value assigned to the substate.
        previous_value:
          $ref: "#/components/schemas/SubstateValue"
          description: The previous value of the substate. Only returned if enabled in SubstateFormatOptions on your request (default false).
        system_structure:
          $ref: "#/components/schemas/SubstateSystemStructure"
          description: A structure with type references describing the substate's schema.
    SubstateValue:
      type: object
      properties:
        substate_hex:
          type: string
          description: The hex-encoded, SBOR-encoded substate data bytes. Only returned if enabled in SubstateFormatOptions on your request (default false).
        substate_data_hash:
          type: string
          description: The hex-encoded Blake2b-256 hash of the substate data bytes. Only returned if enabled in SubstateFormatOptions on your request (default false).
        substate_data:
          $ref: "#/components/schemas/Substate"
          description: The typed substate value. Only returned if enabled in SubstateFormatOptions on your request (default true).
    DeletedSubstate:
      type: object
      required:
        - substate_id
        - system_structure
      properties:
        substate_id:
          $ref: "#/components/schemas/SubstateId"
        previous_value:
          $ref: "#/components/schemas/SubstateValue"
          description: The previous value of the substate. Only returned if enabled in SubstateFormatOptions on your request (default false).
        system_structure:
          $ref: "#/components/schemas/SubstateSystemStructure"
          description: A structure with type references describing the substate's schema.
    EntityReference:
      type: object
      required:
        - entity_type
        - is_global
        - entity_address
      properties:
        entity_type:
          $ref: "#/components/schemas/EntityType"
        is_global:
          type: boolean
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
    PartitionId:
      type: object
      required:
        - entity_type
        - entity_address
        - entity_module
        - partition_kind
        - partition_number
      properties:
        entity_type:
          $ref: "#/components/schemas/EntityType"
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        entity_module:
          $ref: "#/components/schemas/EntityModule"
        partition_kind:
          $ref: "#/components/schemas/PartitionKind"
        partition_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
    SubstateId:
      allOf:
        - $ref: "#/components/schemas/PartitionId"
        - type: object
          required:
            - substate_type
            - substate_key
          properties:
            substate_type:
              $ref: "#/components/schemas/SubstateType"
            substate_key:
              $ref: "#/components/schemas/SubstateKey"
    EntityModule:
      type: string
      enum:
        - TypeInfo
        - Metadata
        - RoleAssignment
        - Royalty
        - Main
        - Schema
        - BootLoader
        - ProtocolUpdateStatus
    PartitionKind:
      type: string
      description: |
        The type of the partition:
        - Field
          - Has key: TupleKey(u8) also known as an offset
          - No iteration exposed to engine
          - Is versioned / locked substate-by-substate
        - KeyValue ("ConcurrentMap")
          - Has key: MapKey(Vec<u8>)
          - No iteration exposed to engine
          - Is versioned / locked substate-by-substate
        - Index
          - Has key: MapKey(Vec<u8>)
          - Iteration exposed to engine via the MapKey's database key (ie hash of the key)
          - Is versioned / locked in its entirety
        - SortedIndex
          - Has key: SortedU16Key(U16, Vec<u8>)
          - Iteration exposed to engine via the user-controlled U16 prefix and then the MapKey's database key (ie hash of the key)
          - Is versioned / locked in its entirety
      enum:
        - Field
        - KeyValue
        - Index
        - SortedIndex
    PartitionDescriptionType:
      type: string
      enum:
        - Logical
        - Physical
    PartitionDescription:
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: '#/components/schemas/PartitionDescriptionType'
        value:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: |
            An absolute or relative partition description, depending on the `type`:
            - if `Physical`, then this is a partition number,
            - if `Logical`, then this is a partition offset.
    BlueprintPayloadDefType:
      type: string
      enum:
        - Static
        - Generic
    BlueprintPayloadDef:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/BlueprintPayloadDefType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintPayloadDefType
          Static: '#/components/schemas/StaticBlueprintPayloadDef'
          Generic: '#/components/schemas/GenericBlueprintPayloadDef'
    StaticBlueprintPayloadDef:
      allOf:
        - $ref: "#/components/schemas/BlueprintPayloadDef"
        - type: object
          required:
            - type_id
          properties:
            type_id:
              $ref: "#/components/schemas/ScopedTypeId"
    GenericBlueprintPayloadDef:
      allOf:
        - $ref: "#/components/schemas/BlueprintPayloadDef"
        - type: object
          required:
            - generic_index
          properties:
            generic_index:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
              description: An index within the list of generic type substitutions.
    FullyScopedTypeId:
      type: object
      description: |
        An identifier for a type in the context of a schema in an entity's schema partition.

        Note - this type provides a schema context even for well-known types where this context
        is effectively irrelevant.
      required:
        - entity_address
        - schema_hash
        - local_type_id
      properties:
        entity_address:
          $ref: '#/components/schemas/EntityAddress'
        schema_hash:
          $ref: '#/components/schemas/SchemaHash'
        local_type_id:
          $ref: '#/components/schemas/LocalTypeId'
    ScopedTypeId:
      type: object
      description: |
        An identifier for a type in the context of a schema.

        The location of the schema store to locate the schema is not included, and
        is known from context. Currently the schema store will be in the
        schema partition under a node (typically a package).

        Note - this type provides scoping to a schema even for well-known types where
        the schema is irrelevant.
      required:
        - schema_hash
        - local_type_id
      properties:
        schema_hash:
          $ref: '#/components/schemas/SchemaHash'
        local_type_id:
          $ref: '#/components/schemas/LocalTypeId'
    BlueprintTypeIdentifier:
      type: object
      description: |
        An identifier for a defined type in the v1 blueprint version under the given package blueprint.
      required:
        - package_address
        - blueprint_name
        - type_name
      properties:
        package_address:
          $ref: '#/components/schemas/PackageAddress'
        blueprint_name:
          type: string
        type_name:
          type: string
    SubstateKey:
      type: object
      required:
        - key_type
        - db_sort_key_hex
      properties:
        key_type:
          $ref: '#/components/schemas/SubstateKeyType'
        db_sort_key_hex:
          type: string
          description: The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
      discriminator:
        propertyName: key_type
        mapping:
          Field: '#/components/schemas/FieldSubstateKey'
          Map: '#/components/schemas/MapSubstateKey'
          Sorted: '#/components/schemas/SortedSubstateKey'
    SubstateKeyType:
      type: string
      enum:
        - Field
        - Map
        - Sorted
    FieldSubstateKey:
      allOf:
        - $ref: "#/components/schemas/SubstateKey"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
    MapSubstateKey:
      allOf:
        - $ref: "#/components/schemas/SubstateKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              description: The hex-encoded bytes of the substate key
    SortedSubstateKey:
      allOf:
        - $ref: "#/components/schemas/SubstateKey"
        - type: object
          required:
            - sort_prefix_hex
            - key_hex
          properties:
            sort_prefix_hex:
              type: string
              description: The hex-encoded bytes of the sorted part of the key
            key_hex:
              type: string
              description: The hex-encoded remaining bytes of the key
    ResourceAddress:
      type: string
      description: The Bech32m-encoded human readable version of the resource address
    ComponentAddress:
      type: string
      description: The Bech32m-encoded human readable version of the component address
    PackageAddress:
      type: string
      description: The Bech32m-encoded human readable version of the package address
    GlobalAddress:
      type: string
      description: The Bech32m-encoded human readable version of any global address
    InstantMs:
      type: object
      required:
        - unix_timestamp_ms
        - date_time
      properties:
        unix_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the unix timestamp in ms.
        date_time:
          type: string
          description: |
            The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use "Z"
            (denoting UTC) and include milliseconds (even if `000`).
            E.g.: `2023-01-26T18:30:09.453Z`.
    ScryptoInstant:
      type: object
      required:
        - unix_timestamp_seconds
      properties:
        unix_timestamp_seconds:
          type: string
          description: |
            A decimal string-encoded 64-bit signed integer, marking the unix timestamp in seconds.

            Note: this field accurately represents the full range of possible on-ledger values (i.e.
            `-2^63 <= seconds < 2^63`). This is contrary to the `InstantMs` type used in other
            places of this API.
        date_time:
          type: string
          description: |
            The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use "Z"
            (denoting UTC) and a second-precision (i.e. *skipping* the `.000` milliseconds part).
            E.g.: `2023-01-26T18:30:09Z`.

            Note: This field will *not* be present if the actual on-ledger `unix_timestamp_seconds`
            value is outside the basic range supported by the RFC 3339 / ISO 8601 standard, which
            starts at year 1583 (i.e. the beginning of the Gregorian calendar) and ends at year
            9999 (inclusive).
    InstructionResourceChanges:
      type: object
      required:
        - index
        - resource_changes
      properties:
        index:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        resource_changes:
          type: array
          items:
            $ref: '#/components/schemas/ResourceChange'
    ResourceChange:
      type: object
      required:
        - resource_address
        - component_entity
        - vault_entity
        - amount
      properties:
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        component_entity:
          $ref: "#/components/schemas/EntityReference"
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
        amount:
          type: string
          description: |
            The string-encoded decimal representing the XRD amount put or taken from the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    Event:
      description: Event emitted by a transaction.
      type: object
      required:
        - type
        - data
      properties:
        type:
          $ref: "#/components/schemas/EventTypeIdentifier"
        data:
          $ref: "#/components/schemas/SborData"
    EventTypeIdentifier:
      description: Identifier of a specific event schema.
      type: object
      required:
        - emitter
        - type_reference
        - name
      properties:
        emitter:
          $ref: "#/components/schemas/EventEmitterIdentifier"
        type_reference:
          $ref: '#/components/schemas/PackageTypeReference'
        name:
          type: string
    EventEmitterIdentifierType:
      type: string
      enum:
        - Function
        - Method
    EventEmitterIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/EventEmitterIdentifierType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match EventEmitterIdentifierType
          Function: '#/components/schemas/FunctionEventEmitterIdentifier'
          Method: '#/components/schemas/MethodEventEmitterIdentifier'
    FunctionEventEmitterIdentifier:
      allOf:
        - $ref: "#/components/schemas/EventEmitterIdentifier"
        - type: object
          required:
            - package_address
            - blueprint_name
          properties:
            package_address:
              $ref: "#/components/schemas/PackageAddress"
            blueprint_name:
              type: string
              description: The blueprint under the package which emitted the event.
    MethodEventEmitterIdentifier:
      allOf:
        - $ref: "#/components/schemas/EventEmitterIdentifier"
        - type: object
          required:
            - entity
            - object_module_id
          properties:
            entity:
              $ref: "#/components/schemas/EntityReference"
            object_module_id:
              $ref: "#/components/schemas/ModuleId"

#################################################
# GENERAL / SHARED MODELS - keys and signatures #
#################################################
    PublicKeyType:
      type: string
      enum:
        - EcdsaSecp256k1
        - EddsaEd25519
    PublicKey:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/PublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/EcdsaSecp256k1PublicKey'
          EddsaEd25519: '#/components/schemas/EddsaEd25519PublicKey'
    EcdsaSecp256k1PublicKey:
      allOf:
        - $ref: "#/components/schemas/PublicKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              minLength: 66
              maxLength: 66
              description: The hex-encoded compressed ECDSA Secp256k1 public key (33 bytes)
    EddsaEd25519PublicKey:
      allOf:
        - $ref: "#/components/schemas/PublicKey"
        - type: object
          required:
            - key_hex
          properties:
            key_hex:
              type: string
              minLength: 64
              maxLength: 64
              description: The hex-encoded compressed EdDSA Ed25519 public key (32 bytes)
    Signature:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/PublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/EcdsaSecp256k1Signature'
          EddsaEd25519: '#/components/schemas/EddsaEd25519Signature'
    EcdsaSecp256k1Signature:
      allOf:
        - $ref: "#/components/schemas/Signature"
        - type: object
          required:
            - signature_hex
          properties:
            signature_hex:
              type: string
              minLength: 130
              maxLength: 130
              description: A hex-encoded recoverable ECDSA Secp256k1 signature (65 bytes). The first byte is the recovery id, the remaining 64 bytes are the compact signature, ie `CONCAT(R, s)` where `R` and `s` are each 32-bytes in padded big-endian format.
    EddsaEd25519Signature:
      allOf:
        - $ref: "#/components/schemas/Signature"
        - type: object
          required:
            - signature_hex
          properties:
            signature_hex:
              type: string
              minLength: 128
              maxLength: 128
              description: A hex-encoded EdDSA Ed25519 signature (64 bytes). This is `CONCAT(R, s)` where `R` and `s` are each 32-bytes in padded big-endian format.
    SignatureWithPublicKey:
      type: object
      required:
        - key_type
      properties:
        key_type:
          $ref: "#/components/schemas/PublicKeyType"
      discriminator:
        propertyName: key_type
        mapping:
          # NOTE: These need to match PublicKeyType
          EcdsaSecp256k1: '#/components/schemas/EcdsaSecp256k1SignatureWithPublicKey'
          EddsaEd25519: '#/components/schemas/EddsaEd25519SignatureWithPublicKey'
    EcdsaSecp256k1SignatureWithPublicKey:
      allOf:
        - $ref: "#/components/schemas/SignatureWithPublicKey"
        - type: object
          required:
            - recoverable_signature
          description: Because ECDSA has recoverable signatures, this only includes a signature
          properties:
            recoverable_signature:
              $ref: '#/components/schemas/EcdsaSecp256k1Signature'
    EddsaEd25519SignatureWithPublicKey:
      allOf:
        - $ref: "#/components/schemas/SignatureWithPublicKey"
        - type: object
          required:
            - public_key
            - signature
          description: The EdDSA public key and signature
          properties:
            public_key:
              $ref: '#/components/schemas/EddsaEd25519PublicKey'
            signature:
              $ref: '#/components/schemas/EddsaEd25519Signature'
##########################################
# GENERAL / SHARED MODELS - Access Rules #
##########################################
    AccessRuleType:
      type: string
      enum:
        - Protected
        - AllowAll
        - DenyAll
    AccessRule:
      type: object
      description: |
        A representation of an access rule in the Radix Engine.

        Note that some of the field and discriminator names use an older naming schema,
        for backwards compatibility.

        See the [advanced access rules](https://docs.radixdlt.com/docs/advanced-accessrules) docs for more information.
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AccessRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleType options above
          Protected: '#/components/schemas/ProtectedAccessRule'
          AllowAll: '#/components/schemas/AllowAllAccessRule'
          DenyAll: '#/components/schemas/DenyAllAccessRule'
    ProtectedAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
          required:
            - access_rule
          properties:
            access_rule:
              $ref: '#/components/schemas/CompositeRequirement'
    AllowAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
    DenyAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
    CompositeRequirementType:
      type: string
      description: |
        `ProofRule` is now called `BasicRequirement`.
      enum:
        - ProofRule
        - AnyOf
        - AllOf
    CompositeRequirement:
      type: object
      required:
        - type
      description: |
        This type was historically called `AccessRuleNode`.
      properties:
        type:
          $ref: '#/components/schemas/CompositeRequirementType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match CompositeRequirementType options above
          ProofRule: '#/components/schemas/ProofRuleCompositeRequirement'
          AnyOf: '#/components/schemas/AnyOfCompositeRequirement'
          AllOf: '#/components/schemas/AllOfCompositeRequirement'
    ProofRuleCompositeRequirement:
      allOf:
        - $ref: '#/components/schemas/CompositeRequirement'
        - type: object
          required:
            - proof_rule
          properties:
            proof_rule:
              $ref: '#/components/schemas/BasicRequirement'
    AnyOfCompositeRequirement:
      allOf:
        - $ref: '#/components/schemas/CompositeRequirement'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/CompositeRequirement'
    AllOfCompositeRequirement:
      allOf:
        - $ref: '#/components/schemas/CompositeRequirement'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/CompositeRequirement'
    BasicRequirementType:
      type: string
      enum:
        - Require
        - AmountOf
        - AllOf
        - AnyOf
        - CountOf
    BasicRequirement:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/BasicRequirementType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BasicRequirementType options above
          Require: '#/components/schemas/RequireBasicRequirement'
          AmountOf: '#/components/schemas/AmountOfBasicRequirement'
          AllOf: '#/components/schemas/AllOfBasicRequirement'
          AnyOf: '#/components/schemas/AnyOfBasicRequirement'
          CountOf: '#/components/schemas/CountOfBasicRequirement'
    RequireBasicRequirement:
      allOf:
        - $ref: '#/components/schemas/BasicRequirement'
        - type: object
          required:
            - requirement
          properties:
            requirement:
              $ref: '#/components/schemas/Requirement'
    AmountOfBasicRequirement:
      allOf:
        - $ref: '#/components/schemas/BasicRequirement'
        - type: object
          required:
            - amount
            - resource
          properties:
            amount:
              type: string
            resource:
              $ref: '#/components/schemas/ResourceAddress'
    AllOfBasicRequirement:
      allOf:
        - $ref: '#/components/schemas/BasicRequirement'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    AnyOfBasicRequirement:
      allOf:
        - $ref: '#/components/schemas/BasicRequirement'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    CountOfBasicRequirement:
      allOf:
        - $ref: '#/components/schemas/BasicRequirement'
        - type: object
          required:
            - count
            - list
          properties:
            count:
              type: integer
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    Requirement:
      type: object
      description: This is called `ResourceOrNonFungible` in the engine.
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/RequirementType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match RequirementType options below
          Resource: '#/components/schemas/ResourceRequirement'
          NonFungible: '#/components/schemas/NonFungibleRequirement'
    RequirementType:
      type: string
      enum:
        - Resource
        - NonFungible
    ResourceRequirement:
      allOf:
        - $ref: '#/components/schemas/Requirement'
        - type: object
          required:
            - resource
          properties:
            resource:
              $ref: '#/components/schemas/ResourceAddress'
    NonFungibleRequirement:
      allOf:
        - $ref: '#/components/schemas/Requirement'
        - type: object
          required:
            - non_fungible
          properties:
            non_fungible:
              $ref: '#/components/schemas/NonFungibleGlobalId'
    OwnerRole:
      type: object
      required:
        - rule
        - updater
      properties:
        rule:
          $ref: '#/components/schemas/AccessRule'
        updater:
          $ref: '#/components/schemas/OwnerRoleUpdater'
    OwnerRoleUpdater:
      type: string
      enum:
        - None
        - Owner
        - Object
#######################################
# GENERAL / SHARED MODELS - Resources #
#######################################
    ResourceType:
      type: string
      enum:
        - Fungible
        - NonFungible
    NonFungibleIdType:
      type: string
      enum:
        - String
        - Integer
        - Bytes
        - RUID
    NonFungibleLocalId:
      type: object
      required:
        - simple_rep
        - id_type
        - sbor_hex
      properties:
        simple_rep:
          $ref: '#/components/schemas/NonFungibleLocalIdSimpleRepresentation'
        id_type:
          $ref: '#/components/schemas/NonFungibleIdType'
        sbor_hex:
          type: string
          description: The hex-encoded SBOR-encoded bytes of its non-fungible id
    NonFungibleLocalIdSimpleRepresentation:
      type: string
      description: |
        The simple string representation of the non-fungible id.
        * For string ids, this is `<the-string-id>`
        * For integer ids, this is `#the-integer-id#`
        * For bytes ids, this is `[the-lower-case-hex-representation]`
        * For RUID ids, this is `{...-...-...-...}` where `...` are each 16 hex characters.
        A given non-fungible resource has a fixed `NonFungibleIdType`, so this representation uniquely identifies this non-fungible
        under the given resource address.
    NonFungibleGlobalId:
      type: object
      required:
        - resource_address
        - local_id
      properties:
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        local_id:
          $ref: "#/components/schemas/NonFungibleLocalId"
    ResourceAmount:
      type: object
      required:
        - resource_type
        - resource_address
      properties:
        resource_type:
          $ref: '#/components/schemas/ResourceType'
        resource_address:
          $ref: '#/components/schemas/ResourceAddress'
      discriminator:
        propertyName: resource_type
        mapping:
          # NOTE: These need to match ResourceType options
          Fungible: '#/components/schemas/FungibleResourceAmount'
          NonFungible: '#/components/schemas/NonFungibleResourceAmount'
    FungibleResourceAmount:
      allOf:
        - $ref: '#/components/schemas/ResourceAmount'
        - type: object
          required:
            - amount
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the amount of this resource (some decimal for fungible resources, a whole integer for non-fungible resources).
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    NonFungibleResourceAmount:
      allOf:
        - $ref: '#/components/schemas/ResourceAmount'
        - type: object
          required:
            - amount
            - non_fungible_ids
          properties:
            amount:
              type: string
              description: |
                The string-encoded decimal representing the amount of this resource (some decimal for fungible resources, a whole integer for non-fungible resources).
                A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
            non_fungible_ids:
              type: array
              items:
                $ref: '#/components/schemas/NonFungibleLocalId'
    PresentedBadgeType:
      type: string
      enum:
        - Resource
        - NonFungible
    PresentedBadge:
      type: object
      required:
        - type
        - resource_address
      properties:
        type:
          $ref: '#/components/schemas/PresentedBadgeType'
        resource_address:
          $ref: '#/components/schemas/ResourceAddress'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PresentedBadgeType options above
          Resource: '#/components/schemas/ResourcePresentedBadge'
          NonFungible: '#/components/schemas/NonFungiblePresentedBadge'
    ResourcePresentedBadge:
      allOf:
        - $ref: '#/components/schemas/PresentedBadge'
        - type: object
    NonFungiblePresentedBadge:
      allOf:
        - $ref: '#/components/schemas/PresentedBadge'
        - type: object
          required:
            - local_id
          properties:
            local_id:
              $ref: '#/components/schemas/NonFungibleLocalIdSimpleRepresentation'
##################################
# GENERAL / SHARED MODELS - SBOR #
##################################
    DataStruct:
      type: object
      required:
        - struct_data
        - owned_entities
        - referenced_entities
      properties:
        struct_data:
          $ref: '#/components/schemas/SborData'
          description: The struct data
        owned_entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        referenced_entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
    SborData:
      description: |
        Various representations of an SBOR payload.
        Some endpoints may allow opting in/out of each representation.
      type: object
      properties:
        hex:
          type: string
          description: The hex-encoded, raw SBOR-encoded data
        programmatic_json:
          description: The (untyped) unannotated programmatic SBOR JSON
#####################################
# GENERAL / SHARED MODELS - Royalty #
#####################################
    BlueprintRoyaltyConfig:
      type: object
      required:
        - is_enabled
      properties:
        is_enabled:
          type: boolean
        method_rules:
          description: The royalty rules by method. The array is only present if royalties are enabled.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintMethodRoyalty'
    BlueprintMethodRoyalty:
      type: object
      required:
        - method_name
      properties:
        method_name:
          type: string
        royalty_amount:
          description: The due royalty; missing field denotes a free method.
          $ref: '#/components/schemas/RoyaltyAmount'
    RoyaltyAmount:
      type: object
      required:
        - amount
        - unit
      properties:
        amount:
          $ref: '#/components/schemas/Decimal'
        unit:
          type: string
          enum:
            - XRD
            - USD
########################################
# GENERAL / SHARED MODELS - validators #
########################################
    ActiveValidator:
      type: object
      required:
        - address
        - key
        - stake
      properties:
        address:
          $ref: '#/components/schemas/ComponentAddress'
        key:
          $ref: '#/components/schemas/EcdsaSecp256k1PublicKey'
        stake:
          type: string
          description: |
            A string-encoded decimal representing the validator's voting power for this epoch.
            This is a snapshot of the amount of XRD staked to the validator at the start of the epoch.
#####################################
# GENERAL / SHARED MODELS - schemas #
#####################################
    ScryptoSchema:
      type: object
      required:
        - sbor_data
      properties:
        sbor_data:
          $ref: '#/components/schemas/SborData'
    BlueprintDefinition:
      type: object
      required:
        - interface
        - function_exports
        - hook_exports
      properties:
        interface:
          $ref: '#/components/schemas/BlueprintInterface'
        function_exports:
          type: object
          description: A map from the function name to its export
          additionalProperties:
            $ref: '#/components/schemas/PackageExport'
        hook_exports:
          type: array
          description: |
            A map from certain object lifecycle hooks to a callback "package export".
            There is at most one callback registered for each `ObjectHook`.
          items:
            $ref: '#/components/schemas/HookExport'
    HookExport:
      type: object
      required:
        - object_hook
        - export
      properties:
        object_hook:
          $ref: '#/components/schemas/ObjectHook'
        export:
          $ref: '#/components/schemas/PackageExport'
    ObjectHook:
      type: string
      enum:
        - OnVirtualize
        - OnMove
        - OnDrop
    BlueprintDependencies:
      type: object
      required:
        - dependencies
      properties:
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/GlobalAddress'
    BlueprintInterface:
      type: object
      required:
        - generic_type_parameters
        - is_transient
        - features
        - state
        - functions
        - events
        - types
      properties:
        outer_blueprint:
          type: string
        generic_type_parameters:
          description: |
            Generic (SBOR) type parameters which need to be filled by a concrete instance
            of this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/GenericTypeParameter'
        is_transient:
          type: boolean
          description: If true, an instantiation of this blueprint cannot be persisted. EG buckets and proofs are transient.
        features:
          type: array
          items:
            type: string
        state:
          $ref: '#/components/schemas/IndexedStateSchema'
        functions:
          type: object
          description: A map from the function name to the FunctionSchema
          additionalProperties:
            $ref: '#/components/schemas/FunctionSchema'
        events:
          type: object
          description: A map from the event name to the event payload type reference.
          additionalProperties:
            $ref: '#/components/schemas/BlueprintPayloadDef'
        types:
          type: object
          description: |
            A map from the registered type name to the concrete type,
            resolved against a schema from the package's schema partition.
          additionalProperties:
            $ref: '#/components/schemas/ScopedTypeId'
    IndexedStateSchema:
      type: object
      required:
        - collections
        - num_partitions
      properties:
        fields:
          $ref: '#/components/schemas/BlueprintSchemaFieldPartition'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/BlueprintSchemaCollectionPartition'
        num_partitions:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
    GenericTypeParameter:
      type: object
      required:
        - constraints
      properties:
        constraints:
          $ref: '#/components/schemas/GenericTypeParameterConstraints'
    GenericTypeParameterConstraints:
      type: string
      enum:
        - Any
      description: |
        The constraints on the concrete type provided to fill the generic type parameter.
        Note: currently, we only support the wildcard (i.e. `Any`) generic type.
    SubstateSystemStructureType:
      type: string
      enum:
        - SystemField
        - SystemSchema
        - KeyValueStoreEntry
        - ObjectField
        - ObjectKeyValuePartitionEntry
        - ObjectIndexPartitionEntry
        - ObjectSortedIndexPartitionEntry
    SubstateSystemStructure:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/SubstateSystemStructureType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match SubstateSystemStructureType
          SystemField: '#/components/schemas/SystemFieldStructure'
          SystemSchema: '#/components/schemas/SystemSchemaStructure'
          KeyValueStoreEntry: '#/components/schemas/KeyValueStoreEntryStructure'
          ObjectField: '#/components/schemas/ObjectFieldStructure'
          ObjectKeyValuePartitionEntry: '#/components/schemas/ObjectKeyValuePartitionEntryStructure'
          ObjectIndexPartitionEntry: '#/components/schemas/ObjectIndexPartitionEntryStructure'
          ObjectSortedIndexPartitionEntry: '#/components/schemas/ObjectSortedIndexPartitionEntryStructure'
    SystemFieldStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - type: object
          required:
            - field_kind
          properties:
            field_kind:
              $ref: "#/components/schemas/SystemFieldKind"
    SystemSchemaStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - type: object
    KeyValueStoreEntryStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - type: object
          required:
            - key_full_type_id
            - value_full_type_id
          properties:
            key_full_type_id:
              $ref: "#/components/schemas/FullyScopedTypeId"
            value_full_type_id:
              $ref: '#/components/schemas/FullyScopedTypeId'
    ObjectFieldStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - type: object
          required:
            - value_schema
          properties:
            value_schema:
              $ref: "#/components/schemas/ObjectSubstateTypeReference"
    ObjectKeyValuePartitionEntryStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - $ref: "#/components/schemas/KeyValueBasedStructure"
    ObjectIndexPartitionEntryStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - $ref: "#/components/schemas/KeyValueBasedStructure"
    ObjectSortedIndexPartitionEntryStructure:
      allOf:
        - $ref: "#/components/schemas/SubstateSystemStructure"
        - $ref: "#/components/schemas/KeyValueBasedStructure"
    KeyValueBasedStructure:
      type: object
      required:
        - key_schema
        - value_schema
      properties:
        key_schema:
          $ref: "#/components/schemas/ObjectSubstateTypeReference"
        value_schema:
          $ref: "#/components/schemas/ObjectSubstateTypeReference"
    SystemFieldKind:
      type: string
      enum:
        # Note: the weird ordering here maintains backwards compatibility (of enum ordinals):
        - VmBoot
        - TypeInfo
        - SystemBoot
        - KernelBoot
        - TransactionValidationConfiguration
        - ProtocolUpdateStatusSummary
    ObjectSubstateTypeReferenceType:
      type: string
      enum:
        - Package
        - ObjectInstance
    ObjectSubstateTypeReference:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ObjectSubstateTypeReferenceType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ObjectSubstateTypeReferenceType
          Package: '#/components/schemas/PackageObjectSubstateTypeReference'
          ObjectInstance: '#/components/schemas/ObjectInstanceTypeReference'
    PackageObjectSubstateTypeReference:
      allOf:
        - $ref: "#/components/schemas/ObjectSubstateTypeReference"
        - $ref: "#/components/schemas/PackageTypeReference"
    ObjectInstanceTypeReference:
      allOf:
        - $ref: "#/components/schemas/ObjectSubstateTypeReference"
        - type: object
          required:
            - resolved_full_type_id
            - generic_index
          properties:
            resolved_full_type_id:
              $ref: "#/components/schemas/FullyScopedTypeId"
            generic_index:
              description: |
                The index of the generic parameter in the instance definition.
                Was called the `instance_type_index`.
              type: integer
              format: int32
              minimum: 0
              maximum: 255
    PackageTypeReference:
      type: object
      required:
        - full_type_id
      properties:
        full_type_id:
          $ref: "#/components/schemas/FullyScopedTypeId"
    PackageExport:
      type: object
      required:
        - code_hash
        - export_name
      properties:
        code_hash:
          $ref: '#/components/schemas/CodeHash'
        export_name:
          type: string
    CodeHash:
      type: string
      minLength: 64
      maxLength: 64
      description: The hex-encoded code hash, capturing the vm-type and the code itself.
    SchemaHash:
      type: string
      minLength: 64
      maxLength: 64
      description: The hex-encoded schema hash, capturing the identity of an SBOR schema.
    AuthConfig:
      type: object
      required:
        - function_auth_type
        - method_auth_type
      properties:
        function_auth_type:
          $ref: '#/components/schemas/FunctionAuthType'
        function_access_rules:
          type: object
          description: |
            A map from a function name to AccessRule.
            Only exists if `function_auth_type` is set to `FunctionAccessRules`.
          additionalProperties:
            $ref: '#/components/schemas/AccessRule'
        method_auth_type:
          $ref: '#/components/schemas/MethodAuthType'
        method_roles:
          $ref: '#/components/schemas/StaticRoleDefinitionAuthTemplate'
    FunctionAuthType:
      type: string
      enum:
        - AllowAll
        - FunctionAccessRules
        - RootOnly
    MethodAuthType:
      type: string
      enum:
        - AllowAll
        - StaticRoleDefinition
    StaticRoleDefinitionAuthTemplate:
      type: object
      required:
        - role_specification
        - method_accessibility_map
      properties:
        role_specification:
          $ref: '#/components/schemas/RoleSpecification'
        roles:
          type: object
          description: A map from role name to role details
          additionalProperties:
            $ref: '#/components/schemas/RoleDetails'
        method_accessibility_map:
          type: object
          description: A map from a method identifier to MethodAccessibility
          additionalProperties:
            $ref: '#/components/schemas/MethodAccessibility'
    RoleSpecification:
      type: string
      enum:
        - Normal
        - UseOuter
    RoleDetails:
      type: object
      required:
        - updater_roles
      properties:
        updater_roles:
          type: array
          items:
            type: string
    MethodAccessibilityType:
      type: string
      enum:
        - Public
        - OuterObjectOnly
        - RoleProtected
        - OwnPackageOnly
    MethodAccessibility:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/MethodAccessibilityType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match MethodAccessibilityType options above
          Public: '#/components/schemas/PublicMethodAccessibility'
          OuterObjectOnly: '#/components/schemas/OuterObjectOnlyMethodAccessibility'
          RoleProtected: '#/components/schemas/RoleProtectedMethodAccessibility'
          OwnPackageOnly: '#/components/schemas/OwnPackageOnlyMethodAccessibility'
    PublicMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/MethodAccessibility'
        - type: object
    OuterObjectOnlyMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/MethodAccessibility'
        - type: object
    RoleProtectedMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/MethodAccessibility'
        - type: object
          required:
            - allowed_roles
          properties:
            allowed_roles:
              type: array
              items:
                type: string
    OwnPackageOnlyMethodAccessibility:
      allOf:
        - $ref: '#/components/schemas/MethodAccessibility'
        - type: object
    BlueprintSchemaFieldPartition:
      type: object
      description: The fields partition of the blueprint.
      required:
        - partition_description
        - fields
      properties:
        partition_description:
          $ref: '#/components/schemas/PartitionDescription'
        fields:
          type: array
          description: The field substates for this blueprint.
          items:
            $ref: '#/components/schemas/FieldSchema'
    FieldSchema:
      type: object
      required:
        - field_type_ref
      properties:
        field_type_ref:
          $ref: '#/components/schemas/BlueprintPayloadDef'
        condition:
          $ref: '#/components/schemas/FieldSchemaFeatureCondition'
        transient_default_value_hex:
          type: string
          description: The hex-encoded default value of this field. Only present if this field is transient.
    FieldSchemaFeatureConditionType:
      type: string
      enum:
        - Always
        - IfOwnFeature
        - IfOuterObjectFeature
    FieldSchemaFeatureCondition:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/FieldSchemaFeatureConditionType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match FieldSchemaFeatureConditionType options
          Always: '#/components/schemas/FieldSchemaFeatureConditionAlways'
          IfOwnFeature: '#/components/schemas/FieldSchemaFeatureConditionIfOwnFeature'
          IfOuterObjectFeature: '#/components/schemas/FieldSchemaFeatureConditionIfOuterObjectFeature'
    FieldSchemaFeatureConditionAlways:
      allOf:
        - $ref: "#/components/schemas/FieldSchemaFeatureCondition"
        - type: object
    FieldSchemaFeatureConditionIfOwnFeature:
      allOf:
        - $ref: "#/components/schemas/FieldSchemaFeatureCondition"
        - type: object
          required:
            - feature_name
          properties:
            feature_name:
              type: string
    FieldSchemaFeatureConditionIfOuterObjectFeature:
      allOf:
        - $ref: "#/components/schemas/FieldSchemaFeatureCondition"
        - type: object
          required:
            - feature_name
          properties:
            feature_name:
              type: string
    BlueprintSchemaCollectionPartition:
      type: object
      description: The fields partition of the blueprint.
      required:
        - partition_description
        - collection_schema
      properties:
        partition_description:
          $ref: '#/components/schemas/PartitionDescription'
        collection_schema:
          $ref: '#/components/schemas/BlueprintCollectionSchema'
    BlueprintCollectionSchema:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/BlueprintCollectionSchemaType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PublicKeyType
          KeyValue: '#/components/schemas/KeyValueBlueprintCollectionSchema'
          Index: '#/components/schemas/IndexBlueprintCollectionSchema'
          SortedIndex: '#/components/schemas/SortedIndexBlueprintCollectionSchema'
    BlueprintCollectionSchemaType:
      type: string
      enum:
        - KeyValue
        - Index
        - SortedIndex
    KeyValueBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/BlueprintCollectionSchema"
        - type: object
          required:
            - key_type_ref
            - value_type_ref
            - allow_ownership
          properties:
            key_type_ref:
              $ref: "#/components/schemas/BlueprintPayloadDef"
            value_type_ref:
              $ref: "#/components/schemas/BlueprintPayloadDef"
            allow_ownership:
              type: boolean
              description: Whether the entries of the key-value partition are allowed to own child nodes.
    IndexBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/BlueprintCollectionSchema"
        - type: object
          required:
            - key_type_ref
            - value_type_ref
            - allow_ownership
          properties:
            key_type_ref:
              $ref: "#/components/schemas/BlueprintPayloadDef"
            value_type_ref:
              $ref: "#/components/schemas/BlueprintPayloadDef"
            allow_ownership:
              type: boolean
              description: Whether the entries of the index partition are allowed to own child nodes.
    SortedIndexBlueprintCollectionSchema:
      allOf:
        - $ref: "#/components/schemas/BlueprintCollectionSchema"
        - type: object
          required:
            - key_type_ref
            - value_type_ref
            - allow_ownership
          properties:
            key_type_ref:
              $ref: "#/components/schemas/BlueprintPayloadDef"
            value_type_ref:
              $ref: "#/components/schemas/BlueprintPayloadDef"
            allow_ownership:
              type: boolean
              description: Whether the entries of the sorted index partition are allowed to own child nodes.
    BlueprintTypeReference:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/BlueprintTypeReferenceKind"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PublicKeyType
          BlueprintSchema: '#/components/schemas/BlueprintSchemaBlueprintTypeReference'
          InstanceSchema: '#/components/schemas/InstanceSchemaBlueprintTypeReference'
    BlueprintTypeReferenceKind:
      type: string
      enum:
        - BlueprintSchema
        - InstanceSchema
    BlueprintSchemaBlueprintTypeReference:
      allOf:
        - $ref: "#/components/schemas/BlueprintTypeReference"
        - type: object
          required:
            - local_type_id
          properties:
            local_type_id:
              $ref: "#/components/schemas/LocalTypeId"
    InstanceSchemaBlueprintTypeReference:
      allOf:
        - $ref: "#/components/schemas/BlueprintTypeReference"
        - type: object
          required:
            - instance_provided_type_index
          properties:
            instance_provided_type_index:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
              description: Provided by an instance's schema at the given index in its provided types array.
    LocalTypeId:
      type: object
      required:
        - kind
        - id
        - as_sbor
      properties:
        kind:
          type: string
          description: The location against which to resolve this type reference.
          enum:
            - WellKnown
            - SchemaLocal
        id:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            A reference to a type, interpreted according to `kind`:
            - If `WellKnown`, then it is a pointer to a well known scrypto type with that ID,
            - If `SchemaLocal`, then it is an index into the given schema.
        as_sbor:
          $ref: '#/components/schemas/SborData'
          description: |
            The SBOR encoding of the LocalTypeId.
            This is useful for passing to the Radix Engine toolkit along with a schema.
    VirtualLazyLoadSchema:
      type: object
      required:
        - export_name
      properties:
        export_name:
          type: string
    FunctionSchema:
      type: object
      required:
        - input
        - output
      properties:
        receiver_info:
          $ref: '#/components/schemas/ReceiverInfo'
        input:
          $ref: '#/components/schemas/BlueprintPayloadDef'
          description: |
            The reference to the function's parameter struct.
        output:
          $ref: '#/components/schemas/BlueprintPayloadDef'
          description: |
            The reference to the function output struct.
    ReceiverInfo:
      type: object
      required:
        - receiver
        - reference_type
      properties:
        receiver:
          type: string
          enum:
            - SelfRef
            - SelfRefMut
        reference_type:
          $ref: '#/components/schemas/ReferenceType'
    ReferenceType:
      type: object
      required:
        - raw_bits
        - normal
        - direct_access
      properties:
        raw_bits:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        normal:
          type: boolean
        direct_access:
          type: boolean
#####################################################
# GENERAL / SHARED MODELS - general substate models #
#####################################################
    EntityType:
      type: string
      description: |
        To improve clarity, some `EntityType` names have been updated at Cuttlefish.

        But, due to backwards compatibility, the old names continue to be used here.

        Notably:
        * `GlobalVirtualSecp256k1Account` is now `GlobalPreallocatedSecp256k1Account` elsewhere
        * `GlobalVirtualSecp256k1Identity` is now `GlobalPreallocatedSecp256k1Identity` elsewhere
        * `GlobalVirtualEd25519Account` is now `GlobalPreallocatedEd25519Account` elsewhere
        * `GlobalVirtualEd25519Identity` is now `GlobalPreallocatedEd25519Identity` elsewhere
      enum:
        - GlobalPackage
        - GlobalConsensusManager
        - GlobalValidator
        - GlobalGenericComponent
        - GlobalAccount
        - GlobalIdentity
        - GlobalAccessController
        - GlobalVirtualSecp256k1Account
        - GlobalVirtualSecp256k1Identity
        - GlobalVirtualEd25519Account
        - GlobalVirtualEd25519Identity
        - GlobalFungibleResource
        - InternalFungibleVault
        - GlobalNonFungibleResource
        - InternalNonFungibleVault
        - InternalGenericComponent
        - InternalKeyValueStore
        - GlobalOneResourcePool
        - GlobalTwoResourcePool
        - GlobalMultiResourcePool
        - GlobalTransactionTracker
        - GlobalAccountLocker
    EntityAddress:
      type: string
      description: Bech32m-encoded human readable version of the entity's address (ie the entity's node id)
    AttachedModuleId:
      type: string
      enum:
        - Metadata
        - Royalty
        - RoleAssignment
    ModuleId:
      type: string
      enum:
        - Main
        - Metadata
        - Royalty
        - RoleAssignment
    Substate:
      type: object
      required:
        - substate_type
        - is_locked
      properties:
        substate_type:
          $ref: '#/components/schemas/SubstateType'
        is_locked:
          type: boolean
      discriminator:
        propertyName: substate_type
        mapping:
          # NOTE:
          # There is an important convention to these names, for consistency:
          #
          # For each distinct typed substate, form [SubstateType] = [ModuleSpecifier][SubstateSpecifier][SubstateTypeVersion]
          # - [ModuleSpecifier] is either [ModuleName]Module for non-main modules, or [EntityType] for main modules
          # - [SubstateSpecifier] is either:
          #   - Field[SubstateDescriptor] for Field partitions
          #   - [SubstateDescriptor]Entry for Collection partitions (KeyValueStore, Index and SortedIndex)
          # - [SubstateTypeVersion] is empty ("") for V1 substates, but will e.g. be V2/V3/V4 for newer substate versions
          #
          # And then define:
          # - [SubstateName] = [SubstateType]Substate
          # - [SubstateValue] = [SubstateType]Value
          #
          # Which are used as follows:
          # - The below mapping has entries of: [SubstateType]: '#/components/schemas/[SubstateName]'
          # - [SubstateType] MUST match the enum SubstateType type defined below
          # - [SubstateName] MUST equal the name of a type below. Such a type must have:
          #   - value - which references the type [SubstateValue]
          #   - key (if it's in a collection partition) - which references a substate key type [X]Key for some X.
          #   - is_locked - this is added to all substates via inclusion on the `Substate` object
          BootLoaderModuleFieldKernelBoot: '#/components/schemas/BootLoaderModuleFieldKernelBootSubstate'
          BootLoaderModuleFieldSystemBoot: '#/components/schemas/BootLoaderModuleFieldSystemBootSubstate'
          BootLoaderModuleFieldVmBoot: '#/components/schemas/BootLoaderModuleFieldVmBootSubstate'
          BootLoaderModuleFieldTransactionValidationConfiguration: '#/components/schemas/BootLoaderModuleFieldTransactionValidationConfigurationSubstate'
          ProtocolUpdateStatusModuleFieldSummary: '#/components/schemas/ProtocolUpdateStatusModuleFieldSummarySubstate'
          TypeInfoModuleFieldTypeInfo: '#/components/schemas/TypeInfoModuleFieldTypeInfoSubstate'
          RoleAssignmentModuleFieldOwnerRole: '#/components/schemas/RoleAssignmentModuleFieldOwnerRoleSubstate'
          RoleAssignmentModuleRuleEntry: '#/components/schemas/RoleAssignmentModuleRuleEntrySubstate'
          RoyaltyModuleFieldState: '#/components/schemas/RoyaltyModuleFieldStateSubstate'
          RoyaltyModuleMethodRoyaltyEntry: '#/components/schemas/RoyaltyModuleMethodRoyaltyEntrySubstate'
          MetadataModuleEntry: '#/components/schemas/MetadataModuleEntrySubstate'
          PackageFieldRoyaltyAccumulator: '#/components/schemas/PackageFieldRoyaltyAccumulatorSubstate'
          PackageCodeVmTypeEntry: '#/components/schemas/PackageCodeVmTypeEntrySubstate'
          PackageCodeOriginalCodeEntry: '#/components/schemas/PackageCodeOriginalCodeEntrySubstate'
          PackageCodeInstrumentedCodeEntry: '#/components/schemas/PackageCodeInstrumentedCodeEntrySubstate'
          SchemaEntry: '#/components/schemas/SchemaEntrySubstate'
          PackageBlueprintDefinitionEntry: '#/components/schemas/PackageBlueprintDefinitionEntrySubstate'
          PackageBlueprintDependenciesEntry: '#/components/schemas/PackageBlueprintDependenciesEntrySubstate'
          PackageBlueprintRoyaltyEntry: '#/components/schemas/PackageBlueprintRoyaltyEntrySubstate'
          PackageBlueprintAuthTemplateEntry: '#/components/schemas/PackageBlueprintAuthTemplateEntrySubstate'
          FungibleResourceManagerFieldDivisibility: '#/components/schemas/FungibleResourceManagerFieldDivisibilitySubstate'
          FungibleResourceManagerFieldTotalSupply: '#/components/schemas/FungibleResourceManagerFieldTotalSupplySubstate'
          NonFungibleResourceManagerFieldIdType: '#/components/schemas/NonFungibleResourceManagerFieldIdTypeSubstate'
          NonFungibleResourceManagerFieldTotalSupply: '#/components/schemas/NonFungibleResourceManagerFieldTotalSupplySubstate'
          NonFungibleResourceManagerFieldMutableFields: '#/components/schemas/NonFungibleResourceManagerFieldMutableFieldsSubstate'
          NonFungibleResourceManagerDataEntry: '#/components/schemas/NonFungibleResourceManagerDataEntrySubstate'
          FungibleVaultFieldBalance: '#/components/schemas/FungibleVaultFieldBalanceSubstate'
          FungibleVaultFieldFrozenStatus: '#/components/schemas/FungibleVaultFieldFrozenStatusSubstate'
          NonFungibleVaultFieldBalance: '#/components/schemas/NonFungibleVaultFieldBalanceSubstate'
          NonFungibleVaultFieldFrozenStatus: '#/components/schemas/NonFungibleVaultFieldFrozenStatusSubstate'
          NonFungibleVaultContentsIndexEntry: '#/components/schemas/NonFungibleVaultContentsIndexEntrySubstate'
          ConsensusManagerFieldConfig: '#/components/schemas/ConsensusManagerFieldConfigSubstate'
          ConsensusManagerFieldState: '#/components/schemas/ConsensusManagerFieldStateSubstate'
          ConsensusManagerFieldCurrentValidatorSet: '#/components/schemas/ConsensusManagerFieldCurrentValidatorSetSubstate'
          ConsensusManagerFieldCurrentProposalStatistic: '#/components/schemas/ConsensusManagerFieldCurrentProposalStatisticSubstate'
          ConsensusManagerFieldCurrentTimeRoundedToMinutes: '#/components/schemas/ConsensusManagerFieldCurrentTimeRoundedToMinutesSubstate'
          ConsensusManagerFieldCurrentTime: '#/components/schemas/ConsensusManagerFieldCurrentTimeSubstate'
          ConsensusManagerFieldValidatorRewards: '#/components/schemas/ConsensusManagerFieldValidatorRewardsSubstate'
          ConsensusManagerRegisteredValidatorsByStakeIndexEntry: '#/components/schemas/ConsensusManagerRegisteredValidatorsByStakeIndexEntrySubstate'
          ValidatorFieldState: '#/components/schemas/ValidatorFieldStateSubstate'
          ValidatorFieldProtocolUpdateReadinessSignal: '#/components/schemas/ValidatorFieldProtocolUpdateReadinessSignalSubstate'
          AccountFieldState: '#/components/schemas/AccountFieldStateSubstate'
          AccountVaultEntry: '#/components/schemas/AccountVaultEntrySubstate'
          AccountResourcePreferenceEntry: '#/components/schemas/AccountResourcePreferenceEntrySubstate'
          AccountAuthorizedDepositorEntry: '#/components/schemas/AccountAuthorizedDepositorEntrySubstate'
          AccountLockerAccountClaimsEntry: '#/components/schemas/AccountLockerAccountClaimsEntrySubstate'
          AccessControllerFieldState: '#/components/schemas/AccessControllerFieldStateSubstate'
          GenericScryptoComponentFieldState: '#/components/schemas/GenericScryptoComponentFieldStateSubstate'
          GenericKeyValueStoreEntry: '#/components/schemas/GenericKeyValueStoreEntrySubstate'
          OneResourcePoolFieldState: '#/components/schemas/OneResourcePoolFieldStateSubstate'
          TwoResourcePoolFieldState: '#/components/schemas/TwoResourcePoolFieldStateSubstate'
          MultiResourcePoolFieldState: '#/components/schemas/MultiResourcePoolFieldStateSubstate'
          TransactionTrackerFieldState: '#/components/schemas/TransactionTrackerFieldStateSubstate'
          TransactionTrackerCollectionEntry: '#/components/schemas/TransactionTrackerCollectionEntrySubstate'
    SubstateType:
      type: string
      enum:
        - BootLoaderModuleFieldSystemBoot
        - BootLoaderModuleFieldKernelBoot
        - BootLoaderModuleFieldVmBoot
        - BootLoaderModuleFieldTransactionValidationConfiguration
        - ProtocolUpdateStatusModuleFieldSummary
        - TypeInfoModuleFieldTypeInfo
        - RoleAssignmentModuleFieldOwnerRole
        - RoleAssignmentModuleRuleEntry
        - RoleAssignmentModuleMutabilityEntry
        - RoyaltyModuleFieldState
        - RoyaltyModuleMethodRoyaltyEntry
        - MetadataModuleEntry
        - PackageFieldRoyaltyAccumulator
        - PackageCodeVmTypeEntry
        - PackageCodeOriginalCodeEntry
        - PackageCodeInstrumentedCodeEntry
        - SchemaEntry
        - PackageBlueprintDefinitionEntry
        - PackageBlueprintDependenciesEntry
        - PackageBlueprintRoyaltyEntry
        - PackageBlueprintAuthTemplateEntry
        - PackageFieldFunctionAccessRules
        - FungibleResourceManagerFieldDivisibility
        - FungibleResourceManagerFieldTotalSupply
        - NonFungibleResourceManagerFieldIdType
        - NonFungibleResourceManagerFieldTotalSupply
        - NonFungibleResourceManagerFieldMutableFields
        - NonFungibleResourceManagerDataEntry
        - FungibleVaultFieldBalance
        - FungibleVaultFieldFrozenStatus
        - NonFungibleVaultFieldBalance
        - NonFungibleVaultFieldFrozenStatus
        - NonFungibleVaultContentsIndexEntry
        - ConsensusManagerFieldConfig
        - ConsensusManagerFieldState
        - ConsensusManagerFieldCurrentValidatorSet
        - ConsensusManagerFieldCurrentProposalStatistic
        - ConsensusManagerFieldCurrentTimeRoundedToMinutes
        - ConsensusManagerFieldCurrentTime
        - ConsensusManagerFieldValidatorRewards
        - ConsensusManagerRegisteredValidatorsByStakeIndexEntry
        - ValidatorFieldState
        - ValidatorFieldProtocolUpdateReadinessSignal
        - AccountFieldState
        - AccountVaultEntry
        - AccountResourcePreferenceEntry
        - AccountAuthorizedDepositorEntry
        - AccessControllerFieldState
        - GenericScryptoComponentFieldState
        - GenericKeyValueStoreEntry
        - OneResourcePoolFieldState
        - TwoResourcePoolFieldState
        - MultiResourcePoolFieldState
        - TransactionTrackerFieldState
        - TransactionTrackerCollectionEntry
        - AccountLockerAccountClaimsEntry
################################################
# GENERAL / SHARED MODELS - substate key types #
################################################
    ObjectRoleKey:
      type: object
      required:
        - object_module_id
        - role_key
      properties:
        object_module_id:
          $ref: "#/components/schemas/ModuleId"
        role_key:
          type: string
    MainMethodKey:
      type: object
      required:
        - method_name
      properties:
        method_name:
          type: string
    MetadataKey:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    PackageCodeKey:
      type: object
      required:
        - code_hash
      properties:
        code_hash:
          $ref: '#/components/schemas/CodeHash'
    SchemaKey:
      type: object
      required:
        - schema_hash
      properties:
        schema_hash:
          $ref: '#/components/schemas/SchemaHash'
    BlueprintVersionKey:
      type: object
      required:
        - blueprint_name
        - blueprint_version
      properties:
        blueprint_name:
          type: string
          description: The first part of the substate key `(blueprint_name, blueprint_version)`.
        blueprint_version:
          type: string
          description: The second part of the substate key `(blueprint_name, blueprint_version)`.
    LocalNonFungibleKey:
      type: object
      required:
        - non_fungible_local_id
      properties:
        non_fungible_local_id:
          $ref: '#/components/schemas/NonFungibleLocalId'
    ActiveValidatorKey:
      type: object
      required:
        - stake_weighting
        - validator_address
      properties:
        stake_weighting:
          type: integer
          description: |
            The divided stake, giving a weighting for the validator,
            used as part of the sort key.
          format: int32
          minimum: 0
          maximum: 65535
        validator_address:
          $ref: '#/components/schemas/ComponentAddress'
    ResourceKey:
      type: object
      required:
        - resource_address
      properties:
        resource_address:
          $ref: '#/components/schemas/ComponentAddress'
    AuthorizedDepositorKey:
      type: object
      required:
        - badge
      properties:
        badge:
          $ref: '#/components/schemas/AuthorizedDepositorBadge'
    AuthorizedDepositorBadgeType:
      type: string
      enum:
        - Resource
        - NonFungible
    AuthorizedDepositorBadge:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AuthorizedDepositorBadgeType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AuthorizedDepositorBadgeType options above
          Resource: '#/components/schemas/ResourceAuthorizedDepositorBadge'
          NonFungible: '#/components/schemas/NonFungibleAuthorizedDepositorBadge'
    ResourceAuthorizedDepositorBadge:
      allOf:
        - $ref: '#/components/schemas/AuthorizedDepositorBadge'
        - type: object
          required:
            - resource_address
          properties:
            resource_address:
              $ref: '#/components/schemas/ResourceAddress'
    NonFungibleAuthorizedDepositorBadge:
      allOf:
        - $ref: '#/components/schemas/AuthorizedDepositorBadge'
        - type: object
          required:
            - non_fungible_global_id
          properties:
            non_fungible_global_id:
              $ref: '#/components/schemas/NonFungibleGlobalId'
    TransactionIdKey:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
    AccountAddressKey:
      type: object
      required:
        - account_address
      properties:
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's global address.
    GenericKey:
      type: object
      properties:
        key_data:
          description: If it can be decoded as SBOR, this is the data
          $ref: '#/components/schemas/SborData'
################################################
# GENERAL / SHARED MODELS - specific substates #
################################################
    BootLoaderModuleFieldSystemBootSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/BootLoaderModuleFieldSystemBootValue'
    BootLoaderModuleFieldSystemBootValue:
      type: object
      required:
        - system_parameters
      properties:
        system_version:
          $ref: '#/components/schemas/SystemVersion'
        system_parameters:
          $ref: '#/components/schemas/SystemParameters'
    SystemVersion:
      description: The SystemVersion was added at Cuttlefish. Before that it can be assumed to be V1.
      type: string
      enum:
        - V1
        - V2
        - V3
    SystemParameters:
      type: object
      required:
        - network_definition
        - costing_module_config
        - costing_parameters
        - limit_parameters
      properties:
        network_definition:
          $ref: "#/components/schemas/NetworkDefinition"
        costing_module_config:
          $ref: "#/components/schemas/CostingModuleConfig"
        costing_parameters:
          $ref: "#/components/schemas/SystemCostingParameters"
        limit_parameters:
          $ref: "#/components/schemas/LimitParameters"
    CostingModuleConfig:
      type: object
      required:
        - xrd_max_per_function_royalty
        - apply_execution_cost_for_all_system_calls
        - apply_boot_ref_check_costing
      properties:
        xrd_max_per_function_royalty:
          type: string
          description: |
            The string-encoded decimal representing the maximum amount of XRD configurable for a single function's royalty.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        apply_execution_cost_for_all_system_calls:
          type: boolean
          description: Whether to apply execution costing for all system calls.
        apply_boot_ref_check_costing:
          type: boolean
          description: Whether to apply costing for reference checks on boot.
    NetworkDefinition:
      type: object
      required:
        - id
        - logical_name
        - hrp_suffix
      properties:
        id:
          $ref: "#/components/schemas/NetworkIdentifierByte"
        logical_name:
          $ref: "#/components/schemas/NetworkIdentifier"
        hrp_suffix:
          type: string
          description: The network suffix of Bech32m HRPs used for addressing.
    SystemCostingParameters:
      type: object
      required:
        - execution_cost_unit_price
        - execution_cost_unit_limit
        - execution_cost_unit_loan
        - finalization_cost_unit_price
        - finalization_cost_unit_limit
        - xrd_usd_price
        - xrd_storage_price
        - xrd_archive_storage_price
      properties:
        execution_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction execution.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        execution_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.
        execution_cost_unit_loan:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum number of cost units which can be used before fee is locked from a vault.
        finalization_cost_unit_price:
          type: string
          description: |
            The string-encoded decimal representing the XRD price of a single cost unit of transaction finalization.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        finalization_cost_unit_limit:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction finalization.
        xrd_usd_price:
          type: string
          description: |
            The string-encoded decimal representing what amount of XRD is consumed by a Royalty of 1 USD.
            This is fixed for a given protocol version, so is not an accurate representation of the XRD price.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of state storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        xrd_archive_storage_price:
          type: string
          description: |
            The string-encoded decimal representing the price of 1 byte of archive storage, expressed in XRD.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    LimitParameters:
      type: object
      required:
        - max_call_depth
        - max_heap_substate_total_bytes
        - max_track_substate_total_bytes
        - max_substate_key_size
        - max_substate_value_size
        - max_invoke_input_size
        - max_event_size
        - max_log_size
        - max_panic_message_size
        - max_number_of_logs
        - max_number_of_events
      properties:
        max_call_depth:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            call depth allowed during transaction execution.
        max_heap_substate_total_bytes:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of all substates kept on the heap during a single transaction's execution.
        max_track_substate_total_bytes:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of all substates kept in the track during a single transaction's execution.
        max_substate_key_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a Substate's key in the low-level Substate database.
        max_substate_value_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a Substate's value in the low-level Substate database.
        max_invoke_input_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single call's input parameters.
        max_event_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single emitted event.
        max_log_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single logged line.
        max_panic_message_size:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            byte size of a single panic message.
        max_number_of_logs:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            count of log lines emitted during a single transaction's execution.
        max_number_of_events:
          type: string
          description: |
            A decimal string-encoded 64-bit unsigned integer, representing the configured maximum
            count of events emitted during a single transaction's execution.
    BootLoaderModuleFieldVmBootSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/BootLoaderModuleFieldVmBootValue'
    BootLoaderModuleFieldVmBootValue:
      type: object
      required:
        - scrypto_v1_minor_version
      properties:
        scrypto_v1_minor_version:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
    BootLoaderModuleFieldKernelBootSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/BootLoaderModuleFieldKernelBootValue'
    BootLoaderModuleFieldKernelBootValue:
      type: object
      properties:
        always_visible_nodes_version:
          $ref: '#/components/schemas/AlwaysVisibleGlobalNodesVersion'
    AlwaysVisibleGlobalNodesVersion:
      type: string
      description: |
        This was added in Cuttlefish. Before that, this value was missing, but can be assumed to be V1.
      enum:
        - V1
        - V2
    BootLoaderModuleFieldTransactionValidationConfigurationSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - config
          properties:
            config:
              $ref: '#/components/schemas/TransactionValidationConfig'
    TransactionValidationConfig:
      type: object
      required:
        - max_signer_signatures_per_intent
        - max_references_per_intent
        - min_tip_percentage
        - max_tip_percentage
        - max_epoch_range
        - max_instructions
        - message_validation
        - v1_transactions_allow_notary_to_duplicate_signer
        - preparation_settings
        - manifest_validation
        - v2_transactions_allowed
        - min_tip_basis_points
        - max_tip_basis_points
        - max_subintent_depth
        - max_total_signature_validations
        - max_total_references
      properties:
        max_signer_signatures_per_intent:
          type: string
        max_references_per_intent:
          type: string
        min_tip_percentage:
          description: Only applies to V1 transactions
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
        max_tip_percentage:
          description: Only applies to V1 transactions
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
        max_epoch_range:
          type: string
        max_instructions:
          type: string
        message_validation:
          $ref: '#/components/schemas/MessageValidationConfig'
        v1_transactions_allow_notary_to_duplicate_signer:
          type: boolean
        preparation_settings:
          $ref: '#/components/schemas/PreparationSettings'
        manifest_validation:
          $ref: '#/components/schemas/ManifestValidationRuleset'
        v2_transactions_allowed:
          type: boolean
        min_tip_basis_points:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        max_tip_basis_points:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
        max_subintent_depth:
          type: string
        max_total_signature_validations:
          type: string
        max_total_references:
          type: string
    MessageValidationConfig:
      type: object
      required:
        - max_plaintext_message_length
        - max_encrypted_message_length
        - max_mime_type_length
        - max_decryptors
      properties:
        max_plaintext_message_length:
          type: string
        max_encrypted_message_length:
          type: string
        max_mime_type_length:
          type: string
        max_decryptors:
          type: string
    PreparationSettings:
      type: object
      required:
        - v2_transactions_permitted
        - max_user_payload_length
        - max_ledger_payload_length
        - max_child_subintents_per_intent
        - max_subintents_per_transaction
        - max_blobs
      properties:
        v2_transactions_permitted:
          type: boolean
        max_user_payload_length:
          type: string
        max_ledger_payload_length:
          type: string
        max_child_subintents_per_intent:
          type: string
        max_subintents_per_transaction:
          type: string
        max_blobs:
          type: string
    ManifestValidationRuleset:
      type: string
      enum:
        - Basic
        - Cuttlefish
    ProtocolUpdateStatusModuleFieldSummarySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - protocol_version
            - update_status
          properties:
            protocol_version:
              type: string
            update_status:
              $ref: '#/components/schemas/ProtocolUpdateStatus'
    ProtocolUpdateStatusType:
      type: string
      enum:
        - InProgress
        - Complete
    ProtocolUpdateStatus:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ProtocolUpdateStatusType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ProtocolUpdateStatusType options above
          InProgress: '#/components/schemas/InProgressProtocolUpdateStatus'
          Complete: '#/components/schemas/CompleteProtocolUpdateStatus'
    InProgressProtocolUpdateStatus:
      allOf:
        - $ref: '#/components/schemas/ProtocolUpdateStatus'
        - type: object
          required:
            - latest_commit
          properties:
            latest_commit:
              $ref: '#/components/schemas/ProtocolUpdateStatusLatestCommit'
    ProtocolUpdateStatusLatestCommit:
      type: object
      required:
        - batch_group_index
        - batch_group_name
        - batch_index
        - batch_name
      properties:
        batch_group_index:
          type: integer
          format: int64
        batch_group_name:
          type: string
        batch_index:
          type: integer
          format: int64
        batch_name:
          type: string
    CompleteProtocolUpdateStatus:
      allOf:
        - $ref: '#/components/schemas/ProtocolUpdateStatus'
        - type: object
    TypeInfoModuleFieldTypeInfoSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/TypeInfoModuleFieldTypeInfoValue'
    TypeInfoModuleFieldTypeInfoValue:
      type: object
      required:
        - details
      properties:
        details:
          $ref: '#/components/schemas/TypeInfoDetails'
    TypeInfoType:
      type: string
      enum:
        - Object
        - KeyValueStore
    TypeInfoDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/TypeInfoType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TypeInfoType options above
          Object: '#/components/schemas/ObjectTypeInfoDetails'
          KeyValueStore: '#/components/schemas/KeyValueStoreTypeInfoDetails'
    ObjectTypeInfoDetails:
      allOf:
        - $ref: '#/components/schemas/TypeInfoDetails'
        - type: object
          required:
            - module_versions
            - blueprint_info
            - global
          properties:
            module_versions:
              type: array
              items:
                $ref: '#/components/schemas/ModuleVersion'
            blueprint_info:
              $ref: '#/components/schemas/BlueprintInfo'
            global:
              type: boolean
    ModuleVersion:
      type: object
      required:
        - module
        - version
      properties:
        module:
          $ref: '#/components/schemas/AttachedModuleId'
        version:
          type: string
          description: A string of `Major.Minor.Patch` where Major, Minor and Patch are all u32s.
    BlueprintInfo:
      type: object
      required:
        - package_address
        - blueprint_name
        - blueprint_version
        - features
        - generic_substitutions
      properties:
        package_address:
          $ref: '#/components/schemas/PackageAddress'
        blueprint_name:
          type: string
        blueprint_version:
          type: string
        outer_object:
          $ref: '#/components/schemas/GlobalAddress'
        features:
          type: array
          items:
            type: string
        generic_substitutions:
          type: array
          items:
            $ref: "#/components/schemas/GenericSubstitution"
    KeyValueStoreTypeInfoDetails:
      allOf:
        - $ref: '#/components/schemas/TypeInfoDetails'
        - type: object
          required:
            - key_value_store_info
          properties:
            key_value_store_info:
              description: The SBOR schema of the KeyValueStore
              $ref: '#/components/schemas/KeyValueStoreInfo'
    KeyValueStoreInfo:
      type: object
      required:
        - key_generic_substitution
        - value_generic_substitution
        - allow_ownership
      properties:
        key_generic_substitution:
          $ref: "#/components/schemas/GenericSubstitution"
        value_generic_substitution:
          $ref: "#/components/schemas/GenericSubstitution"
        allow_ownership:
          type: boolean
          description: Whether the entries of the key-value partition are allowed to own child nodes.
    GenericSubstitutionType:
      type: string
      enum:
        - Local
        - Remote
    GenericSubstitution:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/GenericSubstitutionType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TypeInfoType options above
          Local: '#/components/schemas/LocalGenericSubstitution'
          Remote: '#/components/schemas/RemoteGenericSubstitution'
    LocalGenericSubstitution:
      allOf:
        - $ref: '#/components/schemas/GenericSubstitution'
        - type: object
          description: |
            The generic substitution is provided by the instance itself.
            The `scoped_type_id` can be expanded to a `FullyScopedTypeId` by including the current entity's address.
          required:
            - scoped_type_id
          properties:
            scoped_type_id:
              $ref: '#/components/schemas/ScopedTypeId'
    RemoteGenericSubstitution:
      allOf:
        - $ref: '#/components/schemas/GenericSubstitution'
        - type: object
          description: |
            The generic substitution is provided remotely by a blueprint type.
            The `resolved_full_type_id` is added by the node, and is always present in the model returned from the transaction stream API.
            Other APIs may not resolve the type from the blueprint definition.
          required:
            - blueprint_type_identifier
          properties:
            blueprint_type_identifier:
              $ref: '#/components/schemas/BlueprintTypeIdentifier'
            resolved_full_type_id:
              $ref: '#/components/schemas/FullyScopedTypeId'
    RoleAssignmentModuleFieldOwnerRoleSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/RoleAssignmentModuleFieldOwnerRoleValue'
    RoleAssignmentModuleFieldOwnerRoleValue:
      type: object
      required:
        - owner_role
      properties:
        owner_role:
          $ref: "#/components/schemas/OwnerRole"
    RoleAssignmentModuleRuleEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/ObjectRoleKey'
            value:
              $ref: '#/components/schemas/RoleAssignmentModuleRuleEntryValue'
    RoleAssignmentModuleRuleEntryValue:
      type: object
      required:
        - access_rule
      properties:
        access_rule:
          $ref: '#/components/schemas/AccessRule'
    RoyaltyModuleFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/RoyaltyModuleFieldStateValue'
    RoyaltyModuleFieldStateValue:
      type: object
      required:
        - is_enabled
        - vault_entity
      properties:
        is_enabled:
          type: boolean
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
    RoyaltyModuleMethodRoyaltyEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/MainMethodKey'
            value:
              $ref: '#/components/schemas/RoyaltyModuleMethodRoyaltyEntryValue'
    RoyaltyModuleMethodRoyaltyEntryValue:
      type: object
      description: If missing, it represents a free method.
      properties:
        royalty_amount:
          description: The component royalty. If missing, it represents a free method.
          $ref: '#/components/schemas/RoyaltyAmount'
    MetadataModuleEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/MetadataKey'
            value:
              $ref: '#/components/schemas/MetadataModuleEntryValue'
    MetadataModuleEntryValue:
      type: object
      description: If missing, it represents a non-existing or deleted value.
      required:
        - data_struct
      properties:
        data_struct:
          $ref: '#/components/schemas/DataStruct'
    TransactionTrackerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/TransactionTrackerFieldStateValue'
    TransactionTrackerFieldStateValue:
      type: object
      required:
        - start_epoch
        - start_partition
        - partition_range_start_inclusive
        - partition_range_end_inclusive
        - epochs_per_partition
      properties:
        start_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
        start_partition:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        partition_range_start_inclusive:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        partition_range_end_inclusive:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        epochs_per_partition:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
    TransactionTrackerCollectionEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/TransactionIdKey'
            value:
              $ref: '#/components/schemas/TransactionTrackerCollectionEntryValue'
    TransactionTrackerCollectionEntryValue:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/TransactionTrackerTransactionStatus"
    TransactionTrackerTransactionStatus:
      type: string
      enum:
        - CommittedSuccess
        - CommittedFailure
        - Cancelled
    PackageFieldRoyaltyAccumulatorSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/PackageFieldRoyaltyAccumulatorValue'
    PackageFieldRoyaltyAccumulatorValue:
      type: object
      required:
        - vault_entity
      properties:
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
    PackageCodeVmTypeEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/PackageCodeKey'
            value:
              $ref: '#/components/schemas/PackageCodeVmTypeEntryValue'
    PackageCodeVmTypeEntryValue:
      type: object
      required:
        - vm_type
      properties:
        vm_type:
          $ref: '#/components/schemas/VmType'
    VmType:
      type: string
      enum:
        - Native
        - ScryptoV1
    PackageCodeOriginalCodeEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/PackageCodeKey'
            value:
              $ref: '#/components/schemas/PackageCodeOriginalCodeEntryValue'
    PackageCodeOriginalCodeEntryValue:
      type: object
      required:
        - code_hex
      properties:
        code_hex:
          type: string
          description: |
            Either the hex-encoded WASM package code (if Scrypto), or the native package identifier.
    PackageCodeInstrumentedCodeEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/PackageCodeKey'
            value:
              $ref: '#/components/schemas/PackageCodeInstrumentedCodeEntryValue'
    PackageCodeInstrumentedCodeEntryValue:
      type: object
      required:
        - code_hex
      properties:
        code_hex:
          type: string
          description: |
            The hex-encoded instrumented WASM package code.
    SchemaEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/SchemaKey'
            value:
              $ref: '#/components/schemas/SchemaEntryValue'
    SchemaEntryValue:
      type: object
      required:
        - schema
      properties:
        schema:
          $ref: '#/components/schemas/ScryptoSchema'
    PackageBlueprintDefinitionEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/BlueprintVersionKey'
            value:
              $ref: '#/components/schemas/PackageBlueprintDefinitionEntryValue'
    PackageBlueprintDefinitionEntryValue:
      type: object
      required:
        - definition
      properties:
        definition:
          $ref: '#/components/schemas/BlueprintDefinition'
    PackageBlueprintDependenciesEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/BlueprintVersionKey'
            value:
              $ref: '#/components/schemas/PackageBlueprintDependenciesEntryValue'
    PackageBlueprintDependenciesEntryValue:
      type: object
      required:
        - dependencies
      properties:
        dependencies:
          $ref: '#/components/schemas/BlueprintDependencies'
    PackageBlueprintRoyaltyEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/BlueprintVersionKey'
            value:
              $ref: '#/components/schemas/PackageBlueprintRoyaltyEntryValue'
    PackageBlueprintRoyaltyEntryValue:
      type: object
      required:
        - royalty_config
      properties:
        royalty_config:
          $ref: '#/components/schemas/BlueprintRoyaltyConfig'
    PackageBlueprintAuthTemplateEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/BlueprintVersionKey'
            value:
              $ref: '#/components/schemas/PackageBlueprintAuthTemplateEntryValue'
    PackageBlueprintAuthTemplateEntryValue:
      type: object
      required:
        - auth_config
      properties:
        auth_config:
          description: The configuration of the package blueprint.
          $ref: '#/components/schemas/AuthConfig'
    FungibleResourceManagerFieldDivisibilitySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/FungibleResourceManagerFieldDivisibilityValue'
    FungibleResourceManagerFieldDivisibilityValue:
      type: object
      required:
        - divisibility
      properties:
        divisibility:
          type: integer
          minimum: 0
          maximum: 18
    FungibleResourceManagerFieldTotalSupplySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/FungibleResourceManagerFieldTotalSupplyValue'
    FungibleResourceManagerFieldTotalSupplyValue:
      type: object
      required:
        - total_supply
      properties:
        total_supply:
          type: string
          description: |
            The string-encoded decimal representing the total supply of this resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    NonFungibleResourceManagerFieldIdTypeSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/NonFungibleResourceManagerFieldIdTypeValue'
    NonFungibleResourceManagerFieldIdTypeValue:
      type: object
      required:
        - non_fungible_id_type
      properties:
        non_fungible_id_type:
          $ref: '#/components/schemas/NonFungibleIdType'
    NonFungibleResourceManagerFieldTotalSupplySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/NonFungibleResourceManagerFieldTotalSupplyValue'
    NonFungibleResourceManagerFieldTotalSupplyValue:
      type: object
      required:
        - total_supply
      properties:
        total_supply:
          type: string
          description: |
            The string-encoded decimal representing the total supply of this resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    NonFungibleResourceManagerFieldMutableFieldsSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/NonFungibleResourceManagerFieldMutableFieldsValue'
    NonFungibleResourceManagerFieldMutableFieldsValue:
      type: object
      required:
        - mutable_fields
      properties:
        mutable_fields:
          type: array
          description: The fields of the NF Metadata which are mutable.
          items:
            $ref: '#/components/schemas/MutableField'
    MutableField:
      type: object
      required:
        - name
        - index
      properties:
        name:
          type: string
        index:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
    NonFungibleResourceManagerDataEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          description: |
            If the NF has been burned, the value is deleted and empty.
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/LocalNonFungibleKey'
            value:
              $ref: '#/components/schemas/NonFungibleResourceManagerDataEntryValue'
    NonFungibleResourceManagerDataEntryValue:
      type: object
      description: |
        If missing, it represents a burned Non-Fungible.
        A Non-Fungible with that local id cannot be minted again - the id is not re-usable.
      required:
        - data_struct
      properties:
        data_struct:
          $ref: '#/components/schemas/DataStruct'
    FungibleVaultFieldBalanceSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/FungibleVaultFieldBalanceValue'
    FungibleVaultFieldBalanceValue:
      type: object
      required:
        - amount
      properties:
        amount:
          type: string
          description: |
            The string-encoded decimal representing the token amount in the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    FungibleVaultFieldFrozenStatusSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/FungibleVaultFieldFrozenStatusValue'
    FungibleVaultFieldFrozenStatusValue:
      type: object
      required:
        - frozen_status
      properties:
        frozen_status:
          $ref: '#/components/schemas/FrozenStatus'
    FrozenStatus:
      type: object
      required:
        - is_withdraw_frozen
        - is_deposit_frozen
        - is_burn_frozen
      properties:
        is_withdraw_frozen:
          type: boolean
        is_deposit_frozen:
          type: boolean
        is_burn_frozen:
          type: boolean
    NonFungibleVaultFieldBalanceSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/NonFungibleVaultFieldBalanceValue'
    NonFungibleVaultFieldBalanceValue:
      type: object
      required:
        - amount
      properties:
        amount:
          type: string
          description: |
            The string-encoded decimal representing the token amount in the vault.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    NonFungibleVaultFieldFrozenStatusSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/NonFungibleVaultFieldFrozenStatusValue'
    NonFungibleVaultFieldFrozenStatusValue:
      type: object
      required:
        - frozen_status
      properties:
        frozen_status:
          $ref: '#/components/schemas/FrozenStatus'
    NonFungibleVaultContentsIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/LocalNonFungibleKey'
            value:
              $ref: '#/components/schemas/NonFungibleVaultContentsIndexEntryValue'
    NonFungibleVaultContentsIndexEntryValue:
      type: object
      description: |
        This object is empty, and always present on this substate.
        Note that when a non-fungible is withdrawn from the vault, the full substate is deleted, which is marked
        by a DeletedSubstate action (rather than deletion of the value property in an UpdateSubstate action).
        This is because this is an Index entry, not a KeyValueStore entry.
      required:
        - is_present
      properties:
        is_present:
          description: |
            This is a dummy property which is always set to true and means nothing.
            It exists just to ensure this object has a well-defined type in OpenAPI schemas.
          type: boolean
    ConsensusManagerFieldConfigSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldConfigValue'
    ConsensusManagerFieldConfigValue:
      type: object
      required:
        - max_validators
        - epoch_change_condition
        - num_unstake_epochs
        - total_emission_xrd_per_epoch
        - min_validator_reliability
        - num_owner_stake_units_unlock_epochs
        - num_fee_increase_delay_epochs
        - validator_creation_usd_equivalent_cost
        - validator_creation_xrd_cost
      properties:
        max_validators:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the maximum number of validators
            in the active validator set.
        epoch_change_condition:
          $ref: '#/components/schemas/EpochChangeCondition'
        num_unstake_epochs:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the minimum number of epochs
            before an unstaker can withdraw their XRD.
        total_emission_xrd_per_epoch:
          $ref: '#/components/schemas/Decimal'
        min_validator_reliability:
          description: |
            A proportion (between 0 and 1) which a validator needs to exceed to get emissions in an epoch.
          $ref: '#/components/schemas/Decimal'
        num_owner_stake_units_unlock_epochs:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the minimum number of epochs
            before an owner can take their stake units after attempting to withdraw them.
        num_fee_increase_delay_epochs:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the minimum number of epochs
            before a fee increase takes effect.
        validator_creation_usd_equivalent_cost:
          type: string
          description: |
            The defining decimal cost of a validator in USD.
            This is turned into an XRD cost through the current protocol-based USD/XRD multiplier.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        validator_creation_xrd_cost:
          type: string
          description: |
            The decimal amount of XRD required to be passed in a bucket to create a validator.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    ConsensusManagerFieldValidatorRewardsSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldValidatorRewardsValue'
    ConsensusManagerFieldValidatorRewardsValue:
      type: object
      required:
        - proposer_rewards
        - rewards_vault
      properties:
        proposer_rewards:
          type: array
          items:
            $ref: '#/components/schemas/ProposerReward'
        rewards_vault:
          $ref: '#/components/schemas/EntityReference'
    EpochChangeCondition:
      type: object
      required:
        - min_round_count
        - max_round_count
        - target_duration_millis
      properties:
        min_round_count:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, specifying the minimum number of rounds per epoch
        max_round_count:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, specifying the maximum number of rounds per epoch
        target_duration_millis:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, specifying the target number of milliseconds per epoch,
            assuming the round number is within the min and max range.
    ConsensusManagerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldStateValue'
    ConsensusManagerFieldStateValue:
      type: object
      required:
        - epoch
        - round
        - is_started
        - effective_epoch_start
        - actual_epoch_start
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current epoch
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
        is_started:
          type: boolean
        effective_epoch_start:
          description: |
            The effective time the epoch started. A drift-free measure, used to work out when the
            epoch should ideally end.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
          $ref: '#/components/schemas/InstantMs'
        actual_epoch_start:
          description: |
            The actual time the epoch started. Not used by any logic, but the difference between
            this and the effective start gives a measure of the time it took for the end-of-epoch
            to be noticed.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
          $ref: '#/components/schemas/InstantMs'
        current_leader:
          $ref: '#/components/schemas/ActiveValidatorIndex'
    ConsensusManagerFieldCurrentProposalStatisticSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldCurrentProposalStatisticValue'
    ConsensusManagerFieldCurrentProposalStatisticValue:
      type: object
      required:
        - completed
        - missed
      properties:
        completed:
          type: array
          description: The number of successfully completed proposals this epoch for each validator, indexed by the validator order in the active set.
          items:
            type: integer
            format: int64
            minimum: 0
            maximum: 10000000000
        missed:
          type: array
          description: The number of missed proposals this epoch for each validator, indexed by the validator order in the active set.
          items:
            type: integer
            format: int64
            minimum: 0
            maximum: 10000000000
    ConsensusManagerFieldCurrentValidatorSetSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldCurrentValidatorSetValue'
    ConsensusManagerFieldCurrentValidatorSetValue:
      type: object
      required:
        - validator_set
      properties:
        validator_set:
          type: array
          items:
            $ref: '#/components/schemas/ActiveValidator'
    ConsensusManagerRegisteredValidatorsByStakeIndexEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/ActiveValidatorKey'
            value:
              $ref: '#/components/schemas/ConsensusManagerRegisteredValidatorsByStakeIndexEntryValue'
    ConsensusManagerRegisteredValidatorsByStakeIndexEntryValue:
      type: object
      required:
        - active_validator
      properties:
        active_validator:
          $ref: "#/components/schemas/ActiveValidator"
    ConsensusManagerFieldCurrentTimeRoundedToMinutesSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldCurrentTimeRoundedToMinutesValue'
    ConsensusManagerFieldCurrentTimeRoundedToMinutesValue:
      type: object
      required:
        - proposer_timestamp_rounded_down_to_minute
      properties:
        proposer_timestamp_rounded_down_to_minute:
          $ref: '#/components/schemas/InstantMs'
          description: |
            The latest round proposer's timestamp (rounded down to the current minute).
            An honest quorum of validators keeps this aligned with wall-clock time, and non-decreasing.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
    ConsensusManagerFieldCurrentTimeSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ConsensusManagerFieldCurrentTimeValue'
    ConsensusManagerFieldCurrentTimeValue:
      type: object
      required:
        - proposer_timestamp
      properties:
        proposer_timestamp:
          $ref: '#/components/schemas/InstantMs'
          description: |
            The latest round proposer's timestamp.
            An honest quorum of validators keeps this aligned with wall-clock time, and non-decreasing.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
    ValidatorFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ValidatorFieldStateValue'
    ValidatorFieldStateValue:
      type: object
      required:
        - public_key
        - is_registered
        - accepts_delegated_stake
        - validator_fee_factor
        - stake_unit_resource_address
        - stake_xrd_vault
        - claim_token_resource_address
        - pending_xrd_withdraw_vault
        - locked_owner_stake_unit_vault
        - pending_owner_stake_unit_unlock_vault
        - pending_owner_stake_unit_withdrawals
        - already_unlocked_owner_stake_unit_amount
      properties:
        sorted_key:
          $ref: '#/components/schemas/SubstateKey'
        public_key:
          $ref: '#/components/schemas/EcdsaSecp256k1PublicKey'
        is_registered:
          type: boolean
        accepts_delegated_stake:
          type: boolean
        validator_fee_factor:
          description: The proportion of the emission that the validator owner keeps.
          $ref: '#/components/schemas/Decimal'
        validator_fee_change_request:
          $ref: '#/components/schemas/ValidatorFeeChangeRequest'
        stake_unit_resource_address:
          $ref: '#/components/schemas/ResourceAddress'
        stake_xrd_vault:
          $ref: '#/components/schemas/EntityReference'
        claim_token_resource_address:
          $ref: '#/components/schemas/ResourceAddress'
        pending_xrd_withdraw_vault:
          $ref: '#/components/schemas/EntityReference'
        locked_owner_stake_unit_vault:
          $ref: '#/components/schemas/EntityReference'
        pending_owner_stake_unit_unlock_vault:
          $ref: '#/components/schemas/EntityReference'
        pending_owner_stake_unit_withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/PendingOwnerStakeWithdrawal'
        already_unlocked_owner_stake_unit_amount:
          $ref: '#/components/schemas/Decimal'
    ValidatorFeeChangeRequest:
      type: object
      required:
        - epoch_effective
        - new_fee_factor
      properties:
        epoch_effective:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch at which the fee change becomes effective.
        new_fee_factor:
          $ref: '#/components/schemas/Decimal'
    PendingOwnerStakeWithdrawal:
      type: object
      required:
        - epoch_unlocked
        - stake_unit_amount
      properties:
        epoch_unlocked:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch when the stake units are unlocked for withdrawal.
        stake_unit_amount:
          $ref: '#/components/schemas/Decimal'
    ValidatorFieldProtocolUpdateReadinessSignalSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/ValidatorFieldProtocolUpdateReadinessSignalValue'
    ValidatorFieldProtocolUpdateReadinessSignalValue:
      type: object
      properties:
        protocol_version_name:
          description: |
            If present, indicates the validator is currently signalling readiness for the given protocol version.
            Is validated to be exactly 32 chars long (if it exists).
          type: string
    AccountFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/AccountFieldStateValue'
    AccountFieldStateValue:
      type: object
      required:
        - default_deposit_rule
      properties:
        default_deposit_rule:
          $ref: '#/components/schemas/DefaultDepositRule'
    DefaultDepositRule:
      type: string
      description: |
        This setting has the following interpretations:
        - Allow: Allows the deposit of all resources - the deny list is honored in this state.
        - Reject: Disallows the deposit of all resources - the allow list is honored in this state.
        - AllowExisting: Only deposits of existing resources *or* XRD are accepted - both allow and deny lists are honored in this mode.
      enum:
        - Accept
        - Reject
        - AllowExisting
    AccountVaultEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/ResourceKey'
            value:
              $ref: '#/components/schemas/AccountVaultEntryValue'
    AccountVaultEntryValue:
      type: object
      required:
        - vault
      properties:
        vault:
          $ref: '#/components/schemas/EntityReference'
    AccountResourcePreferenceEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/ResourceKey'
            value:
              $ref: '#/components/schemas/AccountResourcePreferenceEntryValue'
    AccountResourcePreferenceEntryValue:
      type: object
      required:
        - resource_preference
      properties:
        resource_preference:
          $ref: '#/components/schemas/ResourcePreference'
    ResourcePreference:
      type: string
      enum:
        - Allowed
        - Disallowed
    AccountAuthorizedDepositorEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/AuthorizedDepositorKey'
            value:
              $ref: '#/components/schemas/AccountAuthorizedDepositorEntryValue'
    AccountAuthorizedDepositorEntryValue:
      type: object
      description: Empty value. The existence of the key implies the depositor is authorized.
      required:
        - is_authorized
      properties:
        is_authorized:
          description: |
            This is always true. This field is just added to ensure we return some data as the value,
            so a present entry is not confused by clients for a deleted/missing entry (which would imply
            not authorized).
          type: boolean
    AccountLockerAccountClaimsEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
            - value
          properties:
            key:
              $ref: '#/components/schemas/AccountAddressKey'
              description: An account which can claim the contents of associated vaults.
            value:
              $ref: '#/components/schemas/AccountLockerAccountClaimsEntryValue'
    AccountLockerAccountClaimsEntryValue:
      type: object
      required:
        - resource_vaults
      properties:
        resource_vaults:
          $ref: '#/components/schemas/EntityReference'
          description: An owned Key-Value Store entity, which maps each `ResourceAddress` to its corresponding `Vault`.
    AccessControllerFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/AccessControllerFieldStateValue'
    AccessControllerFieldStateValue:
      type: object
      required:
        - controlled_vault
        - recovery_badge_resource_address
        - is_primary_role_locked
        - has_primary_role_badge_withdraw_attempt
        - has_recovery_role_badge_withdraw_attempt
      properties:
        controlled_vault:
          $ref: "#/components/schemas/EntityReference"
        xrd_fee_vault:
          $ref: "#/components/schemas/EntityReference"
          description: |
            An optional helper vault storing some amount of XRD that can be used by any of the roles
            for locking fees.
        timed_recovery_delay_minutes:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, specifying the amount of time (in minutes) that
            it takes for timed recovery to be done. When not present, then timed recovery can not be
            performed through this access controller.
        recovery_badge_resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        is_primary_role_locked:
          type: boolean
          description: Whether the primary role is currently locked.
        primary_role_recovery_attempt:
          $ref: "#/components/schemas/PrimaryRoleRecoveryAttempt"
          description: The current attempt to recover a primary role, if any.
        has_primary_role_badge_withdraw_attempt:
          type: boolean
          description: Whether the primary role badge withdraw is currently being attempted.
        recovery_role_recovery_attempt:
          $ref: "#/components/schemas/RecoveryRoleRecoveryAttempt"
          description: The current attempt to recover a recovery role, if any.
        has_recovery_role_badge_withdraw_attempt:
          type: boolean
          description: Whether the recovery role badge withdraw is currently being attempted.
    PrimaryRoleRecoveryAttempt:
      type: object
      required:
        - recovery_proposal
      properties:
        recovery_proposal:
          $ref: "#/components/schemas/RecoveryProposal"
          description: A new set of rules being proposed for different roles.
    RecoveryRoleRecoveryAttempt:
      type: object
      required:
        - recovery_proposal
      properties:
        recovery_proposal:
          $ref: "#/components/schemas/RecoveryProposal"
          description: A new set of rules being proposed for different roles.
        allow_timed_recovery_after:
          $ref: "#/components/schemas/ScryptoInstant"
          description: The time after which the recovery is allowed. Only present if this is a timed recovery.
    RecoveryProposal:
      type: object
      required:
        - primary_role
        - recovery_role
        - confirmation_role
      properties:
        primary_role:
          $ref: "#/components/schemas/AccessRule"
        recovery_role:
          $ref: "#/components/schemas/AccessRule"
        confirmation_role:
          $ref: "#/components/schemas/AccessRule"
        timed_recovery_delay_minutes:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, specifying the optional proposal delay of timed recoveries.
    GenericScryptoComponentFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/GenericScryptoComponentFieldStateValue'
    GenericScryptoComponentFieldStateValue:
      type: object
      required:
        - data_struct
      properties:
        data_struct:
          $ref: '#/components/schemas/DataStruct'
    GenericKeyValueStoreEntrySubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - key
          properties:
            key:
              $ref: '#/components/schemas/GenericKey'
            value:
              $ref: '#/components/schemas/GenericKeyValueStoreEntryValue'
    GenericKeyValueStoreEntryValue:
      type: object
      description: If not present, the entry has been deleted.
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/DataStruct'
    OneResourcePoolFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/OneResourcePoolFieldStateValue'
    OneResourcePoolFieldStateValue:
      type: object
      required:
        - vault
        - pool_unit_resource_address
      properties:
        vault:
          $ref: '#/components/schemas/EntityReference'
        pool_unit_resource_address:
          $ref: '#/components/schemas/ResourceAddress'
    TwoResourcePoolFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/TwoResourcePoolFieldStateValue'
    TwoResourcePoolFieldStateValue:
      type: object
      required:
        - vaults
        - pool_unit_resource_address
      properties:
        vaults:
          type: array
          minItems: 2
          maxItems: 2
          items:
            $ref: '#/components/schemas/PoolVault'
        pool_unit_resource_address:
          $ref: '#/components/schemas/ResourceAddress'
    MultiResourcePoolFieldStateSubstate:
      allOf:
        - $ref: '#/components/schemas/Substate'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/MultiResourcePoolFieldStateValue'
    MultiResourcePoolFieldStateValue:
      type: object
      required:
        - vaults
        - pool_unit_resource_address
      properties:
        vaults:
          type: array
          minItems: 3
          items:
            $ref: '#/components/schemas/PoolVault'
        pool_unit_resource_address:
          $ref: '#/components/schemas/ResourceAddress'
    PoolVault:
      type: object
      required:
        - vault
        - resource_address
      properties:
        vault:
          $ref: '#/components/schemas/EntityReference'
        resource_address:
          $ref: '#/components/schemas/ResourceAddress'
##########################################
# REQUEST: /lts/transaction/construction #
##########################################
    LtsTransactionConstructionRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    LtsTransactionConstructionResponse:
      type: object
      required:
        - current_epoch
        - ledger_clock
      properties:
        current_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current epoch
        ledger_clock:
          $ref: '#/components/schemas/InstantMs'
          description: |
            The latest round proposer's timestamp (rounded down to the current minute).
            This is provided so that the client can detect if the node is synced up or not.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
####################################
# REQUEST: /lts/transaction/status #
####################################
    LtsTransactionStatusRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHashInput"
    LtsTransactionStatusResponse:
      type: object
      required:
        - intent_status
        - status_description
        - known_payloads
      properties:
        intent_status:
          $ref: "#/components/schemas/LtsTransactionIntentStatus"
        status_description:
          type: string
          description: |
            An explanation as to why the intent status is resolved as it is.
        committed_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: |
            The resultant state version when the transaction was committed.
            This is only present if the intent was committed (as a Success or Failure).
            This can be considered to be the auto-incrementing primary key for a committed transaction, and can be used e.g. to look up
            details on the transaction's outcome from the `/lts/stream/transaction-outcomes` endpoint.
        invalid_from_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
            Only present if the intent status is InMempool or Unknown and we know about a payload.
        known_payloads:
          type: array
          items:
            $ref: "#/components/schemas/LtsTransactionPayloadDetails"
    LtsTransactionPayloadDetails:
      type: object
      required:
        - payload_hash
        - payload_hash_bech32m
        - status
      properties:
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: |
            State version of a committed transaction.
            This field will be present only if the `status` is `Committed*`.
        status:
          $ref: "#/components/schemas/LtsTransactionPayloadStatus"
        error_message:
          description: An explanation for the error, if failed or rejected
          type: string
    LtsTransactionIntentStatus:
      type: string
      description: |
        The status of the transaction intent, as determined by the node.
        FateUncertain or FateUncertainButLikelyRejection mean that it's still possible that a payload containing the transaction
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentRejection
        - InMempool
        - NotSeen
        - FateUncertain
        - FateUncertainButLikelyRejection
    LtsTransactionPayloadStatus:
      type: string
      description: |
        The status of the transaction payload, as per this node.
        A NotInMempool status means that it wasn't rejected at last execution attempt, but it's not currently in the mempool either.
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentlyRejected
        - TransientlyRejected
        - InMempool
        - NotInMempool
####################################
# REQUEST: /lts/transaction/submit #
####################################
    LtsTransactionSubmitRequest:
      type: object
      required:
        - network
        - notarized_transaction_hex
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        notarized_transaction_hex:
          description: A hex-encoded, compiled notarized transaction.
          type: string
        force_recalculate:
          description: If true, the transaction validity is freshly recalculated without using any caches (defaults false)
          type: boolean
    LtsTransactionSubmitResponse:
      type: object
      required:
        - duplicate
      properties:
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction in the mempool.
          type: boolean
    LtsTransactionSubmitErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
    LtsTransactionSubmitErrorDetailsType:
      type: string
      enum:
        - PriorityThresholdNotMet
        - IntentAlreadyCommitted
        - Rejected
    LtsTransactionSubmitErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/LtsTransactionSubmitErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LtsTransactionSubmitErrorDetailsType
          PriorityThresholdNotMet: "#/components/schemas/LtsTransactionSubmitPriorityThresholdNotMetErrorDetails"
          IntentAlreadyCommitted: "#/components/schemas/LtsTransactionSubmitIntentAlreadyCommitted"
          Rejected: "#/components/schemas/LtsTransactionSubmitRejectedErrorDetails"
    LtsTransactionSubmitPriorityThresholdNotMetErrorDetails:
      allOf:
        - $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
        - type: object
          required:
            - tip_percentage
          properties:
            tip_percentage:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              deprecated: true
              description: |
                NOTE: This is kept for backwards compatibility, but we recommend using `tip_proportion` instead.

                Tip percentage of the submitted (and rejected) transaction. For V2 transactions specifying basis point tips,
                the amount is rounded down.
            min_tip_percentage_required:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              deprecated: true
              description: |
                NOTE: This is kept for backwards compatibility, but we recommend using `min_tip_proportion_required` instead.

                A lower bound for tip percentage at current mempool state. Anything lower than this will very likely result in a mempool rejection.
                A missing value means there is no tip that can guarantee submission.
            tip_proportion:
              type: string
              description: |
                The string-encoded decimal tip proportion of the submitted (and rejected) transaction.

                This field will always be present on Cuttlefish nodes, but is marked as not-required for Cuttlefish launch,
                to avoid a dependency on clients to update after the node is updated.
            min_tip_proportion_required:
              type: string
              description: |
                A lower bound for tip proportion at current mempool state. Anything lower than this will very likely result in a mempool rejection.
                A missing value means there is no tip that can guarantee submission.
    LtsTransactionSubmitIntentAlreadyCommitted:
      allOf:
        - $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
        - type: object
          required:
            - committed_as
          properties:
            committed_as:
              $ref: "#/components/schemas/CommittedIntentMetadata"
              description: |
                Details of an already-committed transaction that had the same intent.
    LtsTransactionSubmitRejectedErrorDetails:
      allOf:
        - $ref: "#/components/schemas/LtsTransactionSubmitErrorDetails"
        - type: object
          description: |
            Indicates that the transaction was executed and resulted in a rejection,
            therefore the transaction is not being added into the mempool.
          required:
            - error_message
            - is_fresh
            - is_payload_rejection_permanent
            - is_intent_rejection_permanent
          properties:
            error_message:
              type: string
              description: An explanation of the error
            is_fresh:
              type: boolean
              description: |
                Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending
                transaction result cache.
            is_payload_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this payload is known to be permanent.
            is_intent_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection
                being permanent, as it implies any payloads containing the intent will also be permanently rejected.
            retry_from_timestamp:
              $ref: "#/components/schemas/InstantMs"
              description: |
                The time after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary, and not due to the header specifying a "from epoch" in the future.
            retry_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
            invalid_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
                Only present if the rejection isn't permanent.
##############################################################
# REQUEST: /lts/state/account-all-fungible-resource-balances #
##############################################################
    LtsStateAccountAllFungibleResourceBalancesRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
    LtsStateAccountAllFungibleResourceBalancesResponse:
      type: object
      required:
        - state_version
        - ledger_header_summary
        - account_address
        - fungible_resource_balances
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The state version at which the query was performed.
        ledger_header_summary:
          $ref: "#/components/schemas/LedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        fungible_resource_balances:
          description: A list containing all resource balances for the requested account.
          type: array
          items:
            $ref: "#/components/schemas/LtsFungibleResourceBalance"
    LtsFungibleResourceBalance:
      type: object
      required:
        - fungible_resource_address
        - amount
      properties:
        fungible_resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        amount:
          type: string
          description: |
            The string-encoded decimal representing the amount of the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
#########################################################
# REQUEST: /lts/state/account-fungible-resource-balance #
#########################################################
    LtsStateAccountFungibleResourceBalanceRequest:
      type: object
      required:
        - network
        - account_address
        - resource_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
    LtsStateAccountFungibleResourceBalanceResponse:
      type: object
      required:
        - state_version
        - ledger_header_summary
        - account_address
        - fungible_resource_balance
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The state version at which the query was performed.
        ledger_header_summary:
          $ref: "#/components/schemas/LedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        fungible_resource_balance:
          $ref: "#/components/schemas/LtsFungibleResourceBalance"
#########################################################
# REQUEST: /lts/state/account-deposit-behaviour #
#########################################################
    LtsStateAccountDepositBehaviourRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          description: The Bech32m-encoded human readable version of the account's address.
          type: string
        resource_addresses:
          description: The resource addresses to check the deposit behaviours of.
          type: array
          maxItems: 20
          items:
            $ref: "#/components/schemas/ResourceAddress"
        badge:
          description: The depositor badge to check against the account's set of authorized depositors.
          $ref: '#/components/schemas/PresentedBadge'
    LtsStateAccountDepositBehaviourResponse:
      type: object
      required:
        - state_version
        - ledger_header_summary
        - default_deposit_rule
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The state version at which the query was performed.
        ledger_header_summary:
          $ref: "#/components/schemas/LedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
        default_deposit_rule:
          $ref: '#/components/schemas/DefaultDepositRule'
        is_badge_authorized_depositor:
          type: boolean
          description: |
            Whether the input `badge` belongs to the account's set of authorized depositors.
            This field will only be present if any badge was passed in the request.
        resource_specific_behaviours:
          type: object
          description: |
            A map from one of the input `resource_addresses` to its specific deposit behavior configured for this account.
            This field will only be present if an array of specific resource addresses was passed in the request (even if empty).
          additionalProperties:
            $ref: '#/components/schemas/ResourceSpecificDepositBehaviour'
    ResourceSpecificDepositBehaviour:
      type: object
      required:
        - vault_exists
        - is_xrd
        - allows_try_deposit
      properties:
        resource_preference:
          $ref: '#/components/schemas/ResourcePreference'
          description: Whether the resource is on the allow or the deny list (no preference when missing).
        vault_exists:
          type: boolean
          description: |
            Whether the account contains a vault for the resource (even if 0 balance).
            This plays a role when `DefaultDepositRule` is `AllowExisting`.
        is_xrd:
          type: boolean
          description: |
            Whether the resource represents the native XRD fungible.
            XRD is a special case which does not require `vault_exists = true` to satisfy the `AllowExisting` rule.
        allows_try_deposit:
          type: boolean
          description: |
            The fully resolved `try_deposit_*` ability of this resource (which takes all the inputs
            into account, including the authorized depositor badge, the default deposit rule and
            the above resource-specific circumstances).
#############################################
# REQUEST: /lts/stream/transaction-outcomes #
#############################################
    LtsStreamTransactionOutcomesRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        from_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
    LtsStreamTransactionOutcomesResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - committed_transaction_outcomes
      properties:
        from_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: |
            The first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The maximum state version currently committed on this node's ledger.
        committed_transaction_outcomes:
          description: A committed transaction outcomes list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/LtsCommittedTransactionOutcome"
    LtsCommittedTransactionStatus:
      type: string
      # These should align with LtsTransactionIntentStatus / LtsTransactionPayloadStatus
      enum:
        - Success
        - Failure
      description: The status of the transaction
    LtsCommittedTransactionOutcome:
      description: |
        For the given transaction, contains the status, total fee summary and individual entity resource balance changes.
        The balance changes accounts for the fee payments as well.
      type: object
      required:
        - state_version
        - proposer_timestamp_ms
        - accumulator_hash
        - status
        - fungible_entity_balance_changes
        - non_fungible_entity_balance_changes
        - resultant_account_fungible_balances
        - total_fee
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The resultant state version after the transaction has been committed
        proposer_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the proposer timestamp in ms.
        accumulator_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded transaction accumulator hash. This hash captures the order of all transactions on ledger.
            This hash is `ACC_{N+1} = combine(ACC_N, LEDGER_HASH_{N}))` (where `combine()` is an arbitrary deterministic function we use).
        user_transaction_identifiers:
          description: Only present if the transaction is a user-submitted notarized transaction.
          $ref: "#/components/schemas/TransactionIdentifiers"
        status:
          $ref: "#/components/schemas/LtsCommittedTransactionStatus"
        fungible_entity_balance_changes:
          description: |
            A list of all fungible balance updates which occurred in this transaction, aggregated by the global entity (such as account)
            which owns the vaults which were updated.
          type: array
          items:
            $ref: "#/components/schemas/LtsEntityFungibleBalanceChanges"
        non_fungible_entity_balance_changes:
          description: |
            Non fungible changes per entity and resource
          type: array
          items:
            $ref: "#/components/schemas/LtsEntityNonFungibleBalanceChanges"
        resultant_account_fungible_balances:
          description: |
            A list of the resultant fungible account balances for any balances which changed in this transaction.
            Only balances for accounts are returned, not any other kind of entity.
          type: array
          items:
            $ref: "#/components/schemas/LtsResultantAccountFungibleBalances"
        total_fee:
          type: string
          description: |
            The string-encoded decimal representing the total amount of XRD paid as fee (execution, validator tip and royalties).
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    LtsEntityFungibleBalanceChanges:
      type: object
      required:
        - entity_address
        - fee_balance_changes
        - non_fee_balance_changes
      properties:
        entity_address:
          type: string
          description: The Bech32m-encoded human readable version of the entity's address
        fee_balance_change:
          $ref: "#/components/schemas/LtsFungibleResourceBalanceChange"
          description: |
            If present, this field indicates the entity contributed to the payment of the fee.
            The change in balance will always be negative.
            NOTE: This property is deprecated but kept for backwards compatibility. This entry is duplicated in
            `fee_balance_changes`.
        fee_balance_changes:
          type: array
          description: |
            If present, this field indicates fee-related balance changes, for example:

            - Payment of the fee (including tip and royalty)
            - Distribution of royalties
            - Distribution of the fee and tip to the consensus-manager, for distributing to the relevant
              validator/s at end of epoch

            See https://www.radixdlt.com/blog/how-fees-work-in-babylon for further information on how
            fee payment works at Babylon.
          items:
            $ref: "#/components/schemas/LtsFeeFungibleResourceBalanceChange"
        non_fee_balance_changes:
          type: array
          items:
            $ref: "#/components/schemas/LtsFungibleResourceBalanceChange"
    LtsFungibleResourceBalanceChange:
      type: object
      required:
        - resource_address
        - balance_change
      properties:
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        balance_change:
          type: string
          description: |
            The string-encoded decimal representing the amount of change for the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    LtsFeeFungibleResourceBalanceChange:
      type: object
      required:
        - type
        - resource_address
        - balance_change
      properties:
        type:
          $ref: "#/components/schemas/LtsFeeFungibleResourceBalanceChangeType"
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        balance_change:
          type: string
          description: |
            The string-encoded decimal representing the amount of change for the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    LtsFeeFungibleResourceBalanceChangeType:
      type: string
      enum:
        - FeePayment
        - FeeDistributed
        - TipDistributed
        - RoyaltyDistributed
    LtsEntityNonFungibleBalanceChanges:
      type: object
      required:
        - entity_address
        - resource_address
        - added
        - removed
      properties:
        entity_address:
          type: string
          description: The Bech32m-encoded human readable version of the entity's address
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the non-fungible resource's address
        added:
          type: array
          items:
            $ref: "#/components/schemas/LtsNonFungibleLocalId"
        removed:
          type: array
          items:
            $ref: "#/components/schemas/LtsNonFungibleLocalId"
    LtsNonFungibleLocalId:
      type: string
      description: |
        The simple string representation of the non-fungible id.
        * For string ids, this is `<the-string-id>`
        * For integer ids, this is `#the-integer-id#`
        * For bytes ids, this is `[the-lower-case-hex-representation]`
        * For RUID ids, this is `{...-...-...-...}` where `...` are each 16 hex characters.
        A given non-fungible resource has a fixed local id kind, so this representation uniquely
        identifies this non-fungible under the given resource address.
    LtsResultantAccountFungibleBalances:
      type: object
      required:
        - account_address
        - resultant_balances
      properties:
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        resultant_balances:
          type: array
          items:
            $ref: "#/components/schemas/LtsResultantFungibleBalance"
    LtsResultantFungibleBalance:
      type: object
      required:
        - resource_address
        - resultant_balance
      properties:
        resource_address:
          type: string
          description: |
            The Bech32m-encoded human readable version of the fungible resource's address
        resultant_balance:
          type: string
          description: |
            The string-encoded decimal representing the resultant balance of the fungible resource.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
#####################################################
# REQUEST: /lts/stream/account-transaction-outcomes #
#####################################################
    LtsStreamAccountTransactionOutcomesRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - account_address
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's address
        from_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
    LtsStreamAccountTransactionOutcomesResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - committed_transaction_outcomes
      properties:
        from_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: |
            The first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The maximum state version currently committed on this node's ledger.
        committed_transaction_outcomes:
          description: A committed transaction outcomes list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/LtsCommittedTransactionOutcome"
##########################################
# REQUEST: /status/network-configuration #
##########################################
    NetworkConfigurationResponse:
      type: object
      required:
        - version
        - network
        - network_id
        - network_hrp_suffix
        - usd_price_in_xrd
        - address_types
        - well_known_addresses
      properties:
        version:
          description: Different versions regarding the node, network and api.
          type: object
          required:
            - core_version
            - api_version
          properties:
            core_version:
              type: string
            api_version:
              type: string
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        network_id:
          $ref: "#/components/schemas/NetworkIdentifierByte"
        network_hrp_suffix:
          type: string
          description: The network suffix used for Bech32m HRPs used for addressing.
        usd_price_in_xrd:
          type: string
          description: |
            The current value of the protocol-based USD/XRD multiplier (i.e. an amount of XRDs to be paid for 1 USD).
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        address_types:
          type: array
          items:
            $ref: "#/components/schemas/AddressType"
        well_known_addresses:
          type: object
          description: |
            Key addresses for this network, as per https://docs.radixdlt.com/docs/well-known-addresses.

            Note that at Cuttlefish, some of these names have been updated elsewhere in the stack,
            but for backwards compatibility, we must use the old names here.

            Notably:
            - `secp256k1_signature_virtual_badge` is now `secp256k1_signature_resource` elsewhere
            - `ed25519_signature_virtual_badge` is now `ed25519_signature_resource` elsewhere
            - `package_of_direct_caller_virtual_badge` is now `package_of_direct_caller_resource` elsewhere
            - `global_caller_virtual_badge` is now `global_caller_resource` elsewhere
            - `system_transaction_badge` is now `system_transaction_resource` elsewhere
          required:
            # Resource Managers
            - xrd
            - secp256k1_signature_virtual_badge
            - ed25519_signature_virtual_badge
            - system_transaction_badge
            - package_of_direct_caller_virtual_badge
            - global_caller_virtual_badge
            - package_owner_badge
            - validator_owner_badge
            - account_owner_badge
            - identity_owner_badge
            # Packages
            - package_package
            - resource_package
            - identity_package
            - consensus_manager_package
            - account_package
            - access_controller_package
            - transaction_processor_package
            - metadata_module_package
            - royalty_module_package
            - role_assignment_module_package
            - genesis_helper_package
            - faucet_package
            - pool_package
            # - locker_package - Can be made required post Bottlenose
            # - transaction_tracker_package - Can be made required post Cuttlefish
            # - test_utils_package - Can be made required post Cuttlefish
            # Components
            - consensus_manager
            - transaction_tracker
            - genesis_helper
            - faucet
          properties:
            xrd:
              type: string
            secp256k1_signature_virtual_badge:
              type: string
            ed25519_signature_virtual_badge:
              type: string
            system_transaction_badge:
              type: string
            package_of_direct_caller_virtual_badge:
              type: string
            global_caller_virtual_badge:
              type: string
            package_owner_badge:
              type: string
            validator_owner_badge:
              type: string
            account_owner_badge:
              type: string
            identity_owner_badge:
              type: string
            package_package:
              type: string
            resource_package:
              type: string
            account_package:
              type: string
            identity_package:
              type: string
            consensus_manager_package:
              type: string
            access_controller_package:
              type: string
            transaction_processor_package:
              type: string
            metadata_module_package:
              type: string
            royalty_module_package:
              type: string
            role_assignment_module_package:
              type: string
            genesis_helper_package:
              type: string
            faucet_package:
              type: string
            pool_package:
              type: string
            transaction_tracker_package:
              type: string
            locker_package:
              type: string
            test_utils_package:
              type: string
            consensus_manager:
              type: string
            genesis_helper:
              type: string
            faucet:
              type: string
            transaction_tracker:
              type: string
    AddressType:
      type: object
      required:
        - hrp_prefix
        - entity_type
        - address_byte_prefix
        - address_byte_length
      properties:
        hrp_prefix:
          type: string
        entity_type:
          $ref: "#/components/schemas/EntityType"
        address_byte_prefix:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        address_byte_length:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
###################################
# REQUEST: /status/network-status #
###################################
    NetworkStatusRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    NetworkStatusResponse:
      type: object
      required:
        - pre_genesis_state_identifier
        - current_protocol_version
        - current_state_identifier
      properties:
        pre_genesis_state_identifier:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            The ledger state identifier of a fresh ledger before any genesis transactions.
        genesis_epoch_round:
          $ref: "#/components/schemas/EpochRound"
          description: |
            The epoch details for the genesis epoch and round.
            The genesis epoch will be the last Olympia epoch + 1, and have a "fake" round-number 1 (because there is no round for the genesis transaction).
            In the Gateway, this can be used for the epoch and round number before the first RoundUpdate transaction.
            It is not present until genesis has been run.
        post_genesis_state_identifier:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            The ledger state after the genesis transactions have been executed.
            It is not present until genesis has been run.
        post_genesis_epoch_round:
          $ref: "#/components/schemas/EpochRound"
          description: |
            The post-genesis epoch and round.
        current_state_identifier:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            The current state identifier at the top of the node's copy of the ledger (i.e. as of the latest committed transaction).
        current_epoch_round:
          $ref: "#/components/schemas/EpochRound"
          description: |
            The current epoch and round of the ledger.
            It is not present until genesis has been run.
        current_protocol_version:
          type: string
          description: |
            A descriptor for the current protocol version that the node is running.
    EpochRound:
      type: object
      required:
        - epoch
        - round
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
            Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
    CommittedStateIdentifier:
      allOf:
        - type: object
          required:
            - state_version
          properties:
            state_version:
              $ref: "#/components/schemas/StateVersion"
              description: The state version, which increments with each transaction, starting at `0` pre-genesis.
        - $ref: "#/components/schemas/LedgerHashes"
##############################
# REQUEST: /status/scenarios #
##############################
    ScenariosRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    ScenariosResponse:
      type: object
      required:
        - executed_scenarios
      properties:
        executed_scenarios:
          type: array
          items:
            $ref: "#/components/schemas/ExecutedScenario"
          description: |
            Scenarios executed as part of Genesis and Protocol Updates, in their execution order.
    ExecutedScenario:
      type: object
      required:
        - sequence_number
        - logical_name
        - committed_transactions
        - addresses
      properties:
        sequence_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000000
          description: An index of the Scenario (reflecting its execution order).
        logical_name:
          type: string
        committed_transactions:
          type: array
          items:
            $ref: "#/components/schemas/ExecutedScenarioTransaction"
          description: Transactions successfully committed by the Scenario.
        addresses:
          type: object
          description: |
            Well-named addresses touched/created by the Scenario, keyed by their name.
          additionalProperties:
            $ref: "#/components/schemas/DescribedAddress"
    ExecutedScenarioTransaction:
      type: object
      required:
        - logical_name
        - state_version
        - intent_hash
        - intent_hash_bech32m
      properties:
        logical_name:
          type: string
        state_version:
          $ref: "#/components/schemas/StateVersion"
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
    DescribedAddress:
      type: string
      description: An arbitrary Bech32m-encoded human readable address (its type should be inferred from `logical_name`).
##########################
# REQUEST: /mempool/list #
##########################
    MempoolListRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
    MempoolListResponse:
      type: object
      required:
        - contents
      properties:
        contents:
          type: array
          items:
            $ref: "#/components/schemas/MempoolTransactionHashes"
    MempoolTransactionHashes:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - payload_hash
        - payload_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
#################################
# REQUEST: /mempool/transaction #
#################################
    MempoolTransactionRequest:
      type: object
      required:
        - network
        - payload_hashes
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        payload_hashes:
          description: A list of payload hashes to attempt to read. Each hash must be either hex, or in Bech32m format.
          type: array
          items:
            $ref: "#/components/schemas/NotarizedTransactionHashInput"
    MempoolTransactionResponse:
      type: object
      required:
        - count
        - payloads
      properties:
        count:
          type: integer
          format: int32
          description: An integer giving the total count of payload hashes checked in the returned response.
        payloads:
          type: array
          description: |
            An array containing pairs of payload hash (query) and payload hex or error (response).
            Note that this response is bounded - this means it is not guaranteed all queries will be processed.
            Please query missing payload hashes again.
          items:
            type: object
            required:
              - hash
              - hash_bech32m
            properties:
              hash:
                $ref: "#/components/schemas/NotarizedTransactionHash"
              hash_bech32m:
                $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
              hex:
                type: string
                description: The hex-encoded full notarized transaction payload - returned only if found in mempool.
              error:
                type: string
                description: |
                  Error message why `hex` field is missing: the transaction was not found in the mempool or the provided hash is invalid.
###############################
# REQUEST: /transaction/parse #
###############################
    TransactionParseRequest:
      type: object
      required:
        - network
        - payload_hex
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        payload_hex:
          type: string
          description: |
            A hex-encoded payload of a full transaction or a partial transaction - either a notarized transaction,
            a signed transaction intent an unsigned transaction intent, or a ledger payload.
        parse_mode:
          type: string
          enum:
            - Any
            - Notarized
            - Signed
            - Unsigned
            - Ledger
          description: |
            The type of transaction payload that should be assumed. If omitted, "Any" is used - where the payload is
            attempted to be parsed as each of the following in turn: Notarized, Signed, Unsigned, Ledger.
        validation_mode:
          type: string
          enum:
            - None
            - Static
            - Full
          description: |
            The type of validation that should be performed, if the payload correctly decompiles as a Notarized Transaction.
            This is only relevant for Notarized payloads. If omitted, "Static" is used.
        response_mode:
          type: string
          enum:
            - Basic
            - Full
          description: |
            The amount of information to return in the response.
            "Basic" includes the type, validity information, and any relevant identifiers.
            "Full" also includes the fully parsed information.
            If omitted, "Full" is used.
        transaction_format_options:
          $ref: "#/components/schemas/TransactionFormatOptions"
    TransactionParseResponse:
      type: object
      required:
        - parsed
        - is_valid
      properties:
        parsed:
          $ref: "#/components/schemas/ParsedTransaction"
    ParsedTransactionType:
      type: string
      description: The type of the parsed (partial) transaction payload
      enum:
        - NotarizedTransaction
        - NotarizedTransactionV2
        - SignedTransactionIntent
        - TransactionIntent
        - LedgerTransaction
    ParsedTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ParsedTransactionType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ParsedTransactionType
          NotarizedTransaction: '#/components/schemas/ParsedNotarizedTransaction'
          NotarizedTransactionV2: '#/components/schemas/ParsedNotarizedTransactionV2'
          SignedTransactionIntent: '#/components/schemas/ParsedSignedTransactionIntent'
          TransactionIntent: '#/components/schemas/ParsedTransactionIntent'
          LedgerTransaction: '#/components/schemas/ParsedLedgerTransaction'
    ParsedNotarizedTransaction:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/NotarizedTransaction"
            identifiers:
              $ref: "#/components/schemas/ParsedNotarizedTransactionIdentifiers"
            validation_error:
              type: object
              description: |
                If the transaction is known to not be valid, this gives a reason.
                Different levels of validation are performed, dependent on the validation mode.
                Note that, even if validation mode is Static or Full, the transaction may
                still be rejected or fail due to issues at runtime (e.g. if the loan cannot be repaid).
              required:
                - reason
                - is_permanent
              properties:
                reason:
                  type: string
                  description: |
                    The error message.
                is_permanent:
                  type: boolean
                  description: |
                    Whether the error is known to be permanent, or not.
                    This relates to whether the transaction would be rejected permanently or temporarily if submitted.
    ParsedNotarizedTransactionV2:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/NotarizedTransactionV2"
            identifiers:
              $ref: "#/components/schemas/ParsedNotarizedTransactionIdentifiers"
            validation_error:
              type: object
              description: |
                If the transaction is known to not be valid, this gives a reason.
                Different levels of validation are performed, dependent on the validation mode.
                Note that, even if validation mode is Static or Full, the transaction may
                still be rejected or fail due to issues at runtime (e.g. if the loan cannot be repaid).
              required:
                - reason
                - is_permanent
              properties:
                reason:
                  type: string
                  description: |
                    The error message.
                is_permanent:
                  type: boolean
                  description: |
                    Whether the error is known to be permanent, or not.
                    This relates to whether the transaction would be rejected permanently or temporarily if submitted.
    ParsedNotarizedTransactionIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - signed_intent_hash
        - signed_intent_hash_bech32m
        - payload_hash
        - payload_hash_bech32m
        - ledger_hash
        - ledger_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/SignedTransactionIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/SignedTransactionIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        ledger_hash:
          $ref: "#/components/schemas/LedgerPayloadHash"
        ledger_hash_bech32m:
          $ref: "#/components/schemas/LedgerPayloadHashBech32m"
    ParsedSignedTransactionIntent:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            signed_intent:
              $ref: "#/components/schemas/SignedTransactionIntent"
            identifiers:
              $ref: "#/components/schemas/ParsedSignedTransactionIntentIdentifiers"
    ParsedSignedTransactionIntentIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
        - signed_intent_hash
        - signed_intent_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/SignedTransactionIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/SignedTransactionIntentHashBech32m"
    ParsedTransactionIntent:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            intent:
              $ref: "#/components/schemas/TransactionIntent"
            identifiers:
              $ref: "#/components/schemas/ParsedTransactionIntentIdentifiers"
    ParsedTransactionIntentIdentifiers:
      type: object
      required:
        - intent_hash
        - intent_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
    ParsedLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/ParsedTransaction"
        - type: object
          required:
            - identifiers
          properties:
            ledger_transaction:
              $ref: "#/components/schemas/LedgerTransaction"
            identifiers:
              $ref: "#/components/schemas/ParsedLedgerTransactionIdentifiers"
    ParsedLedgerTransactionIdentifiers:
      type: object
      required:
        - ledger_hash
        - ledger_hash_bech32m
      properties:
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHash"
        intent_hash_bech32m:
          $ref: "#/components/schemas/TransactionIntentHashBech32m"
        signed_intent_hash:
          $ref: "#/components/schemas/SignedTransactionIntentHash"
        signed_intent_hash_bech32m:
          $ref: "#/components/schemas/SignedTransactionIntentHashBech32m"
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        ledger_hash:
          $ref: "#/components/schemas/LedgerPayloadHash"
        ledger_hash_bech32m:
          $ref: "#/components/schemas/LedgerPayloadHashBech32m"
################################
# REQUEST: /transaction/submit #
################################
    TransactionSubmitRequest:
      type: object
      required:
        - network
        - notarized_transaction_hex
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        notarized_transaction_hex:
          description: A hex-encoded, compiled notarized transaction.
          type: string
        force_recalculate:
          description: If true, the transaction validity is freshly recalculated without using any caches (defaults false)
          type: boolean
    TransactionSubmitResponse:
      type: object
      required:
        - duplicate
      properties:
        duplicate:
          description: Is true if the transaction is a duplicate of an existing transaction in the mempool.
          type: boolean
    TransactionSubmitErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/TransactionSubmitErrorDetails"
    TransactionSubmitErrorDetailsType:
      type: string
      enum:
        - PriorityThresholdNotMet
        - IntentAlreadyCommitted
        - Rejected
    TransactionSubmitErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/TransactionSubmitErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TransactionSubmitErrorDetailsType
          PriorityThresholdNotMet: '#/components/schemas/TransactionSubmitPriorityThresholdNotMetErrorDetails'
          IntentAlreadyCommitted: '#/components/schemas/TransactionSubmitIntentAlreadyCommitted'
          Rejected: '#/components/schemas/TransactionSubmitRejectedErrorDetails'
    TransactionSubmitPriorityThresholdNotMetErrorDetails:
      allOf:
        - $ref: "#/components/schemas/TransactionSubmitErrorDetails"
        - type: object
          required:
            - tip_percentage
            # - tip_proportion - Can be made required post Cuttlefish
          properties:
            tip_percentage:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              deprecated: true
              description: |
                NOTE: This is kept for backwards compatibility, but we recommend using `tip_proportion` instead.

                Tip percentage of the submitted (and rejected) transaction. For V2 transactions specifying basis point tips,
                the amount is rounded down.
            min_tip_percentage_required:
              type: integer
              format: int32
              minimum: 0
              maximum: 65535
              deprecated: true
              description: |
                NOTE: This is kept for backwards compatibility, but we recommend using `min_tip_proportion_required` instead.

                A lower bound for tip percentage at current mempool state. Anything lower than this will very likely result in a mempool rejection.
                A missing value means there is no tip that can guarantee submission.
            tip_proportion:
              type: string
              description: |
                The string-encoded decimal tip proportion of the submitted (and rejected) transaction.

                This field will always be present on Cuttlefish nodes, but is marked as not-required for Cuttlefish launch,
                to avoid a dependency on clients to update after the node is updated.
            min_tip_proportion_required:
              type: string
              description: |
                A lower bound for tip proportion at current mempool state. Anything lower than this will very likely result in a mempool rejection.
                A missing value means there is no tip that can guarantee submission.
    TransactionSubmitIntentAlreadyCommitted:
      allOf:
        - $ref: "#/components/schemas/TransactionSubmitErrorDetails"
        - type: object
          required:
            - committed_as
          properties:
            committed_as:
              $ref: "#/components/schemas/CommittedIntentMetadata"
              description: |
                Details of an already-committed transaction that had the same intent.
    TransactionSubmitRejectedErrorDetails:
      allOf:
        - $ref: "#/components/schemas/TransactionSubmitErrorDetails"
        - type: object
          description: |
            Indicates that the transaction was executed and resulted in a rejection,
            therefore the transaction is not being added into the mempool.
          required:
            - error_message
            - is_fresh
            - is_payload_rejection_permanent
            - is_intent_rejection_permanent
          properties:
            error_message:
              type: string
              description: An explanation of the error
            is_fresh:
              type: boolean
              description: |
                Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending
                transaction result cache.
            is_payload_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this payload is known to be permanent.
            is_intent_rejection_permanent:
              type: boolean
              description: |
                Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection
                being permanent, as it implies any payloads containing the intent will also be permanently rejected.
            retry_from_timestamp:
              $ref: "#/components/schemas/InstantMs"
              description: |
                The time after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary, and not due to the header specifying a "from epoch" in the future.
            retry_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch after which the node will consider recalculating the validity of the transaction.
                Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
            invalid_from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
                Only present if the rejection isn't permanent.
################################
# REQUEST: /transaction/status #
################################
    TransactionStatusRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHashInput"
    TransactionStatusResponse:
      type: object
      required:
        - intent_status
        - status_description
        - known_payloads
      properties:
        intent_status:
          $ref: "#/components/schemas/TransactionIntentStatus"
        status_description:
          type: string
          description: |
            An explanation as to why the intent status is resolved as it is.
        invalid_from_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected.
            Only present if the intent status is InMempool or Unknown and we know about a payload.
        known_payloads:
          type: array
          items:
            $ref: "#/components/schemas/TransactionPayloadDetails"
    TransactionPayloadDetails:
      type: object
      required:
        - payload_hash
        - payload_hash_bech32m
        - status
      properties:
        payload_hash:
          $ref: "#/components/schemas/NotarizedTransactionHash"
        payload_hash_bech32m:
          $ref: "#/components/schemas/NotarizedTransactionHashBech32m"
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: |
            State version of a committed transaction.
            This field will be present only if the `status` is `Committed*`.
        status:
          $ref: "#/components/schemas/TransactionPayloadStatus"
          description: |
            The status of the transaction payload, as per this node.
            A NotInMempool status means that it wasn't rejected at last execution attempt, but it's not currently in the mempool either.
        error_message:
          description: An explanation for the error, if failed or rejected
          type: string
    TransactionPayloadStatus:
      type: string
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentlyRejected
        - TransientlyRejected
        - InMempool
        - NotInMempool
    TransactionIntentStatus:
      type: string
      description: |
        The status of the transaction intent, as determined by the node.
        FateUncertain or FateUncertainButLikelyRejection mean that it's still possible that a payload containing the transaction
      enum:
        - CommittedSuccess
        - CommittedFailure
        - PermanentRejection
        - InMempool
        - NotSeen
        - FateUncertain
        - FateUncertainButLikelyRejection
#################################
# REQUEST: /transaction/receipt #
#################################
    TransactionReceiptRequest:
      type: object
      required:
        - network
        - intent_hash
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        intent_hash:
          $ref: "#/components/schemas/TransactionIntentHashInput"
        transaction_format_options:
          $ref: "#/components/schemas/TransactionFormatOptions"
    TransactionReceiptResponse:
      type: object
      required:
        - committed
      properties:
        committed:
          $ref: "#/components/schemas/CommittedTransaction"
#####################################
# REQUEST: /transaction/callpreview #
#####################################
    TransactionCallPreviewRequest:
      type: object
      required:
        - network
        - target
        - arguments
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSelector"
        target:
          $ref: "#/components/schemas/TargetIdentifier"
        arguments:
          type: array
          description: Argument list
          items:
            type: string
            description: SBOR-encoded argument, formatted as a hex-string
    TargetIdentifierType:
      type: string
      enum:
        - Method
        - Function
    TargetIdentifier:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/TargetIdentifierType'
      discriminator:
        propertyName: type
        mapping:
          Method: '#/components/schemas/ComponentMethodTargetIdentifier'
          Function: '#/components/schemas/BlueprintFunctionTargetIdentifier'
    ComponentMethodTargetIdentifier:
      allOf:
        - $ref: '#/components/schemas/TargetIdentifier'
        - type: object
          required:
            - component_address
            - method_name
          properties:
            component_address:
              $ref: "#/components/schemas/ComponentAddress"
            method_name:
              type: string
    BlueprintFunctionTargetIdentifier:
      allOf:
        - $ref: '#/components/schemas/TargetIdentifier'
        - type: object
          required:
            - package_address
            - blueprint_name
            - function_name
          properties:
            package_address:
              $ref: "#/components/schemas/PackageAddress"
            blueprint_name:
              type: string
            function_name:
              type: string
    TransactionCallPreviewResponse:
      type: object
      required:
        - at_ledger_state
        - status
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger on top of which the preview was performed.
        status:
          $ref: "#/components/schemas/TransactionStatus"
        output:
          $ref: "#/components/schemas/SborData"
        error_message:
          type: string
          description: Error message (only present if status is Failed or Rejected)
#################################
# REQUEST: /transaction/preview #
#################################
    TransactionPreviewRequest:
      type: object
      required:
        - network
        - manifest
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSelector"
        manifest:
          description: A text representation of a transaction manifest.
          type: string
        blobs_hex:
          description: An array of hex-encoded blob data, if referenced by the manifest.
          type: array
          items:
            type: string
        start_epoch_inclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch at which the transaction starts
            being valid.
            If not provided, the current epoch will be used (taking into account the
            `at_ledger_state`, if specified).
        end_epoch_exclusive:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch at which the transaction is no
            longer valid.
            If not provided, a maximum epoch (relative to the `start_epoch_inclusive`) will be used.
        notary_public_key:
          $ref: "#/components/schemas/PublicKey"
          description: |
            The notary public key to use.
            If not provided, this defaults to a fixed public key.
        notary_is_signatory:
          type: boolean
          description: |
            Whether the notary should be used as a signer (optional).
            If not provided, this defaults to false.
        tip_percentage:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: |
            An integer between `0` and `65535`, giving the validator tip as a percentage amount.
            A value of `1` corresponds to a 1% fee.
            If not provided, this defaults to 0.
        nonce:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: |
            An integer between `0` and `2^32 - 1`, chosen to allow a unique intent to be created
            (to enable submitting an otherwise identical/duplicate intent).
            If not provided, this defaults to 0.
        signer_public_keys:
          type: array
          items:
            $ref: "#/components/schemas/PublicKey"
          description: |
            A list of public keys to be used as transaction signers.
            If not provided, this defaults to an empty array.
        message:
          description: An optional transaction message. Only affects the costing.
          $ref: "#/components/schemas/TransactionMessage"
        options:
          $ref: "#/components/schemas/TransactionPreviewResponseOptions"
        flags:
          $ref: "#/components/schemas/PreviewFlags"
    TransactionPreviewResponseOptions:
      type: object
      description: A set of flags to configure the response of the transaction preview.
      properties:
        radix_engine_toolkit_receipt:
          type: boolean
          description: |
            This flag controls whether the preview response will include a Radix Engine Toolkit serializable
            receipt or not. If not provided, this defaults to `false` and no toolkit receipt is provided in
            the response.
    TransactionPreviewResponse:
      type: object
      required:
        - at_ledger_state
        - encoded_receipt
        - receipt
        - logs
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger on top of which the preview was performed.
        encoded_receipt:
          type: string
          description: |
            The hex-sbor-encoded receipt.

            This field is deprecated and will be removed from the API with the release of the next
            protocol update, cuttlefish. This field was provided primarily for use with the Radix
            Engine Toolkit and its execution summary functionality. If you still wish to use this
            functionality update your Radix Engine Toolkit and use the receipt provided in the
            `radix_engine_toolkit_receipt` field of this response.
          deprecated: true
        receipt:
          $ref: "#/components/schemas/TransactionReceipt"
        radix_engine_toolkit_receipt:
          type: object
          description: |
            An optional field which is only provided if the `radix_engine_toolkit_receipt`
            flag is set to true when requesting a transaction preview from the API.

            This receipt is primarily intended for use with the toolkit and may contain information
            that is already available in the receipt provided in the `receipt` field of this
            response.

            A typical client of this API is not expected to use this receipt. The primary clients
            this receipt is intended for is the Radix wallet or any client that needs to perform
            execution summaries on their transactions.
        instruction_resource_changes:
          type: array
          description: |
            This object holds changes in resource balances for all vaults within affected
            accounts/components for each instruction.

            This field is deprecated (and not required) as of the Dugong release and may be removed
            from the API in the future.
          items:
            $ref: "#/components/schemas/InstructionResourceChanges"
          deprecated: true
        logs:
          type: array
          items:
            type: object
            required:
              - level
              - message
            properties:
              level:
                type: string
              message:
                type: string
    PreviewFlags:
      type: object
      properties:
        use_free_credit:
          description: |
            If enabled, a large simulated pool of XRD is marked as locked.

            This mode can be used to estimate fees. To get a reliable estimate, we recommend that your
            transaction is as close as possible to the real transaction. For example:
            - You should still use a lock fee command, but you can set it to lock a fee of 0.
            - You should include the public keys that will sign the transaction, so the cost of
              signature verification and payload size can be accounted for.
          type: boolean
        assume_all_signature_proofs:
          description: |
            If enabled, each manifest processor's auth zone will be given a simulated proof of
            every signature, which can be used to pass signature access rules.

            This can be used to preview transactions even if the required signatures are not
            known ahead of time.

            See the documentation on
            [advanced access rules](https://docs.radixdlt.com/docs/advanced-accessrules#signature-requirements)
            for more information.
          type: boolean
        skip_epoch_check:
          description: |
            If enabled, the various runtime epoch-related verifications are skipped:
            - The `start_epoch_inclusive` and `end_epoch_exclusive` parameters, if specified, are ignored.
            - The duplicate intent checks (which rely on the expiry epoch) are also ignored.

            However, if the start and end epoch are provided, they must still be statically valid.
            We recommend using a value of `start_epoch_inclusive = 1` and `end_epoch_exclusive = 2` in this
            case.
          type: boolean
        disable_auth_checks:
          description: |
            If enabled, all authorization checks are skipped during execution.

            This could be used to e.g.:
            * Preview protocol update style transactions.
            * Mint resources for previewing trades with resources you don't own.
              If doing this, be warned: only resources which were potentially mintable/burnable
              at creation time will be mintable/burnable, due to feature flags on the resource.

            Warning: this mode of operation is quite a departure from normal operation:
            * Calculated fees will likely be lower than a standard execution.
            * This mode can subtly break invariants some dApp code might rely on, or result in unexpected
              behaviour, so the execution result might not be valid for your needs. For example,
              if this flag was used to mint pool units to preview a redemption (or some dApp interaction which
              behind the scenes redeemed them), they'd redeem for less than they're currently worth,
              because the blueprint code relies on the total supply of the pool units to calculate their
              redemption worth, and you've just inflated the total supply through the mint operation.
          type: boolean
####################################
# REQUEST: /transaction/preview-v2 #
####################################
    TransactionPreviewV2Request:
      type: object
      required:
        - network
        - preview_transaction
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSelector"
        preview_transaction:
          $ref: "#/components/schemas/PreviewTransaction"
        flags:
          $ref: "#/components/schemas/PreviewFlags"
        options:
          $ref: "#/components/schemas/TransactionPreviewV2ResponseOptions"
    TransactionPreviewV2ResponseOptions:
      type: object
      description: A set of flags to configure the response of the transaction preview.
      properties:
        core_api_receipt:
          type: boolean
          description: |
            This flag controls whether the preview response will include a Core API receipt or not.
            If not provided, this defaults to `false` and no core api receipt is provided in
            the response.
        radix_engine_toolkit_receipt:
          type: boolean
          description: |
            This flag controls whether the preview response will include a Radix Engine Toolkit serializable
            receipt or not. If not provided, this defaults to `false` and no toolkit receipt is provided in
            the response.
        logs:
          type: boolean
          description: |
            This flag controls whether the preview response will include execution logs.
            If not provided, this defaults to `false` and no logs will be provided in the response.
    PreviewTransactionType:
      type: string
      enum:
        - Compiled
    PreviewTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/PreviewTransactionType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match PreviewTransactionType
          Compiled: '#/components/schemas/CompiledPreviewTransaction'
    CompiledPreviewTransaction:
      allOf:
        - $ref: "#/components/schemas/PreviewTransaction"
        - type: object
          required:
            - preview_transaction_hex
          properties:
            preview_transaction_hex:
              description: |
                A hex-encoded, compiled `RawPreviewTransaction`.

                As of Cuttlefish, only `PreviewTransactionV2` is supported.

                A `PreviewTransactionV2` can be created with a v2 transaction builder:
                * If using Rust, it can be created with a `TransactionV2Builder` using `build_preview_transaction()`
                  and then converted to hex with `preview_transaction.to_raw().unwrap().to_hex()`
                * If using the toolkit, you can create this using the v2 transaction builder.

                Some subtleties:
                * Partial transactions can't be previewed. Instead, they must be wrapped inside a
                  transaction wrapper, so that the engine knows how to yield to them appropriately.
                * Currently the builder assumes that the signed partial transactions have real signatures.
                  This isn't strictly required, and we may create a builder in future which allows providing
                  public keys when building partial transactions for use in preview.
                * If you don't have signatures to hand, you can simply not sign the partial transactions,
                  and then use the `assume_all_signature_proofs` preview flag, although be advised that
                  this may result in the fee estimate being slightly lower during preview.
                * We may create more ergonomic builders for PreviewTransactions which allow use of
                  public keys to denote the signers of subintents. Let us know if this is important
                  for your use case.
              type: string
    TransactionPreviewV2Response:
      type: object
      required:
        - at_ledger_state
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger on top of which the preview was performed.
        receipt:
          description: |
            This is provided unless the `core_api_receipt` flag is set to false in the `options`
            property of the request.
          $ref: "#/components/schemas/TransactionReceipt"
        radix_engine_toolkit_receipt:
          type: object
          description: |
            An optional field which is only provided if the `radix_engine_toolkit_receipt`
            flag is set to true in the `options` property of the request.

            This receipt is primarily intended for use with the toolkit and may contain information
            that is already available in the receipt provided in the `receipt` field of this
            response.

            A typical client of this API is not expected to use this receipt. The primary clients
            this receipt is intended for is the Radix wallet or any client that needs to perform
            execution summaries on their transactions.
        logs:
          type: array
          description: |
            An optional field which is only provided if the `logs` flag is set to true in the
            `options` property of the request.

            If present, it gives the emitted logs from the transaction execution.
          items:
            type: object
            required:
              - level
              - message
            properties:
              level:
                type: string
              message:
                type: string
    TransactionPreviewV2ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/TransactionPreviewV2ErrorDetails"
    TransactionPreviewV2ErrorDetailsType:
      type: string
      enum:
        - Invalid
    TransactionPreviewV2ErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/TransactionPreviewV2ErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match TransactionPreviewV2ErrorDetailsType
          Invalid: "#/components/schemas/InvalidTransactionPreviewV2ErrorDetails"
    InvalidTransactionPreviewV2ErrorDetails:
      allOf:
        - $ref: "#/components/schemas/TransactionPreviewV2ErrorDetails"
        - type: object
          required:
            - validation_error
          properties:
            validation_error:
              type: string
###########################
# REQUEST: /stream/proofs #
###########################
    StreamProofsRequest:
      description: |
        A request to retrieve a sublist of proofs.
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        filter:
          $ref: "#/components/schemas/StreamProofsFilter"
        max_page_size:
          description: If specified, the maximum number of proofs that will be returned.
          type: integer
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    StreamProofsFilterType:
      type: string
      enum:
        - Any
        - NewEpochs
        - ProtocolUpdateInitializations
        - ProtocolUpdateExecution
    StreamProofsFilter:
      type: object
      description: If not provided, defaults to "Any".
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/StreamProofsFilterType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match StreamProofsFilterType
          Any: '#/components/schemas/StreamProofsFilterAny'
          NewEpochs: '#/components/schemas/StreamProofsFilterNewEpochs'
          ProtocolUpdateInitializations: '#/components/schemas/StreamProofsFilterProtocolUpdateInitializations'
          ProtocolUpdateExecution: '#/components/schemas/StreamProofsFilterProtocolUpdateExecution'
    StreamProofsFilterAny:
      allOf:
        - $ref: "#/components/schemas/StreamProofsFilter"
        - type: object
          properties:
            from_state_version:
              $ref: "#/components/schemas/StateVersion"
              description:
                The first proof to be returned should be at this state version or above.
                If empty, it starts from 0.
    StreamProofsFilterNewEpochs:
      allOf:
        - $ref: "#/components/schemas/StreamProofsFilter"
        - type: object
          properties:
            from_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description:
                The first proof to be returned should be the proof starting this epoch.
                If empty, it starts from the first epoch proof after genesis.
                The network status endpoint can be used to find the current epoch.
    StreamProofsFilterProtocolUpdateInitializations:
      allOf:
        - $ref: "#/components/schemas/StreamProofsFilter"
        - type: object
          properties:
            from_state_version:
              $ref: "#/components/schemas/StateVersion"
              description:
                The first proof to be returned should be at this state version or above.
                If empty, it starts from 0.
    StreamProofsFilterProtocolUpdateExecution:
      allOf:
        - $ref: "#/components/schemas/StreamProofsFilter"
        - type: object
          properties:
            protocol_version:
              type: string
              description: |
                The protocol version name to filter to.
            from_state_version:
              $ref: "#/components/schemas/StateVersion"
              description:
                The first proof to be returned should be at this state version or above.
                If empty, it starts from 0.
    StreamProofsResponse:
      type: object
      required:
        - page
      properties:
        page:
          description: A page of ledger proofs stored by this node.
          type: array
          items:
            $ref: "#/components/schemas/LedgerProof"
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    StreamProofsErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/StreamProofsErrorDetails"
    StreamProofsErrorDetailsType:
      type: string
      enum:
        - RequestedStateVersionOutOfBounds
        - RequestedEpochOutOfBounds
    StreamProofsErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/StreamProofsErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match StreamProofsErrorDetailsType
          RequestedStateVersionOutOfBounds: '#/components/schemas/StreamProofsErrorDetailsRequestedStateVersionOutOfBounds'
          RequestedEpochOutOfBounds: '#/components/schemas/StreamProofsErrorDetailsRequestedEpochOutOfBounds'
    StreamProofsErrorDetailsRequestedStateVersionOutOfBounds:
      allOf:
        - $ref: "#/components/schemas/StreamProofsErrorDetails"
        - type: object
          required:
            - max_ledger_state_version
          properties:
            max_ledger_state_version:
              $ref: "#/components/schemas/StateVersion"
              description: |
                The maximum state version currently committed on this node's ledger.
                *Note on the bounds:* the requested `from_state_version` cannot be greater than
                `max_ledger_state_version + 1`. Any greater requested value triggers this error.
    StreamProofsErrorDetailsRequestedEpochOutOfBounds:
      allOf:
        - $ref: "#/components/schemas/StreamProofsErrorDetails"
        - type: object
          required:
            - max_ledger_epoch
          properties:
            max_ledger_epoch:
              type: integer
              format: int64
              minimum: 0
              maximum: 10000000000
              description: |
                The maximum completed epoch committed to this node's ledger.
                *Note on the bounds:* the requested `from_epoch` cannot be greater than
                `max_ledger_epoch + 1`. Any greater requested value triggers this error.
    EpochEndLedgerProof:
      type: object
      required:
        - end_of_epoch
        - ledger_proof
      properties:
        end_of_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
        ledger_proof:
          $ref: "#/components/schemas/LedgerProof"
#################################
# REQUEST: /stream/transactions #
#################################
    StreamTransactionsRequest:
      description: |
        A request to retrieve a sublist of committed transactions from the ledger.
      type: object
      required:
        - network
        - from_state_version
        - limit
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        from_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The first (resultant) state version to be returned
        limit:
          description: The maximum number of transactions that will be returned.
          type: integer
        sbor_format_options:
          $ref: "#/components/schemas/SborFormatOptions"
        transaction_format_options:
          $ref: "#/components/schemas/TransactionFormatOptions"
        substate_format_options:
          $ref: "#/components/schemas/SubstateFormatOptions"
        include_proofs:
          description: Whether to include LedgerProofs (default false)
          type: boolean
    StreamTransactionsResponse:
      type: object
      required:
        - from_state_version
        - count
        - max_ledger_state_version
        - transactions
      properties:
        previous_state_identifiers:
          $ref: "#/components/schemas/CommittedStateIdentifier"
          description: |
            Identifiers for the state on top of which the returned transactions were executed (ie `from_state_version - 1`).
            This should be used for sanity-checking that you're reading from the ledger history you're expecting.
            If this is field is missing, the previous state does not exists (`from_state_version` is 0).
        from_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: |
            The first (resultant) state version in the returned response (if any).
            This matches the `from_state_version` in the request.
        count:
          type: integer
          format: int32
          minimum: 0
          maximum: 10000
          description: An integer between `0` and `10000`, giving the total count of transactions in the returned response
        max_ledger_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The maximum state version currently committed on this node's ledger.
        transactions:
          description: A committed transactions list starting from the `from_state_version` (inclusive).
          type: array
          items:
            $ref: "#/components/schemas/CommittedTransaction"
        proofs:
          description: A ledger proof list starting from `from_state_version` (inclusive) stored by this node.
          type: array
          items:
            $ref: "#/components/schemas/LedgerProof"
    StreamTransactionsErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            details:
              $ref: "#/components/schemas/StreamTransactionsErrorDetails"
    StreamTransactionsErrorDetailsType:
      type: string
      enum:
        - RequestedStateVersionOutOfBounds
    StreamTransactionsErrorDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/StreamTransactionsErrorDetailsType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match StreamTransactionsErrorDetailsType
          RequestedStateVersionOutOfBounds: '#/components/schemas/RequestedStateVersionOutOfBoundsErrorDetails'
    RequestedStateVersionOutOfBoundsErrorDetails:
      allOf:
        - $ref: "#/components/schemas/StreamTransactionsErrorDetails"
        - type: object
          required:
            - max_ledger_state_version
          properties:
            max_ledger_state_version:
              $ref: "#/components/schemas/StateVersion"
              description: |
                The maximum state version currently committed on this node's ledger - the same as
                would be returned by the `max_ledger_state_version` in a successful response.
                *Note on the bounds:* the requested `from_state_version` cannot be greater than
                `max_ledger_state_version + 1` (which is an edge case returning valid
                `previous_state_identifiers` and an empty `transactions`). Any greater requested
                value triggers this error.
    CommittedTransaction:
      type: object
      required:
        - resultant_state_identifiers
        - ledger_transaction
        - receipt
        - proposer_timestamp_ms
      properties:
        resultant_state_identifiers:
          $ref: "#/components/schemas/CommittedStateIdentifier"
        ledger_transaction:
          $ref: "#/components/schemas/LedgerTransaction"
        receipt:
          $ref: "#/components/schemas/TransactionReceipt"
        balance_changes:
          description: |
            All balance changes of a transaction (including those fee-related), aggregated by resource and global entity
            within which the change occurred. Only returned if available and enabled in `TransactionFormatOptions` on your request.
          $ref: "#/components/schemas/CommittedTransactionBalanceChanges"
        proposer_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the proposer timestamp in ms.
    CommittedTransactionBalanceChanges:
      type: object
      required:
        - fungible_entity_balance_changes
        - non_fungible_entity_balance_changes
      properties:
        fungible_entity_balance_changes:
          description: |
            A list of all fungible balance updates which occurred in this transaction, aggregated by the global entity (such as account)
            which owns the vaults which were updated.
          type: array
          items:
            $ref: "#/components/schemas/LtsEntityFungibleBalanceChanges"
        non_fungible_entity_balance_changes:
          description: |
            Non fungible changes per entity and resource
          type: array
          items:
            $ref: "#/components/schemas/LtsEntityNonFungibleBalanceChanges"
    LedgerProofOriginType:
      type: string
      enum:
        - Genesis
        - Consensus
        - ProtocolUpdate
    LedgerProofOrigin:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/LedgerProofOriginType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LedgerProofOriginType
          Genesis: '#/components/schemas/GenesisLedgerProofOrigin'
          Consensus: '#/components/schemas/ConsensusLedgerProofOrigin'
          ProtocolUpdate: '#/components/schemas/ProtocolUpdateLedgerProofOrigin'
    GenesisLedgerProofOrigin:
      allOf:
        - $ref: "#/components/schemas/LedgerProofOrigin"
        - type: object
          description: |
            Represents a proof from the execution of the babylon genesis protocol update, which starts
            the babylon-node ledger.

            Behind-the-scenes, this is now the same as a `ProtocolUpdateLedgerProofOrigin`,
            but is kept separate for backwards-compatibility.

            NOTE: Some of these values may be placeholder values on nodes which haven't resynced since
            Cuttlefish. In particular, the following values might be invalid on such nodes:

            * `batch_group_idx` (placeholder of 0)
            * `batch_group_name` (placeholder of "")
            * `batch_idx` (placeholder of 0)
            * `batch_name` (placeholder of "")
            * `is_end_of_update` (placeholder of false)
          required:
            - protocol_version_name
            - genesis_opaque_hash
            - batch_group_idx
            - batch_group_name
            - batch_idx
            - batch_name
            - is_end_of_update
          properties:
            protocol_version_name:
              type: string
            # Should be config_hash but can't change due to backwards-compatibility
            genesis_opaque_hash:
              type: string
            # Should be batch_group_index but can't change due to backwards-compatibility
            batch_group_idx:
              type: integer
              format: int64
            batch_group_name:
              type: string
            # Should be batch_index but can't change due to backwards-compatibility
            batch_idx:
              type: integer
              format: int64
            batch_name:
              type: string
            is_end_of_update:
              type: boolean
    ConsensusLedgerProofOrigin:
      allOf:
        - $ref: "#/components/schemas/LedgerProofOrigin"
        - type: object
          description: |
            Represents a proof from the execution of a consensus round.
          required:
            - opaque_hash
            - timestamped_signatures
          properties:
            opaque_hash:
              $ref: "#/components/schemas/OpaqueHash"
            timestamped_signatures:
              type: array
              items:
                $ref: "#/components/schemas/TimestampedValidatorSignature"
    ProtocolUpdateLedgerProofOrigin:
      allOf:
        - $ref: "#/components/schemas/LedgerProofOrigin"
        - type: object
          description: |
            Represents a proof from the execution of a non-genesis protocol update.
            The execution of a protocol update is organised into batch groups, and
            then these batch groups are organised into batches, with each batch committed
            atomically.

            NOTE: Some of these values may be placeholder values for protocol updates pre-Cuttlefish
            on nodes which haven't resynced since Cuttlefish. In particular, the following values might be
            invalid on such nodes:

            * `config_hash` (placeholder of all zeros)
            * `batch_group_idx` (placeholder of 0)
            * `batch_group_name` (placeholder of "")
            * `batch_idx` (placeholder of 0)
            * `batch_name` (placeholder of "")
            * `is_end_of_update` (placeholder of false)
          required:
            - protocol_version_name
            - config_hash
            - batch_group_idx
            - batch_group_name
            - batch_idx
            - batch_name
            - is_end_of_update
          properties:
            protocol_version_name:
              type: string
            # Should be config_hash but can't change due to backwards-compatibility
            config_hash:
              type: string
            # Should be batch_group_index but can't change due to backwards-compatibility
            batch_group_idx:
              type: integer
              format: int64
            batch_group_name:
              type: string
            # Should be batch_index but can't change due to backwards-compatibility
            batch_idx:
              type: integer
              format: int64
            batch_name:
              type: string
            is_end_of_update:
              type: boolean
    LedgerProof:
      type: object
      required:
        - ledger_header
        - origin
      properties:
        ledger_header:
          $ref: "#/components/schemas/LedgerHeader"
        origin:
          $ref: "#/components/schemas/LedgerProofOrigin"
    LedgerHeader:
      type: object
      required:
        - epoch
        - round
        - state_version
        - hashes
        - consensus_parent_round_timestamp_ms
        - proposer_timestamp_ms
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the epoch.
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
        state_version:
          $ref: "#/components/schemas/StateVersion"
        hashes:
          $ref: "#/components/schemas/LedgerHashes"
        consensus_parent_round_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the consensus parent round timestamp in ms.
        proposer_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the proposer timestamp in ms.
        next_epoch:
          $ref: "#/components/schemas/NextEpoch"
        next_protocol_version:
          type: string
          description: If present, indicates that this proof triggers the enactment of the given protocol version.
    TimestampedValidatorSignature:
      type: object
      required:
        - validator_key
        - validator_address
        - timestamp_ms
        - signature
      properties:
        validator_key:
          $ref: "#/components/schemas/EcdsaSecp256k1PublicKey"
        validator_address:
          $ref: "#/components/schemas/ComponentAddress"
        timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the unix timestamp in ms.
        signature:
          $ref: "#/components/schemas/EcdsaSecp256k1Signature"
    OpaqueHash:
      type: string
      minLength: 64
      maxLength: 64
      description: A hex-encoded 32-byte vertex VoteData hash on the consensus side, opaque to ledger.
    LedgerTransactionType:
      type: string
      description: The type of the ledger transaction
      enum:
        - Genesis
        - User
        - UserV2
        - RoundUpdate
        - Flash
    LedgerTransaction:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/LedgerTransactionType"
        payload_hex:
          type: string
          description: The hex-encoded full ledger transaction payload. Only returned if enabled in TransactionFormatOptions on your request.
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match LedgerTransactionType
          Genesis: '#/components/schemas/GenesisLedgerTransaction'
          User: '#/components/schemas/UserLedgerTransaction'
          UserV2: '#/components/schemas/UserLedgerTransactionV2'
          RoundUpdate: '#/components/schemas/RoundUpdateLedgerTransaction'
          Flash: '#/components/schemas/FlashLedgerTransaction'
    GenesisLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - is_flash
          properties:
            is_flash:
              description: |
                The first genesis "transaction" flashes state into the database to prepare for the bootstrap transaction.
                Such a transaction does not have an associated `system_transaction`
              type: boolean
            system_transaction:
              $ref: "#/components/schemas/SystemTransaction"
    UserLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - notarized_transaction
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/NotarizedTransaction"
    UserLedgerTransactionV2:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - notarized_transaction
          properties:
            notarized_transaction:
              $ref: "#/components/schemas/NotarizedTransactionV2"
    RoundUpdateLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - round_update_transaction
          properties:
            round_update_transaction:
              $ref: "#/components/schemas/RoundUpdateTransaction"
    FlashLedgerTransaction:
      allOf:
        - $ref: "#/components/schemas/LedgerTransaction"
        - type: object
          required:
            - name
            - flashed_state_updates
          properties:
            name:
              type: string
              description: Human-readable identifier of the flash transaction.
            flashed_state_updates:
              $ref: "#/components/schemas/FlashedStateUpdates"
    RoundUpdateTransaction:
      type: object
      required:
        - proposer_timestamp
        - epoch
        - round_in_epoch
        - leader_proposal_history
      properties:
        proposer_timestamp:
          $ref: '#/components/schemas/InstantMs'
          description: |
            The round proposer's timestamp.

            Note: in abnormal cases (e.g. Byzantine network quorum), this on-ledger field may be set
            to an arbitrary, extreme value allowed by 64-bit signed integer. The API will still
            clamp the timestamp to `0 <= ms <= 100000000000000 (== 10^14)`, which translates to
            `1970-01-01T00:00:00.000Z <= t <= 5138-11-16T09:46:40.000Z`.
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
        round_in_epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the consensus round in the epoch
        leader_proposal_history:
          $ref: '#/components/schemas/LeaderProposalHistory'
          description: A recent history (i.e. since the previous `RoundUpdateValidatorTransaction`) of consensus round leaders' reliability. Used for validator emissions calculation.
    FlashedStateUpdates:
      type: object
      description: Direct state updates performed by a Flash Transaction.
      required:
        - deleted_partitions
        - set_substates
        - deleted_substates
      properties:
        deleted_partitions:
          type: array
          items:
            $ref: "#/components/schemas/PartitionId"
        set_substates:
          type: array
          items:
            $ref: "#/components/schemas/FlashSetSubstate"
        deleted_substates:
          type: array
          items:
            $ref: "#/components/schemas/SubstateId"
    FlashSetSubstate:
      type: object
      required:
        - substate_id
        - value
      properties:
        substate_id:
          $ref: "#/components/schemas/SubstateId"
        value:
          $ref: "#/components/schemas/SubstateValue"
          description: The new value set on the substate.
    LeaderProposalHistory:
      type: object
      required:
        - gap_round_leaders
        - current_leader
        - is_fallback
      properties:
        gap_round_leaders:
          type: array
          description: The validators which were leaders of the "gap" rounds (i.e. since the previous `RoundUpdateValidatorTransaction` - which means that this list will contain exactly `current.round - previous.round - 1` elements). The validators on this list should be penalized during emissions at the end of the epoch.
          items:
            $ref: "#/components/schemas/ActiveValidatorIndex"
        current_leader:
          $ref: '#/components/schemas/ActiveValidatorIndex'
          description: The leader of the concluded round.
        is_fallback:
          type: boolean
          description: Whether the concluded round was conducted in a "fallback" mode (i.e. indicating a fault of the current leader). When `true`, the `current_leader` should be penalized during emissions in the same way as `gap_round_leaders`. When `false`, the `current_leader` is considered to have made this round's proposal successfully.
    ActiveValidatorIndex:
      type: object
      required:
        - index
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: An index of a validator within a specific active validator set (ordered by stake descending). This is the same ordering as used by other parts of the API which list active validators.
    SystemTransaction:
      type: object
      properties:
        payload_hex:
          type: string
          description: The hex-encoded system transaction payload. Only returned if enabled in TransactionFormatOptions on your request.
#####################################
# REQUEST: /state/consensus-manager #
#####################################
    StateConsensusManagerRequest:
      type: object
      required:
        - network
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        include_readiness_signals:
          description: Whether to include protocol update readiness signals of active validator set (default false).
          type: boolean
    StateConsensusManagerResponse:
      type: object
      required:
        - at_ledger_state
        - config
        - state
        - current_proposal_statistic
        - current_validator_set
        - current_time
        - current_time_rounded_to_minutes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        config:
          $ref: "#/components/schemas/Substate"
        state:
          $ref: "#/components/schemas/Substate"
        current_proposal_statistic:
          $ref: "#/components/schemas/Substate"
        current_validator_set:
          $ref: "#/components/schemas/Substate"
        current_time:
          $ref: "#/components/schemas/Substate"
        current_time_rounded_to_minutes:
          $ref: "#/components/schemas/Substate"
        current_validator_readiness_signals:
          description: |
            Protocol versions signalled by the current validator set.
            Every validator from `current_validator_set` will be referenced by exactly one of the items here.
            Only returned if enabled by `include_readiness_signals` on your request.
          type: array
          items:
            $ref: "#/components/schemas/ProtocolVersionReadiness"
    ProtocolVersionReadiness:
      type: object
      required:
        - total_active_stake_proportion
        - signalling_validators
      properties:
        signalled_protocol_version:
          # Note: Re-using "#/components/schemas/ProtocolVersion" hits a quirk of the TypeScript's
          # generator ("attribute components.schemas.ProtocolVersionReadiness.ProtocolVersion is not
          # of type `schema`").
          type: string
          description: |
            A name identifying a protocol version. May be absent to denote no readiness signalled by
            the `signalling_validators`.
        total_active_stake_proportion:
          type: string
          description: |
            A sum of `active_stake_proportion` across `signalling_validators` (i.e. an easily-computable convenience field).
            This is a string-encoded fixed-precision decimal to 18 decimal places.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
        signalling_validators:
          description: |
            References to some of the current validators (i.e. a subset of `current_validator_set`)
            which have signalled readiness for the `signalled_protocol_version`.
          type: array
          items:
            $ref: '#/components/schemas/SignallingValidator'
    SignallingValidator:
      type: object
      required:
        - index
        - active_stake_proportion
      properties:
        index:
          $ref: '#/components/schemas/ActiveValidatorIndex'
          description: Validator index within the `current_validator_set`.
        active_stake_proportion:
          type: string
          description: |
            A proportion (between 0 and 1) of the total active stake of an entire `current_validator_set` (i.e. an easily-computable convenience field).
            This is a string-encoded fixed-precision decimal to 18 decimal places.
            A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
###########################
# REQUEST: /state/account #
###########################
    StateAccountRequest:
      type: object
      required:
        - network
        - account_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        account_address:
          type: string
          description: The Bech32m-encoded human readable version of the account's global address
    StateAccountResponse:
      type: object
      required:
        - at_ledger_state
        - info
        - owner_role
        - state
        - vaults
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        info:
          $ref: "#/components/schemas/Substate"
        owner_role:
          $ref: "#/components/schemas/Substate"
        state:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: All of the account's vaults
          items:
            $ref: "#/components/schemas/VaultBalance"
    VaultBalance:
      type: object
      required:
        - vault_entity
        - resource_amount
      properties:
        vault_entity:
          $ref: "#/components/schemas/EntityReference"
        resource_amount:
          $ref: "#/components/schemas/ResourceAmount"
#############################
# REQUEST: /state/component #
#############################
    StateComponentRequest:
      type: object
      required:
        - network
        - component_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        component_address:
          type: string
          description: The Bech32m-encoded human readable version of the component's global address
    StateComponentResponse:
      type: object
      required:
        - at_ledger_state
        - info
        - state
        - owner_role
        - vaults
        - descendent_nodes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        info:
          $ref: "#/components/schemas/Substate"
        state:
          $ref: "#/components/schemas/Substate"
        royalty_accumulator:
          $ref: "#/components/schemas/Substate"
        owner_role:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/VaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/StateComponentDescendentNode"
    StateComponentDescendentNode:
      type: object
      required:
        - parent_entity
        - parent_partition_number
        - parent_substate_key_hex
        - parent_substate_db_sort_key_hex
        - entity
        - depth
      properties:
        parent_entity:
          $ref: "#/components/schemas/EntityReference"
        parent_partition_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        parent_substate_key_hex:
          type: string
          description: The hex-encoded bytes of the substate key, under the entity partition
        parent_substate_db_sort_key_hex:
          type: string
          description: The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
        entity:
          $ref: "#/components/schemas/EntityReference"
        depth:
          description: Depth under component
          type: integer
          format: int32
          minimum: 0
          maximum: 100
#############################
# REQUEST: /state/validator #
#############################
    StateValidatorRequest:
      type: object
      required:
        - network
        - validator_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        validator_address:
          $ref: "#/components/schemas/ComponentAddress"
    StateValidatorResponse:
      type: object
      required:
        - at_ledger_state
        - address
        - state
        - protocol_update_readiness_signal
        - owner_role
        - vaults
        - descendent_nodes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        address:
          $ref: '#/components/schemas/ComponentAddress'
        state:
          $ref: "#/components/schemas/Substate"
        protocol_update_readiness_signal:
          $ref: "#/components/schemas/Substate"
        owner_role:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/VaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/StateComponentDescendentNode"
#####################################
# REQUEST: /state/access-controller #
#####################################
    StateAccessControllerRequest:
      type: object
      required:
        - network
        - controller_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        controller_address:
          $ref: "#/components/schemas/ComponentAddress"
    StateAccessControllerResponse:
      type: object
      required:
        - at_ledger_state
        - state
        - owner_role
        - vaults
        - descendent_nodes
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        state:
          $ref: "#/components/schemas/Substate"
        owner_role:
          $ref: "#/components/schemas/Substate"
        vaults:
          type: array
          description: Any vaults owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/VaultBalance"
        descendent_nodes:
          type: array
          description: Any descendent nodes owned directly or indirectly by the component
          items:
            $ref: "#/components/schemas/StateComponentDescendentNode"
############################
# REQUEST: /state/resource #
############################
    StateResourceRequest:
      type: object
      required:
        - network
        - resource_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        resource_address:
          type: string
          description: The Bech32m-encoded human readable version of the resource's global address
    StateResourceResponse:
      type: object
      required:
        - at_ledger_state
        - manager
        - owner_role
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        manager:
          $ref: "#/components/schemas/StateResourceManager"
        owner_role:
          $ref: "#/components/schemas/Substate"
    StateResourceManager:
      type: object
      required:
        - resource_type
      properties:
        resource_type:
          $ref: '#/components/schemas/ResourceType'
      discriminator:
        propertyName: resource_type
        mapping:
          # NOTE: These need to match ResourceType
          Fungible: '#/components/schemas/StateFungibleResourceManager'
          NonFungible: '#/components/schemas/StateNonFungibleResourceManager'
    StateFungibleResourceManager:
      allOf:
        - $ref: '#/components/schemas/StateResourceManager'
        - type: object
          required:
            - divisibility
          properties:
            divisibility:
              $ref: "#/components/schemas/Substate"
            total_supply:
              $ref: "#/components/schemas/Substate"
    StateNonFungibleResourceManager:
      allOf:
        - $ref: '#/components/schemas/StateResourceManager'
        - type: object
          required:
            - id_type
            - mutable_fields
          properties:
            id_type:
              $ref: "#/components/schemas/Substate"
            total_supply:
              $ref: "#/components/schemas/Substate"
            mutable_fields:
              $ref: "#/components/schemas/Substate"
################################
# REQUEST: /state/non-fungible #
################################
    StateNonFungibleRequest:
      type: object
      required:
        - network
        - resource_address
        - non_fungible_id
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        resource_address:
          type: string
          description: The Bech32m-encoded human readable version of the resource's global address
        non_fungible_id:
          $ref: '#/components/schemas/NonFungibleLocalIdSimpleRepresentation'
    StateNonFungibleResponse:
      type: object
      required:
        - at_ledger_state
        - non_fungible
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        non_fungible:
          $ref: "#/components/schemas/Substate"
###########################
# REQUEST: /state/package #
###########################
    StatePackageRequest:
      type: object
      required:
        - network
        - package_address
      properties:
        network:
          $ref: "#/components/schemas/NetworkIdentifier"
        package_address:
          type: string
          description: The Bech32m-encoded human readable version of the package's global address
    StatePackageResponse:
      type: object
      required:
        - at_ledger_state
        - owner_role
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        owner_role:
          $ref: "#/components/schemas/Substate"
        royalty:
          $ref: "#/components/schemas/Substate"
