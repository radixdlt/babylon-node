/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NetworkConfigurationResponseWellKnownAddresses : Key addresses for this network.



#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct NetworkConfigurationResponseWellKnownAddresses {
    #[serde(rename = "faucet")]
    pub faucet: String,
    #[serde(rename = "epoch_manager")]
    pub epoch_manager: String,
    #[serde(rename = "clock")]
    pub clock: String,
    #[serde(rename = "ecdsa_secp256k1")]
    pub ecdsa_secp256k1: String,
    #[serde(rename = "eddsa_ed25519")]
    pub eddsa_ed25519: String,
    #[serde(rename = "xrd")]
    pub xrd: String,
}

impl NetworkConfigurationResponseWellKnownAddresses {
    /// Key addresses for this network.
    pub fn new(faucet: String, epoch_manager: String, clock: String, ecdsa_secp256k1: String, eddsa_ed25519: String, xrd: String) -> NetworkConfigurationResponseWellKnownAddresses {
        NetworkConfigurationResponseWellKnownAddresses {
            faucet,
            epoch_manager,
            clock,
            ecdsa_secp256k1,
            eddsa_ed25519,
            xrd,
        }
    }
}


