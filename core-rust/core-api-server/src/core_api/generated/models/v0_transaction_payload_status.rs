/*
 * Babylon Core API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct V0TransactionPayloadStatus {
    /// The hex-encoded notarized transaction hash. This is also known as the payload hash. This hash is SHA256(SHA256(compiled_notarized_transaction))
    #[serde(rename = "payload_hash")]
    pub payload_hash: String,
    /// The status of the transaction payload, as per this node
    #[serde(rename = "status")]
    pub status: Status,
    /// An explanation for the error, if failed or rejected
    #[serde(rename = "error_message", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
}

impl V0TransactionPayloadStatus {
    pub fn new(payload_hash: String, status: Status) -> V0TransactionPayloadStatus {
        V0TransactionPayloadStatus {
            payload_hash,
            status,
            error_message: None,
        }
    }
}

/// The status of the transaction payload, as per this node
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, serde::Serialize, serde::Deserialize)]
pub enum Status {
    #[serde(rename = "CommittedSuccess")]
    CommittedSuccess,
    #[serde(rename = "CommittedFailure")]
    CommittedFailure,
    #[serde(rename = "InMempool")]
    InMempool,
    #[serde(rename = "Rejected")]
    Rejected,
}

impl Default for Status {
    fn default() -> Status {
        Self::CommittedSuccess
    }
}

