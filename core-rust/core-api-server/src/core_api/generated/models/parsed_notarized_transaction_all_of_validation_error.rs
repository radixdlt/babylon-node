/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ParsedNotarizedTransactionAllOfValidationError : If the transaction is known to not be valid, this gives a reason. Different levels of validation are performed, dependent on the validation mode. Note that, even if validation mode is Static or Full, the transaction may still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid). 



#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct ParsedNotarizedTransactionAllOfValidationError {
    /// The error message. 
    #[serde(rename = "reason")]
    pub reason: String,
    /// Whether the error is known to be permanent, or not. This relates to whether the transaction would be rejected permanently or temporarily if submitted. 
    #[serde(rename = "is_permanent")]
    pub is_permanent: bool,
}

impl ParsedNotarizedTransactionAllOfValidationError {
    /// If the transaction is known to not be valid, this gives a reason. Different levels of validation are performed, dependent on the validation mode. Note that, even if validation mode is Static or Full, the transaction may still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid). 
    pub fn new(reason: String, is_permanent: bool) -> ParsedNotarizedTransactionAllOfValidationError {
        ParsedNotarizedTransactionAllOfValidationError {
            reason,
            is_permanent,
        }
    }
}


