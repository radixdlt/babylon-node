/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NonFungibleData : Only present if the non fungible isn't deleted. NOTE: Currently there is no schema for mutable/immutable data, and it's not even guaranteed to be SBOR-encoded. But from scrypto, it likely always will be. For now, immutable_data / mutable_data is optional, and only included if the data is valid SBOR. When the payload is validated, `immutable_data_raw_hex` / `mutable_data_raw_hex` will be removed. 



#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct NonFungibleData {
    #[serde(rename = "immutable_data", skip_serializing_if = "Option::is_none")]
    pub immutable_data: Option<Box<crate::core_api::generated::models::DataStruct>>,
    /// The hex-encoded raw bytes of the immutable data of the NF. 
    #[serde(rename = "immutable_data_raw_hex")]
    pub immutable_data_raw_hex: String,
    #[serde(rename = "mutable_data", skip_serializing_if = "Option::is_none")]
    pub mutable_data: Option<Box<crate::core_api::generated::models::DataStruct>>,
    /// The hex-encoded raw bytes of the mutadata data of the NF. 
    #[serde(rename = "mutable_data_raw_hex")]
    pub mutable_data_raw_hex: String,
}

impl NonFungibleData {
    /// Only present if the non fungible isn't deleted. NOTE: Currently there is no schema for mutable/immutable data, and it's not even guaranteed to be SBOR-encoded. But from scrypto, it likely always will be. For now, immutable_data / mutable_data is optional, and only included if the data is valid SBOR. When the payload is validated, `immutable_data_raw_hex` / `mutable_data_raw_hex` will be removed. 
    pub fn new(immutable_data_raw_hex: String, mutable_data_raw_hex: String) -> NonFungibleData {
        NonFungibleData {
            immutable_data: None,
            immutable_data_raw_hex,
            mutable_data: None,
            mutable_data_raw_hex,
        }
    }
}


