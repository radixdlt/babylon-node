/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct NonFungibleId {
    /// The simple string representation of the non-fungible id. For string id types, this is simply the string itself; for integer types, this is the integer as a decimal; and for the bytes id type, this is the lower case hex representation. A non-fungible resource has a fixed `NonFungibleIdType`, so this representation uniquely identifies this non-fungible under the given resource address. 
    #[serde(rename = "simple_rep")]
    pub simple_rep: String,
    #[serde(rename = "id_type")]
    pub id_type: crate::core_api::generated::models::NonFungibleIdType,
    /// The hex-encoded SBOR-encoded bytes of its non-fungible id
    #[serde(rename = "sbor_hex")]
    pub sbor_hex: String,
}

impl NonFungibleId {
    pub fn new(simple_rep: String, id_type: crate::core_api::generated::models::NonFungibleIdType, sbor_hex: String) -> NonFungibleId {
        NonFungibleId {
            simple_rep,
            id_type,
            sbor_hex,
        }
    }
}


