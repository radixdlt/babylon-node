/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct StreamTransactionsResponse {
    /// An integer between `1` and `10^13`, giving the first (resultant) state version in the returned response (if any). This matches the `from_state_version` in the request. 
    #[serde(rename = "from_state_version")]
    pub from_state_version: i64,
    /// An integer between `0` and `10000`, giving the total count of transactions in the returned response
    #[serde(rename = "count")]
    pub count: i32,
    /// An integer between `1` and `10^13`, giving the maximum state version currently committed on this node's ledger.
    #[serde(rename = "max_ledger_state_version")]
    pub max_ledger_state_version: i64,
    /// A committed transactions list starting from the `from_state_version` (inclusive).
    #[serde(rename = "transactions")]
    pub transactions: Vec<crate::core_api::generated::models::CommittedTransaction>,
}

impl StreamTransactionsResponse {
    pub fn new(from_state_version: i64, count: i32, max_ledger_state_version: i64, transactions: Vec<crate::core_api::generated::models::CommittedTransaction>) -> StreamTransactionsResponse {
        StreamTransactionsResponse {
            from_state_version,
            count,
            max_ledger_state_version,
            transactions,
        }
    }
}


