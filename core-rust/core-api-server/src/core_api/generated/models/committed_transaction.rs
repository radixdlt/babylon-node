/*
 * Babylon Core API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct CommittedTransaction {
    /// An integer between `1` and `10^13`, giving the resultant state version after the transaction has been committed
    #[serde(rename = "state_version")]
    pub state_version: i64,
    /// The hex-encoded transaction accumulator hash. This hash captures the order of all transactions on ledger. This hash is `ACC_{N+1} = SHA256(SHA256(CONCAT(ACC_N, LEDGER_HASH_{N})))`, starting with `ACC_0 = 000..000` the pre-genesis accumulator. 
    #[serde(rename = "accumulator_hash")]
    pub accumulator_hash: String,
    #[serde(rename = "ledger_transaction")]
    pub ledger_transaction: Option<crate::core_api::generated::models::LedgerTransaction>, // Using Option permits Default trait; Will always be Some in normal use
    #[serde(rename = "receipt")]
    pub receipt: Box<crate::core_api::generated::models::TransactionReceipt>,
}

impl CommittedTransaction {
    pub fn new(state_version: i64, accumulator_hash: String, ledger_transaction: crate::core_api::generated::models::LedgerTransaction, receipt: crate::core_api::generated::models::TransactionReceipt) -> CommittedTransaction {
        CommittedTransaction {
            state_version,
            accumulator_hash,
            ledger_transaction: Option::Some(ledger_transaction),
            receipt: Box::new(receipt),
        }
    }
}


